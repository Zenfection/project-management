// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//! ENUMS
// ? enum policy
enum PolicyType {
  ALLOW
  DENY
}

enum Operator {
  EQUALS
  NOT_EQUALS
  GREATER_THAN
  LESS_THAN
  CONTAINS
  NOT_CONTAINS
  STARTS_WITH
  ENDS_WITH
}

enum UserStatus {
  ONLINE
  AWAY
  BUSY
  INVISIBLE
}

//? enum setting user

enum LanguageSetting {
  en
  vi
}

enum ThemeSetting {
  default
  brand
  teal
  rose
  purple
  amber
}

enum SchemeSetting {
  dark
  light
  auto
}

enum LayoutSetting {
  empty
  classic
  classy
  compact
  dense
  futuristic
  thin
  centered
  enterprise
  material
  modern
}

//! MODELS

model Role {
  id          Int          @id @default(autoincrement()) @map("role_id")
  name        String       @unique
  description String?
  permissions Permission[]
  policies    Policy[]
  User        User[]
}

model Permission {
  id          Int     @id @default(autoincrement()) @map("permission_id")
  name        String  @unique
  description String?
  roles       Role[]
}

model Policy {
  id         Int         @id @default(autoincrement()) @map("policy_id")
  name       String      @unique
  effect     PolicyType
  conditions Condition[]
  roles      Role[]
}

model Condition {
  id        Int      @id @default(autoincrement()) @map("condition_id")
  attribute String
  operator  Operator
  value     String
  policyId  Int
  policy    Policy   @relation(fields: [policyId], references: [id], onDelete: Cascade)

  @@index([attribute, operator])
}

model User {
  id           Int        @id @default(autoincrement()) @map("user_id")
  email        String     @unique @db.VarChar(255)
  password     String
  info         Info?
  setting      Setting?
  isTfaEnabled Boolean    @default(false)
  tfaSecret    String?
  roles        Role[]
  tasks        Task[]
  activities   Activity[]
  department   Deparment?
  ownedPlans   Plan[]     @relation("PlanOwner")
  memberPlans  Plan[]     @relation("PlanMembers")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Comment   Comment[]

  @@index([email], name: "user_email_idx")
}

enum Deparment {
  CONG_NGHE_PHAN_MEM
  CONG_NGHE_THONG_TIN
  HE_THONG_THONG_TIN
  KHOA_HOC_MAY_TINH
  MANG_MAY_TINH_VA_TRUYEN_THONG
  TRUYEN_THONG_DA_PHUONG_TIEN
}

model Info {
  userId  Int         @unique
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  about   String?
  address String?
  name    String      @default("New User")
  email   String
  status  UserStatus? @default(ONLINE)
  avatar  String?
  phone   String?     @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Setting {
  userId   Int             @unique
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  theme    ThemeSetting    @default(default)
  scheme   SchemeSetting   @default(light)
  language LanguageSetting @default(en)
  layout   LayoutSetting   @default(modern)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  COMPLETED
  CLOSED
}

model CategoryPlan {
  id        Int      @id @default(autoincrement()) @map("category_plan_id")
  title     String
  slug      String   @unique
  plans     Plan[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Plan {
  id             Int          @id @default(autoincrement()) @map("plan_id")
  title          String
  slug           String       @unique
  tasks          Task[]
  members        User[]       @relation("PlanMembers")
  description    String?
  category       CategoryPlan @relation(fields: [categoryPlanId], references: [id])
  categoryPlanId Int
  owner          User         @relation("PlanOwner", fields: [ownerId], references: [id])
  ownerId        Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id          Int        @id @default(autoincrement()) @map("task_id")
  title       String
  description String?
  dueDate     DateTime?
  status      TaskStatus @default(OPEN)
  assignee    User?      @relation(fields: [assigneeId], references: [id])
  assigneeId  Int?
  plan        Plan       @relation(fields: [planId], references: [id])
  planId      Int
  todos       Todo[]
  files       File[]
  labels      Label[]
  order       Int
  priority    Int        @default(0)
  comments    Comment[]
  Activity    Activity[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Todo {
  id      Int     @id @default(autoincrement()) @map("todo_id")
  content String
  isDone  Boolean @default(false)
  task    Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement()) @map("comment_id")
  content   String
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Label {
  id    Int    @id @default(autoincrement())
  name  String @unique
  tasks Task[]
}

model File {
  id        Int      @id @default(autoincrement()) @map("file_id")
  name      String
  path      String
  extension String
  task      Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ActivityType {
  COMMENT
  STATUS_CHANGE
  LABEL_CHANGE
  ASSIGNMENT_CHANGE
  CLOSE
}

model Activity {
  id     Int          @id @default(autoincrement()) @map("activity_id")
  type   ActivityType
  data   Json
  taskId Int
  task   Task         @relation(fields: [taskId], references: [id])
  user   User         @relation(fields: [userId], references: [id])
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
