var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AccessTokenGuard.html",[0,2.251,1,2.044]],["body/guards/AccessTokenGuard.html",[1,2.701,2,2.154,3,0.479,4,0.236,5,0.236,6,4.664,7,3.337,8,2.733,9,0.334,10,1.05,11,4.3,12,4.471,13,1.814,14,0.765,15,3.237,16,2.402,17,3.675,18,3.237,19,1.126,20,0.027,21,0.978,22,0.613,23,0.978,24,3.317,25,1.05,26,2.975,27,1.957,28,4.324,29,4.471,30,1.917,31,3.237,32,4.664,33,0.475,34,0.613,35,2.402,36,0.524,37,3.237,38,1.791,39,2.402,40,0.267,41,0.012,42,1.791,43,3.237,44,1.319,45,2.402,46,0.978,47,3.237,48,2.474,49,3.237,50,3.237,51,3.237,52,1.65,53,3.237,54,2.733,55,1.417,56,2.154,57,0.017,58,0.017]],["title/injectables/AccessTokenStrategy.html",[34,0.464,59,2.044]],["body/injectables/AccessTokenStrategy.html",[3,0.288,4,0.253,5,0.253,7,3.214,9,0.36,10,1.104,13,1.665,14,0.702,19,1.183,20,0.026,21,1.028,22,0.644,23,1.028,25,0.818,33,0.551,34,0.644,36,0.564,38,1.927,40,0.288,41,0.013,42,1.927,45,2.584,46,0.762,57,0.018,58,0.018,59,2.84,60,1.322,61,4.492,62,2.584,63,1.644,64,3.487,65,3.483,66,4.809,67,3.483,68,4.7,69,4.7,70,3.483,71,3.127,72,1.643,73,2.941,74,1.927,75,2.941,76,2.941,77,2.941,78,2.105,79,3.487,80,2.584,81,3.483,82,3.483,83,2.941,84,1.525,85,1.419,86,2.941,87,2.941,88,3.483,89,2.584,90,3.483,91,3.483,92,1.927,93,2.941,94,2.941,95,3.483]],["title/interfaces/ActiveUserData.html",[96,2.251,97,1.595]],["body/interfaces/ActiveUserData.html",[3,0.379,4,0.334,5,0.334,9,0.474,20,0.025,22,0.77,30,1.518,40,0.379,57,0.022,58,0.022,96,3.054,97,2.648,98,4.589,99,3.875,100,3.875,101,2.286,102,2.766,103,4.687,104,1.527,105,3.091]],["title/controllers/AppController.html",[106,1.481,107,2.251]],["body/controllers/AppController.html",[3,0.36,4,0.317,5,0.317,9,0.45,10,1.277,14,0.651,20,0.026,25,1.024,33,0.504,36,0.707,40,0.36,41,0.017,46,0.954,57,0.021,58,0.021,85,1.777,104,1.369,106,2.381,107,3.619,108,1.91,109,3.683,110,5.24,111,1.91,112,4.361,113,3.28,114,3.683,115,3.236,116,4.361]],["title/modules/AppModule.html",[117,1.481,118,2.251]],["body/modules/AppModule.html",[3,0.294,4,0.259,5,0.259,20,0.026,33,0.584,36,0.578,40,0.294,41,0.014,57,0.018,58,0.018,74,1.973,107,3.582,108,2.09,113,3.414,114,3.011,117,2.357,118,4.359,119,1.818,120,1.818,121,2.154,122,2.154,123,1.818,124,3.253,125,2.154,126,3.011,127,3.011,128,3.011,129,3.728,130,3.728,131,2.885,132,2.154,133,2.154,134,3.565,135,3.542,136,3.565,137,3.565,138,1.818,139,1.561,140,3.565,141,3.011,142,3.565,143,3.565,144,3.565]],["title/injectables/AppService.html",[34,0.464,113,1.872]],["body/injectables/AppService.html",[3,0.377,4,0.332,5,0.332,9,0.472,10,1.315,14,0.682,20,0.026,25,1.073,33,0.424,34,0.768,36,0.74,40,0.377,41,0.018,46,1,57,0.021,58,0.021,60,1.735,104,1.409,110,5.326,113,3.098,145,3.858,146,4.569,147,3.858,148,4.569]],["title/controllers/AuthenticationController.html",[106,1.481,149,2.251]],["body/controllers/AuthenticationController.html",[3,0.196,4,0.173,5,0.173,9,0.245,10,0.84,13,0.842,14,0.714,19,1.204,20,0.027,21,1.047,22,0.656,23,1.047,25,1.123,30,0.786,33,0.573,36,0.385,40,0.196,41,0.009,46,1.047,55,1.566,57,0.014,58,0.014,63,1.329,72,1.121,84,1.566,85,1.457,97,2.257,106,1.04,108,1.04,111,2.095,149,2.38,150,2.007,151,1.763,152,2.007,153,4.3,154,2.38,155,2.38,156,3.02,157,2.376,158,5.391,159,3.414,160,2.376,161,2.376,162,2.376,163,3.258,164,2.376,165,2.376,166,1.763,167,2.748,168,3.02,169,2.376,170,2.007,171,3.258,172,3.576,173,2.376,174,1.763,175,2.007,176,2.007,177,1.763,178,3.576,179,1.979,180,2.007,181,2.38,182,1.581,183,2.007,184,1.315,185,1.581,186,1.581,187,1.763,188,1.436,189,1.763,190,1.763,191,2.007,192,1.581,193,2.007,194,2.007,195,1.581,196,2.007,197,1.581,198,1.581,199,1.823,200,2.007,201,1.436,202,1.581,203,1.436,204,2.376,205,2.007,206,2.007,207,2.376,208,2.376,209,2.376,210,4.04,211,3.02,212,2.376,213,2.376,214,2.376,215,2.376,216,2.376,217,2.376,218,2.376,219,2.376,220,2.376,221,0.686,222,3.02,223,2.38,224,1.566,225,2.376,226,2.376,227,2.376,228,2.376,229,2.376]],["title/guards/AuthenticationGuard.html",[0,2.251,230,2.251]],["body/guards/AuthenticationGuard.html",[1,3.541,2,2.649,3,0.227,4,0.2,5,0.2,7,1.66,9,0.284,10,0.935,11,4.042,13,1.41,14,0.594,16,2.954,17,3.416,19,1.002,20,0.027,21,0.871,22,0.546,23,0.871,24,2.039,25,0.645,27,1.743,33,0.505,34,0.546,36,0.445,40,0.227,41,0.011,44,1.119,46,1.024,48,1.521,54,2.32,57,0.018,58,0.015,63,1.447,84,2.487,85,2.314,92,1.521,101,1.119,187,2.039,188,1.66,189,2.039,190,2.039,221,1.573,224,1.203,230,2.649,231,2.32,232,3.981,233,3.981,234,3.981,235,2.748,236,5.681,237,2.748,238,2.748,239,2.32,240,2.039,241,2.954,242,3.981,243,2.748,244,2.748,245,2.748,246,3.362,247,2.748,248,2.748,249,2.748,250,2.748,251,2.748,252,2.748,253,2.748,254,2.748,255,2.748,256,2.748,257,2.748,258,5.133,259,3.981,260,2.748,261,3.981,262,2.748,263,2.748,264,2.748,265,2.748]],["title/modules/AuthenticationModule.html",[117,1.481,266,2.044]],["body/modules/AuthenticationModule.html",[1,1.961,3,0.173,4,0.152,5,0.152,7,1.961,20,0.027,33,0.608,36,0.339,38,1.158,40,0.268,41,0.012,44,0.853,52,1.655,55,1.421,57,0.012,58,0.012,59,3.099,74,1.158,78,1.961,80,1.553,89,2.408,92,1.796,108,1.421,117,1.741,119,1.067,120,1.067,121,1.265,122,1.265,123,1.067,124,2.402,125,1.265,131,1.961,132,1.265,133,1.265,135,1.553,138,1.067,139,0.916,141,1.768,149,2.645,179,2.838,180,1.768,199,2.615,200,1.768,201,1.265,202,2.16,203,1.265,221,0.604,223,1.393,230,2.16,239,1.768,240,1.553,266,3.752,267,1.768,268,1.768,269,2.615,270,2.419,271,2.093,272,1.655,273,1.553,274,2.16,275,2.093,276,3.246,277,2.093,278,1.553,279,2.093,280,1.768,281,2.093,282,2.093,283,2.093,284,2.093,285,3.246,286,1.768,287,1.265,288,1.768,289,3.246,290,1.961,291,1.768,292,2.16,293,2.16,294,2.093,295,2.093,296,2.98,297,2.741,298,1.393,299,2.093,300,1.768,301,2.16,302,2.093,303,1.553,304,2.093,305,1.768,306,1.961,307,3.246,308,3.246,309,2.093,310,2.093,311,2.093,312,2.093,313,2.093,314,3.246,315,2.093,316,2.093,317,2.093,318,1.768,319,2.093,320,2.093,321,2.093,322,2.093,323,2.093,324,2.093,325,2.093,326,2.093,327,2.093,328,2.093,329,2.093]],["title/injectables/AuthenticationService.html",[34,0.464,179,1.872]],["body/injectables/AuthenticationService.html",[3,0.117,4,0.103,5,0.103,9,0.146,10,0.556,13,0.839,14,0.641,19,1.147,20,0.027,21,0.939,22,0.625,23,0.939,25,0.932,30,1.507,33,0.526,34,0.325,35,1.05,36,0.229,40,0.117,41,0.005,46,0.78,48,2.835,52,2.612,55,1.561,56,0.942,57,0.009,58,0.009,60,0.538,63,1.753,66,3.012,71,2.855,72,1.682,73,1.196,74,0.784,80,1.05,83,1.196,84,2.173,85,1.748,97,0.668,102,1.878,103,2.646,104,0.356,105,2.187,154,2.373,155,1.575,156,1.999,163,2.155,166,1.757,167,2.187,170,1.999,171,2.593,179,1.31,181,1.575,182,0.942,183,1.196,184,0.784,185,0.942,191,1.196,192,0.942,193,1.196,197,0.942,198,0.942,199,1.818,201,0.856,202,0.942,221,1.585,223,1.575,224,2.446,269,2.322,270,1.682,272,1.818,273,1.05,278,1.05,280,1.196,286,1.196,287,0.856,288,1.196,305,1.196,330,1.196,331,2.368,332,2.368,333,2.368,334,1.196,335,3.051,336,3.051,337,4.555,338,3.051,339,1.416,340,1.999,341,2.368,342,2.373,343,1.416,344,2.368,345,1.416,346,1.416,347,2.368,348,3.566,349,3.566,350,1.416,351,1.757,352,1.416,353,1.416,354,1.196,355,2.368,356,1.416,357,1.431,358,1.207,359,1.416,360,0.942,361,1.416,362,2.368,363,1.689,364,3.051,365,2.577,366,2.577,367,1.999,368,1.416,369,1.999,370,1.999,371,1.196,372,1.416,373,3.566,374,1.416,375,1.416,376,1.416,377,3.051,378,1.196,379,2.368,380,1.196,381,2.368,382,2.368,383,1.416,384,1.757,385,1.416,386,1.416,387,2.368,388,1.416,389,2.368,390,2.373,391,1.416,392,1.416,393,4.555,394,3.051,395,1.416,396,1.416,397,1.196,398,1.416,399,1.416,400,1.416,401,1.196,402,1.416,403,1.416,404,1.416,405,1.416,406,2.368,407,2.368,408,2.368,409,2.368,410,2.368,411,0.784,412,1.416,413,1.416,414,1.999,415,1.416,416,1.416,417,1.416]],["title/injectables/BcryptService.html",[34,0.464,274,2.251]],["body/injectables/BcryptService.html",[3,0.284,4,0.25,5,0.25,9,0.355,10,1.094,14,0.695,19,1.173,20,0.027,21,1.019,22,0.639,23,1.019,25,1.094,27,2.48,33,0.49,34,0.639,36,0.557,40,0.284,41,0.013,44,1.4,46,1.019,57,0.018,58,0.018,60,1.305,63,1.886,104,1.62,221,0.992,224,1.505,272,2.375,274,3.1,418,2.903,419,4.462,420,4.462,421,4.462,422,5.154,423,4.783,424,3.437,425,2.815,426,4.462,427,3.437,428,3.437,429,2.903,430,3.437,431,4.658,432,3.437]],["title/classes/CreateUserDto.html",[41,0.013,358,1.724]],["body/classes/CreateUserDto.html",[3,0.276,4,0.243,5,0.243,9,0.345,14,0.875,20,0.026,21,1.139,22,0.804,23,1.225,26,3.039,33,0.483,40,0.276,41,0.017,44,1.861,57,0.017,58,0.017,101,1.861,102,2.279,104,1.588,111,2.566,139,1.462,358,2.329,363,2.881,433,1.462,434,5.109,435,2.478,436,3.862,437,3.862,438,2.82,439,3.339,440,3.339,441,3.339,442,2.82,443,3.339,444,3.339,445,3.339,446,3.339,447,3.339,448,4.567,449,3.389,450,3.339,451,3.862,452,4.567,453,2.478,454,1.848,455,4.026,456,1.848,457,1.703,458,3.339,459,2.478,460,3.339]],["title/injectables/HashingService.html",[34,0.464,272,1.724]],["body/injectables/HashingService.html",[3,0.312,4,0.275,5,0.275,9,0.391,10,1.166,14,0.741,19,1.25,20,0.026,21,1.086,22,0.681,23,1.086,25,1.166,27,2.577,33,0.351,34,0.681,36,0.613,40,0.312,41,0.014,57,0.019,58,0.019,60,1.436,104,1.652,272,2.531,419,4.193,420,4.193,421,4.193,422,5.297,423,4.68,425,3,426,4.193,461,3.194,462,6.393,463,3.783,464,3.783]],["title/modules/IamModule.html",[117,1.481,129,2.044]],["body/modules/IamModule.html",[3,0.353,4,0.311,5,0.311,20,0.026,33,0.498,36,0.692,40,0.353,41,0.016,57,0.021,58,0.021,108,1.871,117,2.571,119,2.179,120,2.179,121,2.582,122,2.582,123,2.179,124,3.245,125,2.582,129,3.915,131,3.245,132,2.582,133,2.582,135,3.984,266,3.915,465,4.273,466,4.273,467,4.273,468,4.273]],["title/classes/RefreshTokenDto.html",[41,0.013,163,2.044]],["body/classes/RefreshTokenDto.html",[3,0.374,4,0.33,5,0.33,9,0.468,14,0.676,20,0.026,22,0.621,33,0.42,40,0.374,41,0.021,57,0.021,58,0.021,101,2.268,104,1.402,111,1.983,154,4.012,163,3.365,192,3.705,433,1.983,454,2.507,469,4.702,470,3.825,471,6.029,472,4.53]],["title/injectables/RefreshTokenIdsStorage.html",[34,0.464,269,1.724]],["body/injectables/RefreshTokenIdsStorage.html",[3,0.198,4,0.174,5,0.174,9,0.248,10,0.846,14,0.838,19,1.21,20,0.026,21,1.052,22,0.706,23,1.052,25,1.27,27,2.368,30,0.793,33,0.334,34,0.494,36,0.388,40,0.297,41,0.014,42,1.327,44,0.977,46,0.788,48,1.327,52,1.836,55,2.809,56,1.596,57,0.014,58,0.014,60,0.91,63,1.824,64,2.671,84,2.368,101,1.467,104,1.486,105,3.154,221,0.692,224,1.893,269,1.836,287,3.488,298,1.596,351,3.821,357,1.449,390,1.596,401,3.04,411,1.327,473,4.282,474,1.779,475,4.568,476,3.6,477,3.6,478,4.568,479,4.568,480,3.04,481,2.398,482,3.04,483,4.874,484,2.398,485,3.04,486,2.398,487,2.398,488,3.04,489,2.398,490,3.04,491,2.398,492,2.398,493,2.025,494,2.025,495,2.025,496,2.025,497,2.025,498,2.025,499,3.651,500,2.025,501,2.025,502,2.025]],["title/classes/RefreshTokenIdsStorageError.html",[41,0.013,357,2.044]],["body/classes/RefreshTokenIdsStorageError.html",[3,0.272,4,0.24,5,0.24,13,1.168,14,0.492,19,0.83,20,0.026,21,0.722,22,0.452,23,0.722,27,2.264,30,1.091,33,0.42,34,0.621,36,0.534,40,0.374,41,0.017,42,2.506,44,1.343,46,0.991,48,1.825,52,2.309,55,2.437,56,2.194,57,0.017,58,0.017,63,1.598,84,1.983,104,1.518,105,2.838,221,0.952,224,2.264,269,1.681,287,2.736,298,2.194,351,2.447,357,2.736,390,3.013,411,1.825,433,1.444,473,3.36,474,2.447,475,4.367,478,4.367,479,4.367,480,2.785,482,2.785,483,4.701,485,2.785,490,2.785,493,3.824,494,2.785,495,2.785,496,2.785,497,2.785,498,2.785,499,4.367,500,2.785,501,2.785,502,2.785,503,3.298,504,3.298]],["title/injectables/RefreshTokenStrategy.html",[34,0.464,505,2.509]],["body/injectables/RefreshTokenStrategy.html",[3,0.293,4,0.259,5,0.259,9,0.367,10,1.119,13,1.904,14,0.711,19,0.895,20,0.026,21,0.777,22,0.487,23,0.777,25,0.834,33,0.532,34,0.653,36,0.576,38,1.966,40,0.293,41,0.014,42,1.966,45,2.636,46,0.777,55,1.556,57,0.018,58,0.018,60,1.349,62,2.636,63,1.661,64,3.534,71,3.82,72,1.676,75,4.022,76,3,77,4.022,78,2.147,79,3.534,86,3,87,3,92,1.966,94,3,154,3.17,203,2.147,221,1.026,414,4.022,505,3.534,506,4.537,507,4.537,508,3.553,509,4.763,510,3.984,511,3.553,512,3.553,513,3.553,514,3]],["title/controllers/SessionAuthenticationController.html",[106,1.481,293,2.251]],["body/controllers/SessionAuthenticationController.html",[3,0.241,4,0.213,5,0.213,9,0.302,10,0.977,13,1.035,14,0.621,19,1.048,20,0.027,21,0.911,22,0.571,23,0.911,25,0.977,30,1.747,33,0.576,36,0.473,40,0.241,41,0.011,46,0.64,57,0.016,58,0.016,63,1.793,72,1.379,84,1.28,85,1.191,97,2.491,106,1.28,108,1.28,111,1.822,147,2.468,151,2.169,152,3.514,155,2.769,159,1.945,167,3.043,168,2.468,174,3.088,175,2.468,176,2.468,177,2.169,181,1.945,184,1.618,185,1.945,186,1.945,187,2.169,188,1.766,189,2.169,190,2.169,194,2.468,195,1.945,196,2.468,197,1.945,198,1.945,202,1.945,203,1.766,206,2.468,210,2.468,211,2.468,221,0.844,224,1.822,290,2.515,291,2.468,292,3.514,293,2.769,296,1.945,384,2.169,510,3.86,515,4.093,516,2.468,517,4.162,518,2.923,519,4.162,520,2.923,521,2.923,522,2.923,523,2.923,524,2.923,525,2.923,526,2.923,527,2.923,528,2.923,529,2.923,530,2.923,531,2.923]],["title/injectables/SessionAuthenticationService.html",[34,0.464,290,2.044]],["body/injectables/SessionAuthenticationService.html",[3,0.243,4,0.214,5,0.214,9,0.304,10,0.983,13,1.483,14,0.727,19,1.226,20,0.026,21,1.065,22,0.668,23,1.065,25,0.983,27,1.833,30,1.754,33,0.519,34,0.574,35,2.187,36,0.477,40,0.243,41,0.011,46,0.916,48,2.317,52,2.134,57,0.016,58,0.016,60,1.119,63,1.798,72,1.39,84,2.451,85,1.201,102,1.833,104,1.226,138,1.503,139,1.29,155,2.786,166,3.106,167,2.854,181,1.961,184,1.631,185,1.961,221,1.209,224,2.132,272,2.703,273,2.187,290,2.53,292,3.527,306,3.203,334,2.489,340,3.535,354,2.489,363,1.631,365,2.489,366,2.489,367,3.535,369,2.489,370,2.489,371,2.489,457,1.503,532,4.476,533,2.187,534,4.187,535,4.869,536,2.947,537,4.187,538,2.947,539,2.947,540,2.947,541,2.947,542,2.947,543,2.947]],["title/guards/SessionGuard.html",[0,2.251,544,2.509]],["body/guards/SessionGuard.html",[2,2.68,3,0.333,4,0.293,5,0.293,9,0.416,10,1.215,11,4.626,14,0.601,16,2.989,17,4.011,19,1.014,20,0.027,21,0.881,22,0.552,23,0.881,24,3.837,25,0.946,26,3.442,27,2.265,28,4.824,33,0.48,34,0.709,36,0.653,39,2.989,40,0.333,41,0.015,44,1.641,46,0.881,57,0.02,58,0.02,221,1.163,510,2.68,544,3.837,545,3.402,546,4.028,547,4.028,548,4.028]],["title/classes/SignInDto.html",[41,0.013,167,1.724]],["body/classes/SignInDto.html",[3,0.315,4,0.277,5,0.277,9,0.393,14,0.83,20,0.026,22,0.763,23,1.092,33,0.463,40,0.315,41,0.019,57,0.019,58,0.019,101,2.032,102,2.435,104,1.582,111,2.435,167,2.543,184,3.266,363,3.078,433,1.668,438,3.217,442,3.217,449,3.701,451,3.701,453,2.827,454,2.108,455,3.927,456,2.108,459,2.827,549,4.379,550,3.217,551,5.562,552,3.81,553,3.81,554,3.81,555,3.81,556,3.81,557,3.81]],["title/classes/SignUpDto.html",[41,0.013,171,2.044]],["body/classes/SignUpDto.html",[3,0.33,4,0.291,5,0.291,9,0.413,14,0.768,20,0.026,22,0.706,33,0.477,40,0.33,41,0.02,57,0.02,58,0.02,101,2.097,102,2.492,104,1.513,111,2.254,171,3.11,182,3.788,363,3.15,433,1.75,449,3.819,453,2.966,454,2.212,455,3.788,456,2.212,459,2.966,549,4.223,558,3.376,559,5.147,560,3.998,561,3.998,562,3.998,563,3.998,564,5.147,565,3.998,566,3.998]],["title/injectables/TfaAuthenticationService.html",[34,0.464,199,1.724]],["body/injectables/TfaAuthenticationService.html",[3,0.219,4,0.193,5,0.193,9,0.274,10,0.911,13,1.374,14,0.754,19,1.271,20,0.027,21,1.104,22,0.692,23,1.104,25,1.077,33,0.468,34,0.532,36,0.429,40,0.219,41,0.01,46,0.849,55,1.161,57,0.015,58,0.015,60,1.006,63,1.734,72,1.25,74,1.467,84,1.698,85,1.58,92,2.146,102,2.008,104,1.631,138,1.352,139,1.161,199,1.977,201,3.246,221,1.457,222,3.275,223,4.155,224,1.698,306,3.502,378,3.275,411,2.538,425,1.602,436,1.967,437,1.967,533,1.967,567,4.535,568,3.879,569,3.879,570,3.879,571,2.651,572,5.611,573,2.651,574,3.879,575,2.651,576,3.879,577,2.651,578,3.879,579,2.651,580,2.651,581,2.239,582,2.651,583,3.879,584,2.651,585,2.651,586,2.651,587,2.651,588,2.651,589,2.239,590,2.651]],["title/classes/UserEntity.html",[41,0.013,342,2.251]],["body/classes/UserEntity.html",[3,0.25,4,0.221,5,0.221,9,0.313,14,0.92,20,0.026,21,1.082,22,0.845,26,2.842,30,1.636,33,0.459,40,0.25,41,0.016,44,1.74,57,0.016,58,0.016,89,3.169,92,1.678,101,1.74,102,2.165,104,1.551,105,2.178,111,2.697,342,2.842,363,2.737,380,3.607,411,2.737,433,1.328,436,3.669,437,3.669,451,3.169,454,1.678,455,4.31,456,1.678,457,1.546,591,2.56,592,4.945,593,4.945,594,5.368,595,5.659,596,3.032,597,3.032,598,3.032,599,3.032,600,3.032,601,3.032,602,3.032,603,4.271,604,3.032,605,3.032,606,3.032,607,3.032]],["title/classes/UserSerializer.html",[41,0.013,301,2.251]],["body/classes/UserSerializer.html",[3,0.388,4,0.201,5,0.201,9,0.285,10,0.938,13,1.663,14,0.768,19,1.006,20,0.027,21,0.874,22,0.548,23,0.874,25,1.103,30,2.057,32,4.345,33,0.477,38,1.529,40,0.228,41,0.011,44,1.628,46,0.604,57,0.015,58,0.015,63,1.451,71,3.424,78,2.837,97,2.889,102,1.209,103,2.049,197,1.838,198,1.838,221,0.798,296,2.659,301,2.659,303,4.051,318,2.332,384,2.049,390,2.659,397,2.332,433,1.209,457,1.408,488,4.61,608,4.61,609,2.332,610,4.695,611,4.695,612,5.146,613,3.996,614,2.762,615,2.762,616,6.219,617,2.762,618,2.762,619,3.374,620,2.762,621,3.996,622,2.762,623,2.762,624,2.762,625,2.762,626,2.762,627,2.762,628,2.762,629,2.762,630,3.996,631,3.996,632,2.762,633,2.762,634,2.762,635,2.762,636,2.762]],["title/controllers/UsersController.html",[106,1.481,637,2.251]],["body/controllers/UsersController.html",[3,0.198,4,0.174,5,0.174,9,0.248,10,0.846,14,0.808,19,1.297,20,0.027,21,1.127,22,0.769,23,1.127,25,1.27,33,0.478,36,0.388,40,0.198,41,0.009,46,1.184,57,0.014,58,0.014,63,1.824,72,2.039,85,0.977,104,1.486,105,1.836,106,1.05,108,1.05,111,2.368,115,1.779,139,1.05,151,1.779,174,3.208,177,3.208,270,2.039,358,2.758,360,2.396,411,3.267,425,1.449,457,1.222,637,2.396,638,2.025,639,2.398,640,2.671,641,4.058,642,3.651,643,3.04,644,3.04,645,3.04,646,2.025,647,2.398,648,2.398,649,2.025,650,3.04,651,3.6,652,2.398,653,3.04,654,2.398,655,3.6,656,2.398,657,2.398,658,3.6,659,2.398,660,2.398,661,4.806,662,2.904,663,3.6,664,2.398,665,2.398,666,2.398,667,2.398,668,2.025,669,2.025,670,2.025,671,2.398,672,2.398,673,2.398,674,2.398,675,2.025,676,2.025,677,2.025,678,2.025,679,2.025,680,2.025,681,2.025,682,2.398,683,2.398,684,2.398,685,4.323,686,2.398,687,2.398,688,2.398,689,2.398]],["title/modules/UsersModule.html",[117,1.481,130,2.044]],["body/modules/UsersModule.html",[3,0.337,4,0.296,5,0.296,20,0.026,33,0.561,36,0.66,40,0.337,41,0.016,57,0.02,58,0.02,108,2.281,117,2.515,119,2.078,120,2.078,121,2.462,122,2.462,123,2.078,124,3.471,125,2.462,130,3.867,131,3.149,132,2.462,133,2.462,138,2.078,139,1.784,270,3.019,306,3.149,637,3.822,668,3.441,690,4.075,691,4.075,692,4.075,693,4.075]],["title/injectables/UsersService.html",[34,0.464,270,1.595]],["body/injectables/UsersService.html",[3,0.195,4,0.172,5,0.172,9,0.244,10,0.836,13,0.836,14,0.833,19,1.354,20,0.027,21,1.177,22,0.821,23,1.177,25,1.263,27,2.699,30,0.781,33,0.474,34,0.488,36,0.382,40,0.195,41,0.009,46,1.177,57,0.014,58,0.014,60,0.896,63,2.003,85,0.961,105,1.814,115,1.751,138,1.203,139,1.558,221,1.027,270,1.678,306,3.249,358,2.741,360,2.367,425,2.881,457,1.203,589,1.993,640,2.64,641,4.026,642,3.004,643,3.004,644,3.004,645,3.004,646,3.004,649,3.004,650,4.026,653,4.026,662,2.15,669,1.993,670,1.993,675,3.616,676,3.616,677,3.616,678,4.85,679,1.993,680,3.616,681,1.993,694,1.993,695,2.36,696,2.36,697,2.36,698,2.36,699,2.36,700,3.558,701,2.36,702,3.558,703,2.36,704,3.558,705,2.36,706,2.36,707,3.558,708,2.36,709,2.36]],["title/coverage.html",[710,3.418]],["body/coverage.html",[0,2.937,1,1.5,5,0.181,6,2.096,7,2.233,8,2.096,20,0.026,22,0.34,30,0.821,34,0.832,41,0.022,52,1.266,55,2.141,57,0.014,58,0.014,59,1.5,61,2.096,62,2.742,96,1.652,97,1.171,99,2.096,100,2.096,106,2.141,107,1.652,109,2.096,113,1.374,123,1.266,145,2.096,149,1.652,150,2.096,159,1.652,163,1.5,167,1.266,171,1.5,179,1.374,182,1.652,184,1.374,186,1.652,192,1.652,195,1.652,199,1.266,201,1.5,230,1.652,231,2.096,241,1.842,269,1.266,270,1.171,272,1.266,274,1.652,287,2.233,290,1.5,292,2.459,293,1.652,301,1.652,303,1.842,330,2.096,342,1.652,357,1.5,358,1.266,418,2.096,434,2.096,435,2.742,461,2.096,469,2.096,470,2.096,473,2.742,474,2.742,505,1.842,506,2.096,507,2.096,515,2.096,516,2.096,532,2.096,533,2.742,544,1.842,545,2.096,549,2.742,550,2.096,558,2.096,567,2.096,591,2.096,608,2.096,609,2.096,619,2.096,637,1.652,638,2.096,662,1.5,694,2.096,710,1.842,711,2.482,712,2.482,713,2.482,714,6.804,715,5.227,716,4.889,717,5.675,718,2.096,719,2.096,720,4.889,721,5.479,722,3.12,723,4.414,724,3.695,725,3.695,726,2.096,727,2.096,728,2.096,729,2.482,730,2.096,731,2.482,732,2.482,733,2.482]],["title/dependencies.html",[120,2.073,734,2.389]],["body/dependencies.html",[20,0.027,36,0.638,38,2.179,39,2.922,41,0.02,57,0.02,58,0.02,74,2.179,78,3.08,79,2.922,120,2.008,138,2.008,139,1.724,203,3.08,205,3.325,240,2.922,278,2.922,296,2.62,297,3.325,298,2.62,300,3.325,429,3.325,454,2.179,456,2.179,457,2.008,581,3.325,735,5.652,736,3.938,737,3.938,738,3.938,739,3.938,740,3.938,741,3.938,742,3.938,743,3.938,744,3.938,745,3.938,746,3.938,747,3.938,748,3.938,749,3.938,750,3.938,751,3.938,752,3.938,753,3.938,754,3.938,755,3.938,756,3.938,757,3.938]],["title/miscellaneous/enumerations.html",[758,1.565,759,3.433]],["body/miscellaneous/enumerations.html",[9,0.526,20,0.023,57,0.023,58,0.023,188,3.613,758,2.822,759,4.306,760,5.1,761,5.979,762,5.1,763,5.1,764,5.1]],["title/miscellaneous/functions.html",[758,1.565,765,3.433]],["body/miscellaneous/functions.html",[9,0.534,20,0.023,57,0.023,58,0.023,123,3.253,728,4.37,758,2.864,765,4.37,766,5.175]],["title/index.html",[9,0.292,767,2.829,768,2.829]],["body/index.html",[4,0.267,20,0.026,57,0.019,58,0.019,93,3.094,710,2.719,769,3.664,770,3.664,771,4.862,772,3.664,773,3.664,774,3.664,775,3.664,776,3.664,777,3.664,778,3.094,779,5.457,780,3.664,781,3.664,782,3.664,783,3.664,784,6.343,785,3.664,786,3.664,787,3.664,788,6.217,789,3.664,790,3.664,791,4.862,792,3.664,793,3.664,794,3.664,795,4.862,796,4.862,797,3.664,798,3.664,799,3.664,800,4.862,801,4.862,802,3.664,803,3.664,804,3.664,805,3.664,806,3.664,807,3.094,808,3.664,809,3.664,810,3.664,811,3.664,812,3.664,813,3.664,814,3.664,815,3.664,816,3.664,817,3.664,818,3.094,819,3.664,820,3.664,821,3.664,822,3.664,823,3.664,824,3.664,825,3.094]],["title/modules.html",[119,2.349]],["body/modules.html",[20,0.022,57,0.022,58,0.022,118,3.237,119,2.48,129,2.94,130,2.94,266,2.94,807,5.44,826,6.442,827,6.442,828,6.442]],["title/overview.html",[829,3.89]],["body/overview.html",[2,2.464,20,0.026,57,0.019,58,0.019,59,3.315,60,1.406,96,2.464,108,1.621,113,3.036,117,1.621,118,4.296,119,1.888,120,1.888,121,2.238,122,2.238,123,1.888,124,2.238,125,2.238,126,3.127,127,3.127,128,3.127,129,3.668,130,3.668,131,2.959,132,2.238,133,2.238,179,3.036,199,2.796,266,4.068,267,3.127,268,3.127,269,2.796,270,2.753,433,1.621,514,3.127,829,3.127,830,4.896,831,3.703,832,3.703,833,3.703]],["title/properties.html",[101,1.656,734,2.389]],["body/properties.html",[20,0.026,57,0.023,58,0.023,101,2.077,778,4.306,818,4.306,825,4.306,834,5.1,835,5.1,836,5.1]],["title/classes/updateUserDto.html",[41,0.013,662,2.044]],["body/classes/updateUserDto.html",[3,0.396,4,0.349,5,0.349,20,0.026,33,0.535,40,0.396,41,0.018,42,2.655,57,0.022,58,0.022,358,2.446,360,3.193,433,2.101,435,3.56,456,2.655,640,3.56,662,3.484,730,4.052,837,4.798,838,4.798]],["title/miscellaneous/variables.html",[758,1.565,839,3.433]],["body/miscellaneous/variables.html",[9,0.399,17,2.572,20,0.027,22,0.691,30,1.963,46,0.846,57,0.019,58,0.019,97,2.376,104,1.268,159,3.351,186,3.351,188,3.043,195,2.572,221,1.454,241,3.737,246,4.253,510,2.572,718,3.264,719,4.253,722,3.264,726,3.264,727,4.253,758,2.139,839,3.264,840,3.866,841,5.036,842,3.866,843,5.935,844,5.935,845,3.866,846,5.036,847,3.866,848,5.036,849,3.866,850,3.866,851,3.866,852,3.866,853,3.866]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"modules/IamModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"classes/updateUserDto.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":714,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":835,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":756,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":745,"title":{},"body":{"dependencies.html":{}}}],["0.22.0",{"_index":749,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":744,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":751,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":721,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":715,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":717,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":723,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":716,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":729,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":724,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":725,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":731,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":514,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{},"overview.html":{}}}],["1.17.3",{"_index":747,"title":{},"body":{"dependencies.html":{}}}],["1.5.3",{"_index":753,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":831,"title":{},"body":{"overview.html":{}}}],["10.0.2",{"_index":738,"title":{},"body":{"dependencies.html":{}}}],["10.1.1",{"_index":737,"title":{},"body":{"dependencies.html":{}}}],["10.2.5",{"_index":735,"title":{},"body":{"dependencies.html":{}}}],["12.0.1",{"_index":750,"title":{},"body":{"dependencies.html":{}}}],["12345678",{"_index":566,"title":{},"body":{"classes/SignUpDto.html":{}}}],["12345678'})@minlength(8",{"_index":562,"title":{},"body":{"classes/SignUpDto.html":{}}}],["3",{"_index":833,"title":{},"body":{"overview.html":{}}}],["3.1.1",{"_index":736,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":830,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":752,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":742,"title":{},"body":{"dependencies.html":{}}}],["5.3.1",{"_index":741,"title":{},"body":{"dependencies.html":{}}}],["5.3.2",{"_index":748,"title":{},"body":{"dependencies.html":{}}}],["6.1.3",{"_index":746,"title":{},"body":{"dependencies.html":{}}}],["7.1.11",{"_index":740,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":757,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":832,"title":{},"body":{"overview.html":{}}}],["abc@gmail.com",{"_index":565,"title":{},"body":{"classes/SignUpDto.html":{}}}],["abc@gmail.com'})@isemail",{"_index":560,"title":{},"body":{"classes/SignUpDto.html":{}}}],["abstract",{"_index":462,"title":{},"body":{"injectables/HashingService.html":{}}}],["access",{"_index":54,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["accesstoken",{"_index":394,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["accesstokenguard",{"_index":1,"title":{"guards/AccessTokenGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{}}}],["accesstokenstrategy",{"_index":59,"title":{"injectables/AccessTokenStrategy.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{},"overview.html":{}}}],["activeuser",{"_index":159,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["activeuser.email",{"_index":226,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["activeuserdata",{"_index":97,"title":{"interfaces/ActiveUserData.html":{}},"body":{"interfaces/ActiveUserData.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/SessionAuthenticationController.html":{},"classes/UserSerializer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["already",{"_index":381,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["amazing",{"_index":808,"title":{},"body":{"index.html":{}}}],["anonymous",{"_index":386,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["apiproperty",{"_index":455,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/UserEntity.html":{}}}],["apiproperty()@isemail",{"_index":438,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["apiproperty()@ishash('sha512",{"_index":444,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@isoptional()@isboolean",{"_index":440,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@isoptional()@isstring",{"_index":446,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@isoptional()@length(6",{"_index":554,"title":{},"body":{"classes/SignInDto.html":{}}}],["apiproperty()@minlength(8",{"_index":442,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["apiproperty({example",{"_index":559,"title":{},"body":{"classes/SignUpDto.html":{}}}],["apiproperty({required",{"_index":602,"title":{},"body":{"classes/UserEntity.html":{}}}],["app",{"_index":786,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":114,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":285,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["appcontroller",{"_index":107,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":777,"title":{},"body":{"index.html":{}}}],["apply",{"_index":317,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["appmodule",{"_index":118,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appname",{"_index":583,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["appservice",{"_index":113,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["arguments",{"_index":51,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["async",{"_index":63,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["audience",{"_index":407,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["auth",{"_index":186,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth(authtype.bearer",{"_index":219,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["auth(authtype.none",{"_index":206,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{}}}],["auth_type_key",{"_index":241,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authenticated",{"_index":630,"title":{},"body":{"classes/UserSerializer.html":{}}}],["authentication",{"_index":152,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{}}}],["authentication.controller",{"_index":295,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["authentication.controller.ts",{"_index":516,"title":{},"body":{"controllers/SessionAuthenticationController.html":{},"coverage.html":{}}}],["authentication.controller.ts:28",{"_index":522,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["authentication.controller.ts:34",{"_index":520,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["authentication.service",{"_index":202,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/SessionAuthenticationController.html":{}}}],["authentication.service.ts",{"_index":533,"title":{},"body":{"injectables/SessionAuthenticationService.html":{},"injectables/TfaAuthenticationService.html":{},"coverage.html":{}}}],["authentication.service.ts:12",{"_index":536,"title":{},"body":{"injectables/SessionAuthenticationService.html":{}}}],["authentication.service.ts:13",{"_index":577,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["authentication.service.ts:18",{"_index":538,"title":{},"body":{"injectables/SessionAuthenticationService.html":{}}}],["authentication.service.ts:24",{"_index":579,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["authentication.service.ts:26",{"_index":539,"title":{},"body":{"injectables/SessionAuthenticationService.html":{}}}],["authentication.service.ts:28",{"_index":575,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["authentication.service.ts:7",{"_index":573,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["authentication/authentication.module",{"_index":468,"title":{},"body":{"modules/IamModule.html":{}}}],["authentication/session",{"_index":292,"title":{},"body":{"modules/AuthenticationModule.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"coverage.html":{}}}],["authentication/tfa",{"_index":201,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/TfaAuthenticationService.html":{},"coverage.html":{}}}],["authenticationcontroller",{"_index":149,"title":{"controllers/AuthenticationController.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{}}}],["authenticationguard",{"_index":230,"title":{"guards/AuthenticationGuard.html":{}},"body":{"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{}}}],["authenticationguard.defaultauthtype",{"_index":250,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authenticationmodule",{"_index":266,"title":{"modules/AuthenticationModule.html":{}},"body":{"modules/AuthenticationModule.html":{},"modules/IamModule.html":{},"modules.html":{},"overview.html":{}}}],["authenticationservice",{"_index":179,"title":{"injectables/AuthenticationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["authenticator",{"_index":580,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["authenticator.generatesecret",{"_index":582,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["authenticator.keyuri(email",{"_index":585,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["authenticator.verify",{"_index":586,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["authguard",{"_index":37,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["authguard('jwt",{"_index":43,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["author",{"_index":818,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":208,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["authtype",{"_index":188,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"controllers/SessionAuthenticationController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authtype.bearer",{"_index":242,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtype.none",{"_index":244,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypeguardmap",{"_index":232,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypes",{"_index":246,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["await",{"_index":224,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"injectables/TfaAuthenticationService.html":{}}}],["backers",{"_index":809,"title":{},"body":{"index.html":{}}}],["based",{"_index":50,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["bcrypt",{"_index":429,"title":{},"body":{"injectables/BcryptService.html":{},"dependencies.html":{}}}],["bcryptservice",{"_index":274,"title":{"injectables/BcryptService.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/BcryptService.html":{},"coverage.html":{}}}],["bearer",{"_index":763,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["body",{"_index":174,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":26,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/CreateUserDto.html":{},"guards/SessionGuard.html":{},"classes/UserEntity.html":{}}}],["bootstrap",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":828,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":826,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":422,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["building",{"_index":772,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":11,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/SessionGuard.html":{}}}],["canactivate(context",{"_index":16,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/SessionGuard.html":{}}}],["catch",{"_index":389,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["checkexist",{"_index":534,"title":{},"body":{"injectables/SessionAuthenticationService.html":{}}}],["checkexist(email",{"_index":537,"title":{},"body":{"injectables/SessionAuthenticationService.html":{}}}],["class",{"_index":41,"title":{"classes/CreateUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenIdsStorageError.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"classes/updateUserDto.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"modules/IamModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"classes/updateUserDto.html":{}}}],["classes",{"_index":433,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenIdsStorageError.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"overview.html":{},"classes/updateUserDto.html":{}}}],["client",{"_index":319,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["cluster_appmodule",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule",{"_index":267,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_providers",{"_index":268,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_iammodule",{"_index":465,"title":{},"body":{"modules/IamModule.html":{}}}],["cluster_iammodule_imports",{"_index":466,"title":{},"body":{"modules/IamModule.html":{}}}],["cluster_usersmodule",{"_index":690,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":691,"title":{},"body":{"modules/UsersModule.html":{}}}],["code",{"_index":378,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/TfaAuthenticationService.html":{}}}],["compare",{"_index":419,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["compare(data",{"_index":421,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["config/jwt.config/jwt.config",{"_index":280,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{}}}],["configmodule",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":309,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["configmodule.forroot",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":572,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["configtype",{"_index":66,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthenticationService.html":{}}}],["configure(consumer",{"_index":312,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["conflictexception",{"_index":354,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{}}}],["conflictexception('email",{"_index":365,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{}}}],["connect",{"_index":300,"title":{},"body":{"modules/AuthenticationModule.html":{},"dependencies.html":{}}}],["const",{"_index":221,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserSerializer.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":13,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserSerializer.html":{},"injectables/UsersService.html":{}}}],["constructor(configservice",{"_index":571,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["constructor(hashservice",{"_index":334,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{}}}],["constructor(jwtconfigservice",{"_index":65,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["constructor(message",{"_index":493,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["constructor(prismaservice",{"_index":695,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(private",{"_index":115,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(reflector",{"_index":235,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["consumer",{"_index":316,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["context",{"_index":24,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/SessionGuard.html":{}}}],["context.getclass",{"_index":249,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.gethandler",{"_index":248,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":547,"title":{},"body":{"guards/SessionGuard.html":{}}}],["controller",{"_index":106,"title":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('authentication",{"_index":207,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["controller('session",{"_index":526,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["controller('users",{"_index":671,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":108,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"modules/IamModule.html":{},"controllers/SessionAuthenticationController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["controllers/authentication.controller",{"_index":279,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["controllers/session",{"_index":294,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["cookie",{"_index":324,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["coverage",{"_index":710,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":640,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/updateUserDto.html":{}}}],["create(@body",{"_index":672,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(createuserdto",{"_index":646,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createdat",{"_index":592,"title":{},"body":{"classes/UserEntity.html":{}}}],["createparamdecorator",{"_index":845,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createredisstore",{"_index":299,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["createredisstore(session",{"_index":315,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["createuserdto",{"_index":358,"title":{"classes/CreateUserDto.html":{}},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/updateUserDto.html":{}}}],["crypto",{"_index":356,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["ctx",{"_index":849,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":850,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cursor",{"_index":677,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["data",{"_index":425,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/TfaAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["data.interface",{"_index":198,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/SessionAuthenticationController.html":{},"classes/UserSerializer.html":{}}}],["data.interface.ts",{"_index":100,"title":{},"body":{"interfaces/ActiveUserData.html":{},"coverage.html":{}}}],["date",{"_index":594,"title":{},"body":{"classes/UserEntity.html":{}}}],["declarations",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":111,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"classes/CreateUserDto.html":{},"classes/RefreshTokenDto.html":{},"controllers/SessionAuthenticationController.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{}}}],["decorators/active",{"_index":194,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{}}}],["decorators/auth/auth.decorator",{"_index":187,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"controllers/SessionAuthenticationController.html":{}}}],["default",{"_index":843,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaultauthtype",{"_index":234,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["defined",{"_index":14,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":667,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':id",{"_index":658,"title":{},"body":{"controllers/UsersController.html":{}}}],["dependencies",{"_index":120,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deprecated",{"_index":289,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["description",{"_index":778,"title":{},"body":{"index.html":{},"properties.html":{}}}],["deserializeuser",{"_index":611,"title":{},"body":{"classes/UserSerializer.html":{}}}],["deserializeuser(payload",{"_index":615,"title":{},"body":{"classes/UserSerializer.html":{}}}],["development",{"_index":787,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":711,"title":{},"body":{"coverage.html":{}}}],["done",{"_index":616,"title":{},"body":{"classes/UserSerializer.html":{}}}],["done(null",{"_index":631,"title":{},"body":{"classes/UserSerializer.html":{}}}],["dto/create",{"_index":669,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/refresh",{"_index":191,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["dto/sign",{"_index":181,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{}}}],["dto/update",{"_index":670,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":797,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":773,"title":{},"body":{"index.html":{}}}],["email",{"_index":102,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"injectables/SessionAuthenticationService.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{}}}],["enabletfasecret",{"_index":568,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["enabletfasecret(email",{"_index":574,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["encrypt",{"_index":423,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["enumerations",{"_index":759,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/auth",{"_index":189,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"controllers/SessionAuthenticationController.html":{}}}],["err",{"_index":32,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/UserSerializer.html":{}}}],["error",{"_index":390,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"classes/UserSerializer.html":{}}}],["error,payload",{"_index":617,"title":{},"body":{"classes/UserSerializer.html":{}}}],["error,user",{"_index":622,"title":{},"body":{"classes/UserSerializer.html":{}}}],["error.code",{"_index":391,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["example",{"_index":564,"title":{},"body":{"classes/SignUpDto.html":{}}}],["exception",{"_index":49,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["executioncontext",{"_index":17,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/SessionGuard.html":{},"miscellaneous/variables.html":{}}}],["exists",{"_index":366,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{}}}],["expiresin",{"_index":348,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["export",{"_index":40,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"modules/IamModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/updateUserDto.html":{}}}],["exports",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":203,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"dependencies.html":{}}}],["extends",{"_index":42,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/updateUserDto.html":{}}}],["extractjwt",{"_index":76,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":87,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["false",{"_index":89,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthenticationModule.html":{},"classes/UserEntity.html":{}}}],["field",{"_index":846,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"modules/IamModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/updateUserDto.html":{}}}],["findall",{"_index":641,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findfilter",{"_index":642,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findfilter(params",{"_index":649,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone",{"_index":643,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":683,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(id",{"_index":654,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(where",{"_index":700,"title":{},"body":{"injectables/UsersService.html":{}}}],["flat",{"_index":253,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["forroutes",{"_index":329,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["found",{"_index":56,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["framework",{"_index":771,"title":{},"body":{"index.html":{}}}],["fulfilled",{"_index":259,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["function",{"_index":619,"title":{},"body":{"classes/UserSerializer.html":{},"coverage.html":{}}}],["functions",{"_index":765,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generateqrcode",{"_index":153,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["generateqrcode(response",{"_index":157,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["generatesecret",{"_index":569,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["generatesecret(email",{"_index":576,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["generatetoken",{"_index":331,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["generatetoken(user",{"_index":341,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["gensalt",{"_index":428,"title":{},"body":{"injectables/BcryptService.html":{}}}],["gensalt(10",{"_index":432,"title":{},"body":{"injectables/BcryptService.html":{}}}],["get(':id",{"_index":655,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('filter",{"_index":651,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('test",{"_index":519,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["gethello",{"_index":110,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getkey",{"_index":476,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{}}}],["getkey(userid",{"_index":480,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["getpassportinstance",{"_index":612,"title":{},"body":{"classes/UserSerializer.html":{}}}],["getting",{"_index":767,"title":{"index.html":{}},"body":{}}],["grow",{"_index":804,"title":{},"body":{"index.html":{}}}],["guard",{"_index":0,"title":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/SessionGuard.html":{}},"body":{"coverage.html":{}}}],["guard.canactivate(context",{"_index":256,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["guardpromises",{"_index":254,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/SessionGuard.html":{},"overview.html":{}}}],["guards.map((guard",{"_index":255,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["guards/access",{"_index":283,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["guards/authentication/authentication.guard",{"_index":284,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["handlerequest",{"_index":12,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["handlerequest(err",{"_index":29,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["hash",{"_index":420,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["hash(data",{"_index":426,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["hashedpassword",{"_index":382,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["hashing.service",{"_index":430,"title":{},"body":{"injectables/BcryptService.html":{}}}],["hashing/bcrypt/bcrypt.service",{"_index":275,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["hashing/hashing.service",{"_index":273,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{}}}],["hashingservice",{"_index":272,"title":{"injectables/HashingService.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/SessionAuthenticationService.html":{},"coverage.html":{}}}],["hashservice",{"_index":340,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{}}}],["hello",{"_index":147,"title":{},"body":{"injectables/AppService.html":{},"controllers/SessionAuthenticationController.html":{}}}],["here",{"_index":815,"title":{},"body":{"index.html":{}}}],["httpcode",{"_index":175,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{}}}],["httpcode(httpstatus.ok",{"_index":210,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{}}}],["httpcode(httpstatus.ok)@auth(authtype.bearer)@post('tfa/generate",{"_index":160,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpcode(httpstatus.ok)@post('refresh",{"_index":164,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpcode(httpstatus.ok)@post('sign",{"_index":168,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{}}}],["httponly",{"_index":326,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["https://nestjs.com",{"_index":822,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":176,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{}}}],["iam/iam.module",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["iammodule",{"_index":129,"title":{"modules/IamModule.html":{}},"body":{"modules/AppModule.html":{},"modules/IamModule.html":{},"modules.html":{},"overview.html":{}}}],["id",{"_index":411,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{}}}],["id.id",{"_index":590,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["identifier",{"_index":712,"title":{},"body":{"coverage.html":{}}}],["ids.storage",{"_index":288,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{}}}],["ids.storage.ts",{"_index":474,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"coverage.html":{}}}],["ids.storage.ts:19",{"_index":492,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{}}}],["ids.storage.ts:21",{"_index":487,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{}}}],["ids.storage.ts:24",{"_index":489,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{}}}],["ids.storage.ts:28",{"_index":484,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{}}}],["ids.storage.ts:32",{"_index":491,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{}}}],["ids.storage.ts:39",{"_index":486,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{}}}],["ids.storage.ts:43",{"_index":481,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{}}}],["ids.storage.ts:9",{"_index":503,"title":{},"body":{"classes/RefreshTokenIdsStorageError.html":{}}}],["ids.storage/refresh",{"_index":287,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"coverage.html":{}}}],["ignoreexpiration",{"_index":88,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["implements",{"_index":44,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"guards/SessionGuard.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{}}}],["import",{"_index":33,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"modules/IamModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/updateUserDto.html":{}}}],["imports",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/IamModule.html":{}}}],["in.dto",{"_index":185,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{}}}],["in.dto.ts",{"_index":550,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["in.dto.ts:10",{"_index":553,"title":{},"body":{"classes/SignInDto.html":{}}}],["in.dto.ts:15",{"_index":555,"title":{},"body":{"classes/SignInDto.html":{}}}],["in.dto.ts:6",{"_index":552,"title":{},"body":{"classes/SignInDto.html":{}}}],["in.dto/sign",{"_index":184,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"classes/SignInDto.html":{},"coverage.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"modules/IamModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/updateUserDto.html":{}}}],["inject",{"_index":73,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthenticationService.html":{}}}],["inject(jwtconfig.key",{"_index":83,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthenticationService.html":{}}}],["injectable",{"_index":34,"title":{"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/SessionAuthenticationService.html":{},"injectables/TfaAuthenticationService.html":{},"injectables/UsersService.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"injectables/TfaAuthenticationService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":60,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/SessionAuthenticationService.html":{},"injectables/TfaAuthenticationService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["insert",{"_index":401,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/RefreshTokenIdsStorage.html":{}}}],["insert(userid",{"_index":482,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["installation",{"_index":783,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":785,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":415,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["interface",{"_index":96,"title":{"interfaces/ActiveUserData.html":{}},"body":{"interfaces/ActiveUserData.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":98,"title":{},"body":{"interfaces/ActiveUserData.html":{}}}],["interfaces/active",{"_index":197,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/SessionAuthenticationController.html":{},"classes/UserSerializer.html":{}}}],["invalidate",{"_index":477,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{}}}],["invalidate(userid",{"_index":485,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["ioredis",{"_index":298,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"dependencies.html":{}}}],["isboolean",{"_index":448,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isdate",{"_index":595,"title":{},"body":{"classes/UserEntity.html":{}}}],["isemail",{"_index":449,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{}}}],["ishash",{"_index":450,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ishash('sha512",{"_index":460,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ismatch",{"_index":367,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{}}}],["isnotempty",{"_index":471,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["isoptional",{"_index":451,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{},"classes/UserEntity.html":{}}}],["isstring",{"_index":452,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["issuer",{"_index":409,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["istfaenabled",{"_index":436,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{}}}],["isvalid",{"_index":373,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["join",{"_index":811,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":79,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["jwtconfig",{"_index":80,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{}}}],["jwtconfigservice",{"_index":68,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["jwtconfigservice.secret",{"_index":95,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["jwtconfiguration",{"_index":336,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["jwtfromrequest",{"_index":86,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["jwtmodule",{"_index":277,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":310,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtservice",{"_index":337,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["kamil",{"_index":819,"title":{},"body":{"index.html":{}}}],["keyof",{"_index":847,"title":{},"body":{"miscellaneous/variables.html":{}}}],["legend",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":556,"title":{},"body":{"classes/SignInDto.html":{}}}],["length(6",{"_index":557,"title":{},"body":{"classes/SignInDto.html":{}}}],["license",{"_index":825,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":801,"title":{},"body":{"index.html":{}}}],["literal",{"_index":650,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["map((type",{"_index":251,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["match",{"_index":371,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{}}}],["matching",{"_index":58,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"modules/IamModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"classes/updateUserDto.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":504,"title":{},"body":{"classes/RefreshTokenIdsStorageError.html":{}}}],["metadata",{"_index":755,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":10,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["middlewareconsumer",{"_index":313,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["minlength",{"_index":453,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{}}}],["minlength(8",{"_index":459,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{}}}],["miscellaneous",{"_index":758,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":800,"title":{},"body":{"index.html":{}}}],["mode",{"_index":791,"title":{},"body":{"index.html":{}}}],["module",{"_index":117,"title":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":119,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":814,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":820,"title":{},"body":{"index.html":{}}}],["name",{"_index":21,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["nest",{"_index":779,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":824,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"injectables/SessionAuthenticationService.html":{},"injectables/TfaAuthenticationService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":36,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"modules/IamModule.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"injectables/TfaAuthenticationService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":74,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/TfaAuthenticationService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":240,"title":{},"body":{"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":278,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":38,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AuthenticationModule.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UserSerializer.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":739,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":456,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/UserEntity.html":{},"dependencies.html":{},"classes/updateUserDto.html":{}}}],["nestmodule",{"_index":311,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["new",{"_index":52,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/SessionAuthenticationService.html":{},"coverage.html":{}}}],["node.js",{"_index":770,"title":{},"body":{"index.html":{}}}],["none",{"_index":764,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["null",{"_index":380,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/UserEntity.html":{}}}],["nullable",{"_index":603,"title":{},"body":{"classes/UserEntity.html":{}}}],["number",{"_index":105,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/AuthenticationService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["number(id",{"_index":685,"title":{},"body":{"controllers/UsersController.html":{}}}],["observable",{"_index":28,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/SessionGuard.html":{}}}],["onapplicationbootstrap",{"_index":478,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["onapplicationshutdown",{"_index":479,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["open",{"_index":802,"title":{},"body":{"index.html":{}}}],["optional",{"_index":23,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SignInDto.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["orderby",{"_index":680,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["otplib",{"_index":581,"title":{},"body":{"injectables/TfaAuthenticationService.html":{},"dependencies.html":{}}}],["out",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":829,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p2002",{"_index":392,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["package",{"_index":734,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":666,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":19,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["params",{"_index":653,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["partialtype",{"_index":837,"title":{},"body":{"classes/updateUserDto.html":{}}}],["partialtype(createuserdto",{"_index":838,"title":{},"body":{"classes/updateUserDto.html":{}}}],["passport",{"_index":78,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthenticationModule.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UserSerializer.html":{},"dependencies.html":{}}}],["passport.initialize",{"_index":327,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["passport.session",{"_index":328,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["passportinstance",{"_index":624,"title":{},"body":{"classes/UserSerializer.html":{}}}],["passportinstance.deserializeuser((payload",{"_index":628,"title":{},"body":{"classes/UserSerializer.html":{}}}],["passportinstance.serializeuser((user",{"_index":626,"title":{},"body":{"classes/UserSerializer.html":{}}}],["passportmodule",{"_index":276,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["passportserializer",{"_index":610,"title":{},"body":{"classes/UserSerializer.html":{}}}],["passportstrategy",{"_index":75,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["passportstrategy(strategy",{"_index":82,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["passreqtocallback",{"_index":512,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["password",{"_index":363,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"injectables/SessionAuthenticationService.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/UserEntity.html":{}}}],["patch",{"_index":665,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id",{"_index":663,"title":{},"body":{"controllers/UsersController.html":{}}}],["payload",{"_index":71,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthenticationService.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UserSerializer.html":{}}}],["permissions",{"_index":634,"title":{},"body":{"classes/UserSerializer.html":{}}}],["please",{"_index":812,"title":{},"body":{"index.html":{}}}],["pnpm",{"_index":784,"title":{},"body":{"index.html":{}}}],["post",{"_index":177,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["post('refresh",{"_index":216,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('sign",{"_index":211,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{}}}],["post('tfa/generate",{"_index":220,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["prefix",{"_index":151,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["prisma",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"classes/CreateUserDto.html":{},"injectables/SessionAuthenticationService.html":{},"injectables/TfaAuthenticationService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["prisma.usercreateinput",{"_index":458,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["prisma.userorderbywithrelationinput",{"_index":681,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["prisma.userwhereinput",{"_index":679,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["prisma.userwhereuniqueinput",{"_index":678,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["prisma/client",{"_index":457,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/SessionAuthenticationService.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["prismamodule",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["prismamodule.forroot",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["prismaserive",{"_index":535,"title":{},"body":{"injectables/SessionAuthenticationService.html":{}}}],["prismaservice",{"_index":306,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/SessionAuthenticationService.html":{},"injectables/TfaAuthenticationService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["private",{"_index":84,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"injectables/TfaAuthenticationService.html":{}}}],["process.env.session_secret",{"_index":321,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["production",{"_index":93,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"index.html":{}}}],["progressive",{"_index":769,"title":{},"body":{"index.html":{}}}],["project",{"_index":803,"title":{},"body":{"index.html":{}}}],["promise",{"_index":27,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"injectables/UsersService.html":{}}}],["promise.all",{"_index":395,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["promise.allsettled(guardpromises",{"_index":257,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["promisify",{"_index":524,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["promisify(request.login.bind(request))(user",{"_index":530,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["properties",{"_index":101,"title":{"properties.html":{}},"body":{"interfaces/ActiveUserData.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateUserDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/UserEntity.html":{},"properties.html":{}}}],["provide",{"_index":307,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["providers",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["qrcode",{"_index":205,"title":{},"body":{"controllers/AuthenticationController.html":{},"dependencies.html":{}}}],["randomuuid",{"_index":355,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["read",{"_index":813,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":85,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"injectables/TfaAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["record",{"_index":243,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["redis",{"_index":297,"title":{},"body":{"modules/AuthenticationModule.html":{},"dependencies.html":{}}}],["redis(process.env.redis_url",{"_index":320,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["redisclient",{"_index":475,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["redisclient(process.env.redis_url",{"_index":496,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["redisstore",{"_index":314,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["reflect",{"_index":754,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":236,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["refresh",{"_index":414,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["refreshtoken",{"_index":154,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["refreshtoken(@body",{"_index":217,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refreshtoken(refreshtokendto",{"_index":162,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refreshtoken.refreshtoken",{"_index":405,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtokendto",{"_index":163,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["refreshtokenid",{"_index":393,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtokenidsstorage",{"_index":269,"title":{"injectables/RefreshTokenIdsStorage.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"coverage.html":{},"overview.html":{}}}],["refreshtokenidsstorageerror",{"_index":357,"title":{"classes/RefreshTokenIdsStorageError.html":{}},"body":{"injectables/AuthenticationService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"coverage.html":{}}}],["refreshtokenidsstorageerror('token",{"_index":501,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["refreshtokens",{"_index":332,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtokens(refreshtoken",{"_index":344,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtokenstrategy",{"_index":505,"title":{"injectables/RefreshTokenStrategy.html":{}},"body":{"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["rejected",{"_index":258,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["rejected['reason",{"_index":262,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["remove",{"_index":644,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":688,"title":{},"body":{"controllers/UsersController.html":{}}}],["remove(id",{"_index":657,"title":{},"body":{"controllers/UsersController.html":{}}}],["remove(where",{"_index":702,"title":{},"body":{"injectables/UsersService.html":{}}}],["repository",{"_index":782,"title":{},"body":{"index.html":{}}}],["req",{"_index":523,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["request",{"_index":510,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"guards/SessionGuard.html":{},"miscellaneous/variables.html":{}}}],["request.headers?.authorization.split",{"_index":513,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["request.isauthenticated",{"_index":548,"title":{},"body":{"guards/SessionGuard.html":{}}}],["request[request_user_key",{"_index":851,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request_user_key",{"_index":727,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":607,"title":{},"body":{"classes/UserEntity.html":{}}}],["res",{"_index":178,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["resave",{"_index":322,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["reset",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":158,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["response.type('png",{"_index":228,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["result",{"_index":264,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["result.status",{"_index":261,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["result.value",{"_index":265,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["results",{"_index":57,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"modules/IamModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"classes/updateUserDto.html":{},"miscellaneous/variables.html":{}}}],["results.find((result",{"_index":260,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["results.some",{"_index":263,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["retrieve",{"_index":636,"title":{},"body":{"classes/UserSerializer.html":{}}}],["return",{"_index":46,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":25,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["role",{"_index":632,"title":{},"body":{"classes/UserSerializer.html":{}}}],["run",{"_index":788,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":39,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/SessionGuard.html":{},"dependencies.html":{}}}],["salt",{"_index":431,"title":{},"body":{"injectables/BcryptService.html":{}}}],["samesite",{"_index":325,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["saveuninitialized",{"_index":323,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["sayhello",{"_index":517,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["sayhello(@activeuser",{"_index":531,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["sayhello(user",{"_index":518,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["scalable",{"_index":774,"title":{},"body":{"index.html":{}}}],["secret",{"_index":223,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/TfaAuthenticationService.html":{}}}],["secretorkey",{"_index":94,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["select",{"_index":588,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["serializer",{"_index":304,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["serializer.ts",{"_index":609,"title":{},"body":{"classes/UserSerializer.html":{},"coverage.html":{}}}],["serializer.ts:17",{"_index":620,"title":{},"body":{"classes/UserSerializer.html":{}}}],["serializer.ts:21",{"_index":623,"title":{},"body":{"classes/UserSerializer.html":{}}}],["serializer.ts:31",{"_index":618,"title":{},"body":{"classes/UserSerializer.html":{}}}],["serializer.ts:6",{"_index":614,"title":{},"body":{"classes/UserSerializer.html":{}}}],["serializer/user",{"_index":303,"title":{},"body":{"modules/AuthenticationModule.html":{},"classes/UserSerializer.html":{},"coverage.html":{}}}],["serializeuser",{"_index":613,"title":{},"body":{"classes/UserSerializer.html":{}}}],["serializeuser(user",{"_index":621,"title":{},"body":{"classes/UserSerializer.html":{}}}],["server",{"_index":775,"title":{},"body":{"index.html":{}}}],["services/authentication.service",{"_index":180,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{}}}],["services/session",{"_index":291,"title":{},"body":{"modules/AuthenticationModule.html":{},"controllers/SessionAuthenticationController.html":{}}}],["services/tfa",{"_index":200,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{}}}],["session",{"_index":296,"title":{},"body":{"modules/AuthenticationModule.html":{},"controllers/SessionAuthenticationController.html":{},"classes/UserSerializer.html":{},"dependencies.html":{}}}],["sessionauthenticationcontroller",{"_index":293,"title":{"controllers/SessionAuthenticationController.html":{}},"body":{"modules/AuthenticationModule.html":{},"controllers/SessionAuthenticationController.html":{},"coverage.html":{}}}],["sessionauthenticationservice",{"_index":290,"title":{"injectables/SessionAuthenticationService.html":{}},"body":{"modules/AuthenticationModule.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"coverage.html":{}}}],["sessionauthservice",{"_index":527,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["sessionguard",{"_index":544,"title":{"guards/SessionGuard.html":{}},"body":{"guards/SessionGuard.html":{},"coverage.html":{}}}],["set",{"_index":91,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["setmetadata(auth_type_key",{"_index":853,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":776,"title":{},"body":{"index.html":{}}}],["signin",{"_index":155,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{}}}],["signin(@body",{"_index":214,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["signin(@req",{"_index":528,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["signin(request",{"_index":521,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["signin(signindto",{"_index":166,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{}}}],["signindto",{"_index":167,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"classes/SignInDto.html":{},"coverage.html":{}}}],["signindto.password",{"_index":543,"title":{},"body":{"injectables/SessionAuthenticationService.html":{}}}],["signindto.tfacode",{"_index":375,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["signtoken",{"_index":333,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["signtoken(userid",{"_index":347,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["signup",{"_index":156,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["signup(@body",{"_index":212,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["signup(signupdto",{"_index":170,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["signupdto",{"_index":171,"title":{"classes/SignUpDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/SignUpDto.html":{},"coverage.html":{}}}],["skip",{"_index":675,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"modules/IamModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{},"classes/updateUserDto.html":{}}}],["sponsors",{"_index":806,"title":{},"body":{"index.html":{}}}],["src/.../active",{"_index":840,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth",{"_index":760,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../auth.decorator.ts",{"_index":841,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../iam.contant.ts",{"_index":842,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":766,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":109,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":112,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":145,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":146,"title":{},"body":{"injectables/AppService.html":{}}}],["src/iam/authentication/authentication.module.ts",{"_index":271,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["src/iam/authentication/controllers/authentication.controller.ts",{"_index":150,"title":{},"body":{"controllers/AuthenticationController.html":{},"coverage.html":{}}}],["src/iam/authentication/controllers/authentication.controller.ts:32",{"_index":173,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/iam/authentication/controllers/authentication.controller.ts:38",{"_index":169,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/iam/authentication/controllers/authentication.controller.ts:44",{"_index":165,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/iam/authentication/controllers/authentication.controller.ts:51",{"_index":161,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/iam/authentication/controllers/session",{"_index":515,"title":{},"body":{"controllers/SessionAuthenticationController.html":{},"coverage.html":{}}}],["src/iam/authentication/decorators/active",{"_index":718,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/iam/authentication/decorators/auth/auth.decorator.ts",{"_index":722,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/iam/authentication/dto/refresh",{"_index":469,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/iam/authentication/dto/sign",{"_index":549,"title":{},"body":{"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"coverage.html":{}}}],["src/iam/authentication/enums/auth",{"_index":762,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/iam/authentication/guards/access",{"_index":6,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/iam/authentication/guards/authentication/authentication.guard.ts",{"_index":231,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/iam/authentication/guards/authentication/authentication.guard.ts:23",{"_index":238,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/iam/authentication/guards/authentication/authentication.guard.ts:8",{"_index":237,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/iam/authentication/guards/session/session.guard.ts",{"_index":545,"title":{},"body":{"guards/SessionGuard.html":{},"coverage.html":{}}}],["src/iam/authentication/guards/session/session.guard.ts:6",{"_index":546,"title":{},"body":{"guards/SessionGuard.html":{}}}],["src/iam/authentication/interfaces/active",{"_index":99,"title":{},"body":{"interfaces/ActiveUserData.html":{},"coverage.html":{}}}],["src/iam/authentication/services/authentication.service.ts",{"_index":330,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{}}}],["src/iam/authentication/services/authentication.service.ts:111",{"_index":345,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/iam/authentication/services/authentication.service.ts:145",{"_index":350,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/iam/authentication/services/authentication.service.ts:26",{"_index":339,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/iam/authentication/services/authentication.service.ts:37",{"_index":346,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/iam/authentication/services/authentication.service.ts:59",{"_index":353,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/iam/authentication/services/authentication.service.ts:82",{"_index":343,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/iam/authentication/services/session",{"_index":532,"title":{},"body":{"injectables/SessionAuthenticationService.html":{},"coverage.html":{}}}],["src/iam/authentication/services/tfa",{"_index":567,"title":{},"body":{"injectables/TfaAuthenticationService.html":{},"coverage.html":{}}}],["src/iam/authentication/strategies/access",{"_index":61,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"coverage.html":{}}}],["src/iam/authentication/strategies/refresh",{"_index":506,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["src/iam/authentication/utils/refresh",{"_index":473,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"coverage.html":{}}}],["src/iam/authentication/utils/user",{"_index":608,"title":{},"body":{"classes/UserSerializer.html":{},"coverage.html":{}}}],["src/iam/config/jwt.config/jwt.config",{"_index":81,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["src/iam/constants/iam.contant.ts",{"_index":726,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/iam/hashing/bcrypt/bcrypt.service.ts",{"_index":418,"title":{},"body":{"injectables/BcryptService.html":{},"coverage.html":{}}}],["src/iam/hashing/bcrypt/bcrypt.service.ts:11",{"_index":424,"title":{},"body":{"injectables/BcryptService.html":{}}}],["src/iam/hashing/bcrypt/bcrypt.service.ts:7",{"_index":427,"title":{},"body":{"injectables/BcryptService.html":{}}}],["src/iam/hashing/hashing.service.ts",{"_index":461,"title":{},"body":{"injectables/HashingService.html":{},"coverage.html":{}}}],["src/iam/hashing/hashing.service.ts:5",{"_index":464,"title":{},"body":{"injectables/HashingService.html":{}}}],["src/iam/hashing/hashing.service.ts:6",{"_index":463,"title":{},"body":{"injectables/HashingService.html":{}}}],["src/iam/iam.module.ts",{"_index":467,"title":{},"body":{"modules/IamModule.html":{}}}],["src/main.ts",{"_index":728,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/users/dto/create",{"_index":434,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":730,"title":{},"body":{"coverage.html":{},"classes/updateUserDto.html":{}}}],["src/users/entity/user.entity",{"_index":361,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/users/entity/user.entity.ts",{"_index":591,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["src/users/entity/user.entity.ts:10",{"_index":600,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/entity/user.entity.ts:13",{"_index":597,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/entity/user.entity.ts:16",{"_index":601,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/entity/user.entity.ts:19",{"_index":599,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/entity/user.entity.ts:26",{"_index":605,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/entity/user.entity.ts:29",{"_index":596,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/entity/user.entity.ts:32",{"_index":606,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/entity/user.entity.ts:7",{"_index":598,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/users.controller.ts",{"_index":638,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:20",{"_index":647,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:25",{"_index":648,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:30",{"_index":652,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:44",{"_index":656,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:49",{"_index":664,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:57",{"_index":659,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":692,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":694,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:11",{"_index":697,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:17",{"_index":698,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:21",{"_index":699,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:38",{"_index":701,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:44",{"_index":705,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:55",{"_index":703,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:8",{"_index":696,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":789,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":792,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":793,"title":{},"body":{"index.html":{}}}],["started",{"_index":768,"title":{"index.html":{}},"body":{}}],["starter",{"_index":781,"title":{},"body":{"index.html":{}}}],["statements",{"_index":713,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":233,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["stay",{"_index":816,"title":{},"body":{"index.html":{}}}],["storage",{"_index":402,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["store",{"_index":318,"title":{},"body":{"modules/AuthenticationModule.html":{},"classes/UserSerializer.html":{}}}],["storedtokenid",{"_index":499,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["strategies/access",{"_index":281,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["strategy",{"_index":77,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["string",{"_index":104,"title":{},"body":{"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/SessionAuthenticationService.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":103,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/AuthenticationService.html":{},"classes/UserSerializer.html":{}}}],["super",{"_index":45,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["super(message",{"_index":494,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["super.canactivate(context",{"_index":47,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["support",{"_index":807,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":827,"title":{},"body":{"modules.html":{}}}],["t",{"_index":349,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["table",{"_index":733,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":732,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":676,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["test",{"_index":796,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":799,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":798,"title":{},"body":{"index.html":{}}}],["tests",{"_index":795,"title":{},"body":{"index.html":{}}}],["tfa",{"_index":362,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["tfaauthenticationservice",{"_index":199,"title":{"injectables/TfaAuthenticationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/TfaAuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["tfacode",{"_index":551,"title":{},"body":{"classes/SignInDto.html":{}}}],["tfasecret",{"_index":437,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{}}}],["tfaserivce",{"_index":209,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["tfaservice",{"_index":338,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["thanks",{"_index":805,"title":{},"body":{"index.html":{}}}],["this.accesstokenguard",{"_index":245,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.appservice.gethello",{"_index":116,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.refreshtokens(refreshtokendto",{"_index":218,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authservice.signin(signindto",{"_index":215,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authservice.signup(signupdto",{"_index":213,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authtypeguardmap[type",{"_index":252,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.checkexist(signindto.email",{"_index":541,"title":{},"body":{"injectables/SessionAuthenticationService.html":{}}}],["this.configservice.getorthrow('tfa_app_name",{"_index":584,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["this.deserializeuser(payload",{"_index":629,"title":{},"body":{"classes/UserSerializer.html":{}}}],["this.generatetoken(user",{"_index":379,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.getpassportinstance",{"_index":625,"title":{},"body":{"classes/UserSerializer.html":{}}}],["this.hashservice.compare",{"_index":542,"title":{},"body":{"injectables/SessionAuthenticationService.html":{}}}],["this.hashservice.compare(password",{"_index":368,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.hashservice.hash(password",{"_index":383,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.jwtconfiguration.accesstokenttl",{"_index":398,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.jwtconfiguration.audience",{"_index":408,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.jwtconfiguration.issuer",{"_index":410,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.jwtconfiguration.refreshtokenttl",{"_index":400,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.jwtconfiguration.secret",{"_index":406,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.jwtservice.signasync",{"_index":417,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.jwtservice.verifyasync",{"_index":404,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.prismaserive.user.findunique",{"_index":540,"title":{},"body":{"injectables/SessionAuthenticationService.html":{}}}],["this.prismaservice.user.create",{"_index":706,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.user.delete",{"_index":709,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.user.findmany",{"_index":707,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.user.findunique",{"_index":708,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.user.finduniqueorthrow",{"_index":587,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["this.prismaservice.user.update",{"_index":589,"title":{},"body":{"injectables/TfaAuthenticationService.html":{},"injectables/UsersService.html":{}}}],["this.redisclient",{"_index":495,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["this.redisclient.del(this.getkey(userid",{"_index":502,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["this.redisclient.get(this.getkey(userid",{"_index":500,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["this.redisclient.quit",{"_index":497,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["this.redisclient.set(this.getkey(userid",{"_index":498,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["this.reflector.getallandoverride",{"_index":247,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.refreshtokenidsstorage.insert(user.id",{"_index":403,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.refreshtokenidsstorage.invalidate(user.id",{"_index":413,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.refreshtokenidsstorage.validate",{"_index":412,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.serializeuser(user",{"_index":627,"title":{},"body":{"classes/UserSerializer.html":{}}}],["this.sessionauthservice.signin(signindto",{"_index":529,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["this.signtoken",{"_index":396,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.signtoken(user.id",{"_index":399,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.tfaserivce.enabletfasecret(activeuser.email",{"_index":227,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.tfaserivce.generatesecret",{"_index":225,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.tfaservice.verifycode",{"_index":374,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.userservice.create(user",{"_index":388,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.userservice.findone",{"_index":364,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":673,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":674,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findfilter(params",{"_index":682,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone",{"_index":684,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove",{"_index":689,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update",{"_index":687,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":48,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/SessionAuthenticationService.html":{}}}],["todo",{"_index":90,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["tofilestream",{"_index":204,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["tofilestream(response",{"_index":229,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["token",{"_index":55,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/TfaAuthenticationService.html":{},"coverage.html":{}}}],["token.dto",{"_index":193,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["token.dto.ts",{"_index":470,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:5",{"_index":472,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["token.dto/refresh",{"_index":192,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.guard",{"_index":239,"title":{},"body":{"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{}}}],["token.guard.ts",{"_index":8,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:11",{"_index":15,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:15",{"_index":18,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:21",{"_index":31,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.strategy",{"_index":282,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["token.strategy.ts",{"_index":62,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["token.strategy.ts:10",{"_index":508,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["token.strategy.ts:19",{"_index":511,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["token.strategy.ts:20",{"_index":70,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["token.strategy.ts:8",{"_index":67,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["token/access",{"_index":7,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{}}}],["token/refresh",{"_index":507,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["tokenid",{"_index":483,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["touch",{"_index":817,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":743,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":92,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{}}}],["true})@isoptional",{"_index":604,"title":{},"body":{"classes/UserEntity.html":{}}}],["try",{"_index":387,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["twitter",{"_index":823,"title":{},"body":{"index.html":{}}}],["type",{"_index":22,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/ActiveUserData.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type.enum",{"_index":190,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"controllers/SessionAuthenticationController.html":{}}}],["type.enum.ts",{"_index":761,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typescript",{"_index":780,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":35,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{}}}],["unauthorizedexception('invalid",{"_index":377,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["unauthorizedexception('no",{"_index":53,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["unauthorizedexception('user",{"_index":370,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{}}}],["unauthorizedexception(error.message",{"_index":416,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["undefined",{"_index":848,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unit",{"_index":794,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":72,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"injectables/TfaAuthenticationService.html":{},"controllers/UsersController.html":{}}}],["unlicensed",{"_index":836,"title":{},"body":{"properties.html":{}}}],["up",{"_index":172,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["up.dto",{"_index":183,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["up.dto.ts",{"_index":558,"title":{},"body":{"classes/SignUpDto.html":{},"coverage.html":{}}}],["up.dto.ts:15",{"_index":563,"title":{},"body":{"classes/SignUpDto.html":{}}}],["up.dto.ts:9",{"_index":561,"title":{},"body":{"classes/SignUpDto.html":{}}}],["up.dto/sign",{"_index":182,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/SignUpDto.html":{},"coverage.html":{}}}],["update",{"_index":645,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(@param('id",{"_index":686,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(id",{"_index":660,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(params",{"_index":704,"title":{},"body":{"injectables/UsersService.html":{}}}],["updatedat",{"_index":593,"title":{},"body":{"classes/UserEntity.html":{}}}],["updateuser",{"_index":661,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserdto",{"_index":662,"title":{"classes/updateUserDto.html":{}},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/updateUserDto.html":{}}}],["uri",{"_index":222,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/TfaAuthenticationService.html":{}}}],["useclass",{"_index":308,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["user",{"_index":30,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.decorator",{"_index":196,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{}}}],["user.decorator.ts",{"_index":719,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":360,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/updateUserDto.html":{}}}],["user.dto.ts",{"_index":435,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{},"classes/updateUserDto.html":{}}}],["user.dto.ts:15",{"_index":443,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:19",{"_index":439,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:23",{"_index":445,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:28",{"_index":441,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:33",{"_index":447,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":384,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/SessionAuthenticationController.html":{},"classes/UserSerializer.html":{}}}],["user.id",{"_index":397,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/UserSerializer.html":{}}}],["user.istfaenabled",{"_index":372,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user.name",{"_index":385,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user.password",{"_index":369,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{}}}],["user.permissions",{"_index":635,"title":{},"body":{"classes/UserSerializer.html":{}}}],["user.role",{"_index":633,"title":{},"body":{"classes/UserSerializer.html":{}}}],["user.tfasecret",{"_index":376,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user/active",{"_index":195,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user?.[field",{"_index":852,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userentity",{"_index":342,"title":{"classes/UserEntity.html":{}},"body":{"injectables/AuthenticationService.html":{},"classes/UserEntity.html":{},"coverage.html":{}}}],["userid",{"_index":351,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["users",{"_index":639,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":693,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":668,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/dto/create",{"_index":359,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["users/users.module",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.service",{"_index":305,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{}}}],["userscontroller",{"_index":637,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userserializer",{"_index":301,"title":{"classes/UserSerializer.html":{}},"body":{"modules/AuthenticationModule.html":{},"classes/UserSerializer.html":{},"coverage.html":{}}}],["userservice",{"_index":335,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["usersmodule",{"_index":130,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":270,"title":{"injectables/UsersService.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["util",{"_index":525,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["utils/refresh",{"_index":286,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{}}}],["utils/user",{"_index":302,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["validate",{"_index":64,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenIdsStorage.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["validate(payload",{"_index":69,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["validate(request",{"_index":509,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["validate(userid",{"_index":490,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["validator",{"_index":454,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/UserEntity.html":{},"dependencies.html":{}}}],["value",{"_index":844,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":720,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":839,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifycode",{"_index":570,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["verifycode(code",{"_index":578,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["version",{"_index":834,"title":{},"body":{"properties.html":{}}}],["void",{"_index":488,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/UserSerializer.html":{}}}],["watch",{"_index":790,"title":{},"body":{"index.html":{}}}],["website",{"_index":821,"title":{},"body":{"index.html":{}}}],["world",{"_index":148,"title":{},"body":{"injectables/AppService.html":{}}}],["yes",{"_index":352,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["you'd",{"_index":810,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AccessTokenGuard.html":{"url":"guards/AccessTokenGuard.html","title":"guard - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/iam/authentication/guards/access-token/access-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/iam/authentication/guards/access-token/access-token.guard.ts:11\n                            \n                        \n\n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/guards/access-token/access-token.guard.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: any, user: any, info: any)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/guards/access-token/access-token.guard.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AccessTokenGuard extends AuthGuard('jwt') implements CanActivate {\n  constructor() {\n    super();\n  }\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    return super.canActivate(context);\n  }\n\n  handleRequest(err: any, user: any, info: any) {\n    // You can throw an exception based on either \"info\" or \"err\" arguments\n    if (err || !user) {\n      throw err || new UnauthorizedException('No access token found');\n    }\n    return user;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccessTokenStrategy.html":{"url":"injectables/AccessTokenStrategy.html","title":"injectable - AccessTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/strategies/access-token/access-token.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtConfigService: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/iam/authentication/strategies/access-token/access-token.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtConfigService\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/strategies/access-token/access-token.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport jwtConfig from '../../../../../src/iam/config/jwt.config/jwt.config';\n\n@Injectable()\nexport class AccessTokenStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor(\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfigService: ConfigType,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      //   ignoreExpiration: false, // TODO: set to true in production\n      secretOrKey: jwtConfigService.secret,\n    });\n  }\n\n  async validate(payload: any) {\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ActiveUserData.html":{"url":"interfaces/ActiveUserData.html","title":"interface - ActiveUserData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ActiveUserData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/interfaces/active-user-data.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ActiveUserData {\n  sub: number;\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nIamModule\n\nIamModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nIamModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            IamModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { PrismaModule } from 'nestjs-prisma';\nimport { IamModule } from './iam/iam.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { UsersModule } from './users/users.module';\n\n@Module({\n  imports: [\n    PrismaModule.forRoot(),\n    ConfigModule.forRoot(),\n    IamModule,\n    UsersModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthenticationController.html":{"url":"controllers/AuthenticationController.html","title":"controller - AuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/controllers/authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                generateQrCode\n                            \n                            \n                                    \n                                    \n                                refreshToken\n                            \n                            \n                                    \n                                    \n                                signIn\n                            \n                            \n                                    \n                                    \n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        generateQrCode\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateQrCode(response: Response, activeUser: ActiveUserData)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Auth(AuthType.Bearer)@Post('tfa/generate')\n                \n            \n\n            \n                \n                    Defined in src/iam/authentication/controllers/authentication.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    activeUser\n                                    \n                                                ActiveUserData\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('refresh-token')\n                \n            \n\n            \n                \n                    Defined in src/iam/authentication/controllers/authentication.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshTokenDto\n                                    \n                                                RefreshTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(signInDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('sign-in')\n                \n            \n\n            \n                \n                    Defined in src/iam/authentication/controllers/authentication.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInDto\n                                    \n                                                SignInDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(signUpDto: SignUpDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('sign-up')\n                \n            \n\n            \n                \n                    Defined in src/iam/authentication/controllers/authentication.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signUpDto\n                                    \n                                                SignUpDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  HttpCode,\n  HttpStatus,\n  Post,\n  Res,\n} from '@nestjs/common';\nimport { AuthenticationService } from '../services/authentication.service';\nimport { SignUpDto } from '../dto/sign-up.dto/sign-up.dto';\nimport { SignInDto } from '../dto/sign-in.dto/sign-in.dto';\nimport { Auth } from '../decorators/auth/auth.decorator';\nimport { AuthType } from '../enums/auth-type.enum';\nimport { RefreshTokenDto } from '../dto/refresh-token.dto/refresh-token.dto';\nimport { ActiveUser } from '../decorators/active-user/active-user.decorator';\nimport { ActiveUserData } from '../interfaces/active-user-data.interface';\nimport { TfaAuthenticationService } from '../services/tfa-authentication/tfa-authentication.service';\n\nimport { Response } from 'express';\nimport { toFileStream } from 'qrcode';\n\n@Auth(AuthType.None)\n@Controller('authentication')\nexport class AuthenticationController {\n  constructor(\n    private readonly authService: AuthenticationService,\n    private readonly tfaSerivce: TfaAuthenticationService,\n  ) {}\n\n  @HttpCode(HttpStatus.OK)\n  @Post('sign-up')\n  signUp(@Body() signUpDto: SignUpDto) {\n    return this.authService.signUp(signUpDto);\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @Post('sign-in')\n  signIn(@Body() signInDto: SignInDto) {\n    return this.authService.signIn(signInDto);\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @Post('refresh-token')\n  refreshToken(@Body() refreshTokenDto: RefreshTokenDto) {\n    return this.authService.refreshTokens(refreshTokenDto);\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @Auth(AuthType.Bearer)\n  @Post('tfa/generate')\n  async generateQrCode(\n    @Res() response: Response,\n    @ActiveUser() activeUser: ActiveUserData,\n  ) {\n    const { uri, secret } = await this.tfaSerivce.generateSecret(\n      activeUser.email,\n    );\n\n    await this.tfaSerivce.enableTfaSecret(activeUser.email, secret);\n\n    response.type('png');\n    return toFileStream(response, uri);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/iam/authentication/guards/authentication/authentication.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authTypeGuardMap\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                defaultAuthType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessTokenGuard: AccessTokenGuard)\n                    \n                \n                        \n                            \n                                Defined in src/iam/authentication/guards/authentication/authentication.guard.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenGuard\n                                                  \n                                                        \n                                                                        AccessTokenGuard\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/guards/authentication/authentication.guard.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { AccessTokenGuard } from './../access-token/access-token.guard';\nimport { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { AuthType } from '../../enums/auth-type.enum';\nimport { Reflector } from '@nestjs/core';\nimport { AUTH_TYPE_KEY } from '../../decorators/auth/auth.decorator';\n\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n  constructor(\n    private readonly reflector: Reflector,\n    private readonly accessTokenGuard: AccessTokenGuard,\n  ) {}\n  private static readonly defaultAuthType = AuthType.Bearer;\n\n  private readonly authTypeGuardMap: Record = {\n    [AuthType.None]: { canActivate: () => true },\n    [AuthType.Bearer]: this.accessTokenGuard,\n  };\n\n  async canActivate(context: ExecutionContext): Promise {\n    const authTypes = this.reflector.getAllAndOverride(\n      AUTH_TYPE_KEY,\n      [context.getHandler(), context.getClass()],\n    ) ?? [AuthenticationGuard.defaultAuthType];\n\n    const guards = authTypes\n      .map((type: any) => this.authTypeGuardMap[type])\n      .flat();\n\n    const guardPromises = guards.map((guard: any) =>\n      guard.canActivate(context),\n    );\n\n    const results = await Promise.allSettled(guardPromises); //? return 'rejected' or 'fulfilled'\n\n    const rejected = results.find((result: any) => {\n      return result.status === 'rejected';\n    });\n\n    if (rejected) {\n      throw rejected['reason'];\n    }\n\n    return results.some(\n      (result: any) => result.status === 'fulfilled' && result.value,\n    );\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthenticationModule.html":{"url":"modules/AuthenticationModule.html","title":"module - AuthenticationModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthenticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\n\nAccessTokenStrategy\n\nAccessTokenStrategy\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\nAuthenticationModule -->\n\nAccessTokenStrategy->AuthenticationModule\n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nRefreshTokenIdsStorage\n\nRefreshTokenIdsStorage\n\nAuthenticationModule -->\n\nRefreshTokenIdsStorage->AuthenticationModule\n\n\n\n\n\nTfaAuthenticationService\n\nTfaAuthenticationService\n\nAuthenticationModule -->\n\nTfaAuthenticationService->AuthenticationModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthenticationModule -->\n\nUsersService->AuthenticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/iam/authentication/authentication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccessTokenStrategy\n                        \n                        \n                            AuthenticationService\n                        \n                        \n                            RefreshTokenIdsStorage\n                        \n                        \n                            TfaAuthenticationService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthenticationController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HashingService } from '../hashing/hashing.service';\nimport { BcryptService } from '../hashing/bcrypt/bcrypt.service';\nimport { PassportModule } from '@nestjs/passport';\nimport { ConfigModule } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AuthenticationService } from './services/authentication.service';\nimport { AuthenticationController } from './controllers/authentication.controller';\nimport jwtConfig from '../config/jwt.config/jwt.config';\nimport { AccessTokenStrategy } from './strategies/access-token/access-token.strategy';\nimport { AccessTokenGuard } from './guards/access-token/access-token.guard';\nimport { AuthenticationGuard } from './guards/authentication/authentication.guard';\nimport { APP_GUARD } from '@nestjs/core';\nimport { RefreshTokenIdsStorage } from './utils/refresh-token-ids.storage/refresh-token-ids.storage';\n\n//! DEPRECATED\n// import { SessionAuthenticationService } from './services/session-authentication/session-authentication.service';\n// import { SessionAuthenticationController } from './controllers/session-authentication/session-authentication.controller';\n// import passport from 'passport';\n// import session from 'express-session';\n// import Redis from 'ioredis';\n// import createRedisStore from 'connect-redis';\n// import { UserSerializer } from './utils/user-serializer/user-serializer';\n\nimport { UsersService } from '../../users/users.service';\nimport { PrismaService } from 'nestjs-prisma';\nimport { TfaAuthenticationService } from './services/tfa-authentication/tfa-authentication.service';\n\n@Module({\n  providers: [\n    {\n      provide: HashingService,\n      useClass: BcryptService,\n    },\n    {\n      provide: APP_GUARD,\n      useClass: AuthenticationGuard,\n    },\n    PrismaService,\n    UsersService,\n    RefreshTokenIdsStorage,\n    AuthenticationService,\n    AccessTokenStrategy,\n    AccessTokenGuard,\n    TfaAuthenticationService,\n    // UserSerializer,\n    // SessionAuthenticationService,\n  ],\n  imports: [\n    PassportModule,\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n  ],\n  controllers: [\n    AuthenticationController,\n    // SessionAuthenticationController\n  ],\n})\nexport class AuthenticationModule {}\n\n// ! SESSION DEPRECATED\n// export class AuthenticationModule implements NestModule {\n//   configure(consumer: MiddlewareConsumer) {\n//     const RedisStore = createRedisStore(session);\n//     consumer\n//       .apply(\n//         session({\n//           store: new RedisStore({\n//             client: new Redis(process.env.REDIS_URL),\n//           }),\n//           secret: process.env.SESSION_SECRET,\n//           resave: false,\n//           saveUninitialized: false,\n//           cookie: { sameSite: true, httpOnly: true },\n//         }),\n//         passport.initialize(),\n//         passport.session(),\n//       )\n//       .forRoutes('*');\n//   }\n// }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationService.html":{"url":"injectables/AuthenticationService.html","title":"injectable - AuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/services/authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateToken\n                            \n                            \n                                    Async\n                                refreshTokens\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Private\n                                    Async\n                                signToken\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hashService: HashingService, userService: UsersService, jwtConfiguration: ConfigType<>, jwtService: JwtService, refreshTokenIdsStorage: RefreshTokenIdsStorage, tfaService: TfaAuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/iam/authentication/services/authentication.service.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        hashService\n                                                  \n                                                        \n                                                                        HashingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokenIdsStorage\n                                                  \n                                                        \n                                                                        RefreshTokenIdsStorage\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tfaService\n                                                  \n                                                        \n                                                                        TfaAuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateToken(user: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/services/authentication.service.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshTokens(refreshToken: RefreshTokenDto)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/services/authentication.service.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                RefreshTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/services/authentication.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInDto\n                                    \n                                                SignInDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        signToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    signToken(userID: number, expiresIn: number, payload?: T)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/services/authentication.service.ts:145\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    expiresIn\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(signUpDto: SignUpDto)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/services/authentication.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signUpDto\n                                    \n                                                SignUpDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { HashingService } from '../../hashing/hashing.service';\nimport { SignInDto } from '../dto/sign-in.dto/sign-in.dto';\nimport { SignUpDto } from '../dto/sign-up.dto/sign-up.dto';\nimport { randomUUID } from 'crypto';\nimport jwtConfig from '../../config/jwt.config/jwt.config';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { ActiveUserData } from '../interfaces/active-user-data.interface';\nimport {\n  RefreshTokenIdsStorage,\n  RefreshTokenIdsStorageError,\n} from '../utils/refresh-token-ids.storage/refresh-token-ids.storage';\nimport { RefreshTokenDto } from '../dto/refresh-token.dto/refresh-token.dto';\nimport { UsersService } from '../../../users/users.service';\nimport { CreateUserDto } from '../../../users/dto/create-user.dto';\nimport { UserEntity } from 'src/users/entity/user.entity';\nimport { TfaAuthenticationService } from './tfa-authentication/tfa-authentication.service';\n\n@Injectable()\nexport class AuthenticationService {\n  constructor(\n    private readonly hashService: HashingService,\n    private readonly userService: UsersService,\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n    private readonly jwtService: JwtService,\n    private readonly refreshTokenIdsStorage: RefreshTokenIdsStorage,\n    private readonly tfaService: TfaAuthenticationService,\n  ) {}\n\n  async signIn(signInDto: SignInDto) {\n    const { email, password } = signInDto;\n\n    const user = await this.userService.findOne({ email });\n\n    if (!user) throw new ConflictException('Email not exists');\n\n    const isMatch = await this.hashService.compare(password, user.password);\n\n    if (!isMatch) throw new UnauthorizedException('User or password not match');\n\n    if (user.isTfaEnabled) {\n      const isValid = this.tfaService.verifyCode(\n        signInDto.tfaCode,\n        user.tfaSecret,\n      );\n      if (!isValid) throw new UnauthorizedException('Invalid TFA code');\n    }\n\n    return await this.generateToken(user);\n  }\n\n  async signUp(signUpDto: SignUpDto) {\n    const { email, password } = signUpDto;\n\n    if ((await this.userService.findOne({ email })) !== null)\n      throw new ConflictException('Email already exists');\n\n    const hashedPassword = await this.hashService.hash(password);\n    const user = new CreateUserDto();\n\n    user.email = email;\n    user.password = hashedPassword;\n    user.name = 'Anonymous';\n\n    try {\n      await this.userService.create(user);\n    } catch (error) {\n      if (error.code === 'P2002') {\n        throw new ConflictException('Email already exists');\n      }\n      throw error;\n    }\n  }\n\n  async generateToken(user: UserEntity) {\n    const refreshTokenId = randomUUID();\n\n    const payload = {\n      email: user.email,\n    };\n\n    const [accessToken, refreshToken] = await Promise.all([\n      //* accessToken\n      this.signToken>(\n        user.id,\n        this.jwtConfiguration.accessTokenTtl,\n        payload,\n      ),\n      //* refreshToken\n      this.signToken(user.id, this.jwtConfiguration.refreshTokenTtl, {\n        refreshTokenId,\n      }),\n\n      //* Insert refreshTokenId into storage\n      await this.refreshTokenIdsStorage.insert(user.id, refreshTokenId),\n    ]);\n\n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n\n  async refreshTokens(refreshToken: RefreshTokenDto) {\n    try {\n      const { sub, refreshTokenId } = await this.jwtService.verifyAsync & { refreshTokenId: string }\n      >(refreshToken.refreshToken, {\n        secret: this.jwtConfiguration.secret,\n        audience: this.jwtConfiguration.audience,\n        issuer: this.jwtConfiguration.issuer,\n      });\n\n      const user = await this.userService.findOne({ id: sub });\n\n      if (!user) throw new UnauthorizedException('User not found');\n\n      const isValid = await this.refreshTokenIdsStorage.validate(\n        sub,\n        refreshTokenId,\n      );\n\n      if (isValid) {\n        await this.refreshTokenIdsStorage.invalidate(user.id);\n      } else {\n        throw new UnauthorizedException('Invalid refresh token');\n      }\n\n      return await this.generateToken(user);\n    } catch (error) {\n      if (error instanceof RefreshTokenIdsStorageError) {\n        throw new UnauthorizedException('Invalid refresh token');\n      }\n      throw new UnauthorizedException(error.message);\n    }\n  }\n\n  private async signToken(userID: number, expiresIn: number, payload?: T) {\n    return await this.jwtService.signAsync(\n      {\n        sub: userID,\n        ...payload,\n      },\n      {\n        audience: this.jwtConfiguration.audience,\n        issuer: this.jwtConfiguration.issuer,\n        secret: this.jwtConfiguration.secret,\n        expiresIn,\n      },\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptService.html":{"url":"injectables/BcryptService.html","title":"injectable - BcryptService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/hashing/bcrypt/bcrypt.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                compare\n                            \n                            \n                                    Async\n                                hash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        compare\n                        \n                    \n                \n            \n            \n                \n                    \n                    compare(data: string | Buffer, encrypt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/hashing/bcrypt/bcrypt.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            string | Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    encrypt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        hash\n                        \n                    \n                \n            \n            \n                \n                    \n                    hash(data: string | Buffer)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/hashing/bcrypt/bcrypt.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            string | Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { hash, genSalt, compare } from 'bcrypt';\nimport { HashingService } from '../hashing.service';\n\n@Injectable()\nexport class BcryptService implements HashingService {\n  async hash(data: string | Buffer): Promise {\n    const salt = await genSalt(10);\n    return hash(data, salt);\n  }\n  async compare(data: string | Buffer, encrypt: string): Promise {\n    return compare(data, encrypt);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isTfaEnabled\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                tfaSecret\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isTfaEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsHash('sha512')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        tfaSecret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsEmail,\n  IsHash,\n  IsOptional,\n  IsString,\n  MinLength,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Prisma } from '@prisma/client';\n\nexport class CreateUserDto implements Prisma.UserCreateInput {\n  @ApiProperty()\n  @MinLength(8)\n  name: string;\n\n  @ApiProperty()\n  @IsEmail()\n  email: string;\n\n  @ApiProperty()\n  @IsHash('sha512')\n  password: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsBoolean()\n  isTfaEnabled?: boolean;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsString()\n  tfaSecret?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingService.html":{"url":"injectables/HashingService.html","title":"injectable - HashingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/hashing/hashing.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                compare\n                            \n                            \n                                    Abstract\n                                hash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        compare\n                        \n                    \n                \n            \n            \n                \n                    \n                    compare(data: string | Buffer, encrypt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/hashing/hashing.service.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            string | Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    encrypt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        hash\n                        \n                    \n                \n            \n            \n                \n                    \n                    hash(data: string | Buffer)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/hashing/hashing.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            string | Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport abstract class HashingService {\n  abstract hash(data: string | Buffer): Promise;\n  abstract compare(data: string | Buffer, encrypt: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/IamModule.html":{"url":"modules/IamModule.html","title":"module - IamModule","body":"\n                   \n\n\n\n\n    Modules\n    IamModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_IamModule\n\n\n\ncluster_IamModule_imports\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nIamModule\n\nIamModule\n\nIamModule -->\n\nAuthenticationModule->IamModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/iam/iam.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthenticationModule } from './authentication/authentication.module';\n\n@Module({\n  providers: [],\n  controllers: [],\n  imports: [AuthenticationModule],\n})\nexport class IamModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/dto/refresh-token.dto/refresh-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/iam/authentication/dto/refresh-token.dto/refresh-token.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\n\nexport class RefreshTokenDto {\n  @IsNotEmpty()\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenIdsStorage.html":{"url":"injectables/RefreshTokenIdsStorage.html","title":"injectable - RefreshTokenIdsStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenIdsStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/utils/refresh-token-ids.storage/refresh-token-ids.storage.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                redisClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getKey\n                            \n                            \n                                    Async\n                                insert\n                            \n                            \n                                    Async\n                                invalidate\n                            \n                            \n                                onApplicationBootstrap\n                            \n                            \n                                onApplicationShutdown\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    getKey(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/utils/refresh-token-ids.storage/refresh-token-ids.storage.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        insert\n                        \n                    \n                \n            \n            \n                \n                    \n                    insert(userId: number, tokenID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/utils/refresh-token-ids.storage/refresh-token-ids.storage.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        invalidate\n                        \n                    \n                \n            \n            \n                \n                    \n                    invalidate(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/utils/refresh-token-ids.storage/refresh-token-ids.storage.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \nonApplicationBootstrap()\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/utils/refresh-token-ids.storage/refresh-token-ids.storage.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onApplicationShutdown\n                        \n                    \n                \n            \n            \n                \nonApplicationShutdown()\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/utils/refresh-token-ids.storage/refresh-token-ids.storage.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(userId: number, tokenID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/utils/refresh-token-ids.storage/refresh-token-ids.storage.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        redisClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     redisClient\n\n                    \n                \n                    \n                        \n                                Defined in src/iam/authentication/utils/refresh-token-ids.storage/refresh-token-ids.storage.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  OnApplicationBootstrap,\n  OnApplicationShutdown,\n} from '@nestjs/common';\n\nimport redisClient from 'ioredis';\n\nexport class RefreshTokenIdsStorageError extends Error {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n@Injectable()\nexport class RefreshTokenIdsStorage\n  implements OnApplicationBootstrap, OnApplicationShutdown\n{\n  private redisClient: redisClient;\n\n  onApplicationBootstrap() {\n    this.redisClient = new redisClient(process.env.REDIS_URL);\n  }\n  onApplicationShutdown() {\n    this.redisClient.quit();\n  }\n\n  async insert(userId: number, tokenID: string): Promise {\n    await this.redisClient.set(this.getKey(userId), tokenID);\n  }\n\n  async validate(userId: number, tokenID: string): Promise {\n    const storedTokenID = await this.redisClient.get(this.getKey(userId));\n    if (!storedTokenID)\n      throw new RefreshTokenIdsStorageError('Token ID not found');\n    return storedTokenID === tokenID;\n  }\n\n  async invalidate(userId: number): Promise {\n    await this.redisClient.del(this.getKey(userId));\n  }\n\n  private getKey(userId: number): string {\n    return `user-${userId}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenIdsStorageError.html":{"url":"classes/RefreshTokenIdsStorageError.html","title":"class - RefreshTokenIdsStorageError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenIdsStorageError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/utils/refresh-token-ids.storage/refresh-token-ids.storage.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/iam/authentication/utils/refresh-token-ids.storage/refresh-token-ids.storage.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Injectable,\n  OnApplicationBootstrap,\n  OnApplicationShutdown,\n} from '@nestjs/common';\n\nimport redisClient from 'ioredis';\n\nexport class RefreshTokenIdsStorageError extends Error {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n@Injectable()\nexport class RefreshTokenIdsStorage\n  implements OnApplicationBootstrap, OnApplicationShutdown\n{\n  private redisClient: redisClient;\n\n  onApplicationBootstrap() {\n    this.redisClient = new redisClient(process.env.REDIS_URL);\n  }\n  onApplicationShutdown() {\n    this.redisClient.quit();\n  }\n\n  async insert(userId: number, tokenID: string): Promise {\n    await this.redisClient.set(this.getKey(userId), tokenID);\n  }\n\n  async validate(userId: number, tokenID: string): Promise {\n    const storedTokenID = await this.redisClient.get(this.getKey(userId));\n    if (!storedTokenID)\n      throw new RefreshTokenIdsStorageError('Token ID not found');\n    return storedTokenID === tokenID;\n  }\n\n  async invalidate(userId: number): Promise {\n    await this.redisClient.del(this.getKey(userId));\n  }\n\n  private getKey(userId: number): string {\n    return `user-${userId}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenStrategy.html":{"url":"injectables/RefreshTokenStrategy.html","title":"injectable - RefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/strategies/refresh-token/refresh-token.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/iam/authentication/strategies/refresh-token/refresh-token.strategy.ts:10\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(request: Request, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/strategies/refresh-token/refresh-token.strategy.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { Request } from 'express';\n\n@Injectable()\nexport class RefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh',\n) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: 'refresh-token',\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(request: Request, payload: any) {\n    const refreshToken = request.headers?.authorization.split(' ')[1];\n    return { refreshToken, ...payload };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SessionAuthenticationController.html":{"url":"controllers/SessionAuthenticationController.html","title":"controller - SessionAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SessionAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/controllers/session-authentication/session-authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                session-authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                sayHello\n                            \n                            \n                                    \n                                    \n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        sayHello\n                        \n                    \n                \n            \n            \n                \n                    \n                    sayHello(user: ActiveUserData)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('test')\n                \n            \n\n            \n                \n                    Defined in src/iam/authentication/controllers/session-authentication/session-authentication.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ActiveUserData\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(request: Request, signInDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('sign-in')\n                \n            \n\n            \n                \n                    Defined in src/iam/authentication/controllers/session-authentication/session-authentication.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    signInDto\n                                    \n                                                SignInDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Post,\n  Req,\n} from '@nestjs/common';\nimport { Request } from 'express';\nimport { promisify } from 'util';\nimport { AuthType } from '../../enums/auth-type.enum';\nimport { Auth } from '../../decorators/auth/auth.decorator';\nimport { SessionAuthenticationService } from '../../services/session-authentication/session-authentication.service';\nimport { SignInDto } from '../../dto/sign-in.dto/sign-in.dto';\nimport { ActiveUser } from '../../decorators/active-user/active-user.decorator';\nimport { ActiveUserData } from '../../interfaces/active-user-data.interface';\n\n@Auth(AuthType.None)\n@Controller('session-authentication')\nexport class SessionAuthenticationController {\n  constructor(\n    private readonly sessionAuthService: SessionAuthenticationService,\n  ) {}\n\n  @HttpCode(HttpStatus.OK)\n  @Post('sign-in')\n  async signIn(@Req() request: Request, @Body() signInDto: SignInDto) {\n    const user = await this.sessionAuthService.signIn(signInDto);\n    await promisify(request.logIn.bind(request))(user);\n  }\n\n  @Get('test')\n  async sayHello(@ActiveUser() user: ActiveUserData) {\n    return `Hello ${user.email}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionAuthenticationService.html":{"url":"injectables/SessionAuthenticationService.html","title":"injectable - SessionAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/services/session-authentication/session-authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                checkExist\n                            \n                            \n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hashService: HashingService, prismaSerive: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/iam/authentication/services/session-authentication/session-authentication.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        hashService\n                                                  \n                                                        \n                                                                        HashingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaSerive\n                                                  \n                                                        \n                                                                    PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        checkExist\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkExist(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/services/session-authentication/session-authentication.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/services/session-authentication/session-authentication.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInDto\n                                    \n                                                SignInDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { User } from '@prisma/client';\nimport { PrismaService } from 'nestjs-prisma';\nimport { SignInDto } from '../../dto/sign-in.dto/sign-in.dto';\nimport { HashingService } from '../../../hashing/hashing.service';\n\n@Injectable()\nexport class SessionAuthenticationService {\n  constructor(\n    private readonly hashService: HashingService,\n    private prismaSerive: PrismaService,\n  ) {}\n\n  private async checkExist(email: string): Promise {\n    return await this.prismaSerive.user.findUnique({\n      where: {\n        email,\n      },\n    });\n  }\n\n  async signIn(signInDto: SignInDto) {\n    const user = await this.checkExist(signInDto.email);\n    if (!user) throw new ConflictException('Email not exists');\n\n    const isMatch = await this.hashService.compare(\n      signInDto.password,\n      user.password,\n    );\n\n    if (!isMatch) throw new UnauthorizedException('User or password not match');\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/SessionGuard.html":{"url":"guards/SessionGuard.html","title":"guard - SessionGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    SessionGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/iam/authentication/guards/session/session.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/guards/session/session.guard.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class SessionGuard implements CanActivate {\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const request = context.switchToHttp().getRequest();\n    return request.isAuthenticated();\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/dto/sign-in.dto/sign-in.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                tfaCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/iam/authentication/dto/sign-in.dto/sign-in.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/iam/authentication/dto/sign-in.dto/sign-in.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        tfaCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@Length(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/iam/authentication/dto/sign-in.dto/sign-in.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsOptional, Length, MinLength } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nexport class SignInDto {\n  @ApiProperty()\n  @IsEmail()\n  email: string;\n\n  @ApiProperty()\n  @MinLength(8)\n  password: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @Length(6)\n  tfaCode?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignUpDto.html":{"url":"classes/SignUpDto.html","title":"class - SignUpDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignUpDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/dto/sign-up.dto/sign-up.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'abc@gmail.com'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/iam/authentication/dto/sign-up.dto/sign-up.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '12345678'})@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/iam/authentication/dto/sign-up.dto/sign-up.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, MinLength } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class SignUpDto {\n  @ApiProperty({\n    example: 'abc@gmail.com',\n  })\n  @IsEmail()\n  email: string;\n\n  @ApiProperty({\n    example: '12345678',\n  })\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TfaAuthenticationService.html":{"url":"injectables/TfaAuthenticationService.html","title":"injectable - TfaAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TfaAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/services/tfa-authentication/tfa-authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableTfaSecret\n                            \n                            \n                                    Async\n                                generateSecret\n                            \n                            \n                                verifyCode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/iam/authentication/services/tfa-authentication/tfa-authentication.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                    PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableTfaSecret\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableTfaSecret(email: string, secret: string)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/services/tfa-authentication/tfa-authentication.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    secret\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateSecret\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateSecret(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/services/tfa-authentication/tfa-authentication.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifyCode\n                        \n                    \n                \n            \n            \n                \nverifyCode(code: string, secret: string)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/services/tfa-authentication/tfa-authentication.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    secret\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PrismaService } from 'nestjs-prisma';\nimport { authenticator } from 'otplib';\n\n@Injectable()\nexport class TfaAuthenticationService {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly prismaService: PrismaService,\n  ) {}\n\n  async generateSecret(email: string) {\n    const secret = authenticator.generateSecret();\n    const appName = this.configService.getOrThrow('TFA_APP_NAME');\n    const uri = authenticator.keyuri(email, appName, secret);\n\n    return {\n      secret,\n      uri,\n    };\n  }\n\n  verifyCode(code: string, secret: string) {\n    return authenticator.verify({ token: code, secret });\n  }\n\n  async enableTfaSecret(email: string, secret: string) {\n    const id = await this.prismaService.user.findUniqueOrThrow({\n      where: {\n        email,\n      },\n      select: {\n        id: true,\n      },\n    });\n\n    await this.prismaService.user.update({\n      where: {\n        id: id.id,\n      },\n      data: {\n        isTfaEnabled: true,\n        tfaSecret: secret,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entity/user.entity.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        User\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isTfaEnabled\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                tfaSecret\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isTfaEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tfaSecret\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, nullable: true})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '@prisma/client';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { IsDate, IsOptional } from 'class-validator';\n\nexport class UserEntity implements User {\n  @ApiProperty()\n  id: number;\n\n  @ApiProperty()\n  name: string;\n\n  @ApiProperty()\n  email: string;\n\n  @ApiProperty()\n  password: string;\n\n  @ApiProperty()\n  isTfaEnabled: boolean;\n\n  @ApiProperty({\n    required: false,\n    nullable: true,\n  })\n  @IsOptional()\n  tfaSecret: string | null;\n\n  @IsDate()\n  createdAt: Date;\n\n  @IsDate()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserSerializer.html":{"url":"classes/UserSerializer.html","title":"class - UserSerializer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserSerializer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/utils/user-serializer/user-serializer.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        PassportSerializer\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deserializeUser\n                            \n                            \n                                getPassportInstance\n                            \n                            \n                                serializeUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/iam/authentication/utils/user-serializer/user-serializer.ts:6\n                            \n                        \n\n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deserializeUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deserializeUser(payload: ActiveUserData, done: (err: Error,payload: ActiveUserData) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/utils/user-serializer/user-serializer.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                ActiveUserData\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPassportInstance\n                        \n                    \n                \n            \n            \n                \ngetPassportInstance()\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/utils/user-serializer/user-serializer.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serializeUser\n                        \n                    \n                \n            \n            \n                \nserializeUser(user: User, done: (err: Error,user: ActiveUserData) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/utils/user-serializer/user-serializer.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PassportSerializer } from '@nestjs/passport';\nimport { User } from '@prisma/client';\nimport passport from 'passport';\nimport { ActiveUserData } from '../../interfaces/active-user-data.interface';\n\nexport class UserSerializer implements PassportSerializer {\n  constructor() {\n    const passportInstance = this.getPassportInstance();\n    passportInstance.serializeUser((user, done) =>\n      this.serializeUser(user as User, done),\n    );\n    passportInstance.deserializeUser((payload, done) =>\n      this.deserializeUser(payload as ActiveUserData, done),\n    );\n  }\n\n  getPassportInstance() {\n    return passport;\n  }\n\n  serializeUser(user: User, done: (err: Error, user: ActiveUserData) => void) {\n    // store user info authenticated in session\n    done(null, {\n      sub: user.id,\n      email: user.email,\n      //   role: user.role,\n      //   permissions: user.permissions as any,\n    });\n  }\n\n  async deserializeUser(\n    payload: ActiveUserData,\n    done: (err: Error, payload: ActiveUserData) => void,\n  ) {\n    // retrieve user info authenticated from session\n    done(null, payload);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findFilter\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        findFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    findFilter(params: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('filter')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateUser: updateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUser\n                                    \n                                                updateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { Prisma } from '@prisma/client';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { updateUserDto } from './dto/update-user.dto';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Post()\n  async create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  @Get()\n  async findAll() {\n    return this.usersService.findAll();\n  }\n\n  @Get('filter')\n  async findFilter(\n    @Body()\n    params: {\n      skip?: number;\n      take?: number;\n      cursor?: Prisma.UserWhereUniqueInput;\n      where?: Prisma.UserWhereInput;\n      orderBy?: Prisma.UserOrderByWithRelationInput;\n    },\n  ) {\n    return this.usersService.findFilter(params);\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.usersService.findOne({ id: Number(id) });\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateUser: updateUserDto) {\n    return this.usersService.update({\n      where: { id: Number(id) },\n      data: updateUser,\n    });\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.usersService.remove({ id: Number(id) });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService\n\nUsersService\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { PrismaService } from 'nestjs-prisma';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService, PrismaService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findFilter\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                    PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    findFilter(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(where: Prisma.UserWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    where\n                                    \n                                            Prisma.UserWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(where: Prisma.UserWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    where\n                                    \n                                            Prisma.UserWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from 'nestjs-prisma';\nimport { Prisma, User } from '@prisma/client';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { updateUserDto } from './dto/update-user.dto';\n\n@Injectable()\nexport class UsersService {\n  constructor(private readonly prismaService: PrismaService) {}\n\n  async create(createUserDto: CreateUserDto): Promise {\n    return this.prismaService.user.create({\n      data: createUserDto,\n    });\n  }\n\n  async findAll(): Promise {\n    return this.prismaService.user.findMany();\n  }\n\n  async findFilter(params: {\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.UserWhereUniqueInput;\n    where?: Prisma.UserWhereInput;\n    orderBy?: Prisma.UserOrderByWithRelationInput;\n  }): Promise {\n    const { skip, take, cursor, where, orderBy } = params;\n    return this.prismaService.user.findMany({\n      skip,\n      take,\n      cursor,\n      where,\n      orderBy,\n    });\n  }\n\n  async findOne(where: Prisma.UserWhereUniqueInput): Promise {\n    return this.prismaService.user.findUnique({\n      where,\n    });\n  }\n\n  async update(params: {\n    where: Prisma.UserWhereUniqueInput;\n    data: updateUserDto;\n  }): Promise {\n    const { where, data } = params;\n    return this.prismaService.user.update({\n      where,\n      data,\n    });\n  }\n\n  async remove(where: Prisma.UserWhereUniqueInput): Promise {\n    return this.prismaService.user.delete({\n      where,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/iam/authentication/controllers/authentication.controller.ts\n            \n            controller\n            AuthenticationController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/iam/authentication/controllers/session-authentication/session-authentication.controller.ts\n            \n            controller\n            SessionAuthenticationController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/iam/authentication/decorators/active-user/active-user.decorator.ts\n            \n            variable\n            ActiveUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/iam/authentication/decorators/auth/auth.decorator.ts\n            \n            variable\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/iam/authentication/decorators/auth/auth.decorator.ts\n            \n            variable\n            AUTH_TYPE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/iam/authentication/dto/refresh-token.dto/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/iam/authentication/dto/sign-in.dto/sign-in.dto.ts\n            \n            class\n            SignInDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/iam/authentication/dto/sign-up.dto/sign-up.dto.ts\n            \n            class\n            SignUpDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/iam/authentication/guards/access-token/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/iam/authentication/guards/authentication/authentication.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/iam/authentication/guards/session/session.guard.ts\n            \n            guard\n            SessionGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/iam/authentication/interfaces/active-user-data.interface.ts\n            \n            interface\n            ActiveUserData\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/iam/authentication/services/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/iam/authentication/services/session-authentication/session-authentication.service.ts\n            \n            injectable\n            SessionAuthenticationService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/iam/authentication/services/tfa-authentication/tfa-authentication.service.ts\n            \n            injectable\n            TfaAuthenticationService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/iam/authentication/strategies/access-token/access-token.strategy.ts\n            \n            injectable\n            AccessTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/iam/authentication/strategies/refresh-token/refresh-token.strategy.ts\n            \n            injectable\n            RefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/iam/authentication/utils/refresh-token-ids.storage/refresh-token-ids.storage.ts\n            \n            class\n            RefreshTokenIdsStorageError\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/iam/authentication/utils/refresh-token-ids.storage/refresh-token-ids.storage.ts\n            \n            injectable\n            RefreshTokenIdsStorage\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/iam/authentication/utils/user-serializer/user-serializer.ts\n            \n            class\n            UserSerializer\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/iam/constants/iam.contant.ts\n            \n            variable\n            REQUEST_USER_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/iam/hashing/bcrypt/bcrypt.service.ts\n            \n            injectable\n            BcryptService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/iam/hashing/hashing.service.ts\n            \n            injectable\n            HashingService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            updateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entity/user.entity.ts\n            \n            class\n            UserEntity\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.2.5\n        \n            @nestjs/config : ^3.1.1\n        \n            @nestjs/core : ^10.2.5\n        \n            @nestjs/jwt : ^10.1.1\n        \n            @nestjs/passport : ^10.0.2\n        \n            @nestjs/platform-express : ^10.2.5\n        \n            @nestjs/swagger : ^7.1.11\n        \n            @prisma/client : ^5.3.1\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            connect-redis : ^6.1.3\n        \n            express-session : ^1.17.3\n        \n            ioredis : ^5.3.2\n        \n            nestjs-prisma : ^0.22.0\n        \n            otplib : ^12.0.1\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            qrcode : ^1.5.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthType   (src/.../auth-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/iam/authentication/enums/auth-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthType\n                    \n                \n                        \n                            \n                                 Bearer\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ pnpm installRunning the app\n# development\n$ pnpm run start\n\n# watch mode\n$ pnpm run start:dev\n\n# production mode\n$ pnpm run start:prodTest\n# unit tests\n$ pnpm run test\n\n# e2e tests\n$ pnpm run test:e2e\n\n# test coverage\n$ pnpm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthenticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        IamModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\n\nIamModule\n\nIamModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nIamModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAccessTokenStrategy\n\nAccessTokenStrategy\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\nAuthenticationModule -->\n\nAccessTokenStrategy->AuthenticationModule\n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nRefreshTokenIdsStorage\n\nRefreshTokenIdsStorage\n\nAuthenticationModule -->\n\nRefreshTokenIdsStorage->AuthenticationModule\n\n\n\n\n\nTfaAuthenticationService\n\nTfaAuthenticationService\n\nAuthenticationModule -->\n\nTfaAuthenticationService->AuthenticationModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\nAuthenticationModule -->\n\nUsersService->AuthenticationModule\n\n\n\nIamModule -->\n\nAuthenticationModule->IamModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/updateUserDto.html":{"url":"classes/updateUserDto.html","title":"class - updateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  updateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class updateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActiveUser   (src/.../active-user.decorator.ts)\n                        \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            AUTH_TYPE_KEY   (src/.../auth.decorator.ts)\n                        \n                        \n                            REQUEST_USER_KEY   (src/.../iam.contant.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/iam/authentication/decorators/active-user/active-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ActiveUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (field: keyof ActiveUserData | undefined, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    const user: ActiveUserData | undefined = request[REQUEST_USER_KEY];\n    return field ? user && user?.[field] : user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/iam/authentication/decorators/auth/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...authTypes: AuthType[]) =>\n  SetMetadata(AUTH_TYPE_KEY, authTypes)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AUTH_TYPE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'authType'\n                    \n                \n\n\n        \n    \n\n    src/iam/constants/iam.contant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        REQUEST_USER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
