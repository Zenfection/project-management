var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AccessTokenGuard.html",[0,2.226,1,2.019]],["body/guards/AccessTokenGuard.html",[1,2.555,2,2.002,3,0.482,4,0.228,5,0.228,6,4.5,7,3.208,8,2.547,9,0.358,10,0.973,11,4.161,12,4.25,13,2.132,14,0.765,15,3.021,16,2.235,17,3.537,18,3.021,19,1.045,20,0.027,21,0.973,22,0.606,23,1.045,24,3.145,25,0.973,26,3.584,27,1.842,28,4.146,29,4.25,30,2.108,31,3.021,32,4.5,33,0.583,34,0.661,35,2.235,36,0.51,37,3.021,38,1.661,39,2.235,40,0.259,41,0.012,42,1.661,43,3.021,44,1.412,45,2.235,46,0.973,47,3.021,48,2.337,49,3.021,50,3.021,51,3.021,52,1.412,53,3.021,54,2.547,55,1.412,56,2.002,57,0.017,58,0.017]],["title/injectables/AccessTokenStrategy.html",[34,0.522,59,2.019]],["body/injectables/AccessTokenStrategy.html",[3,0.28,4,0.247,5,0.247,7,3.084,9,0.388,10,1.028,13,1.947,14,0.698,19,1.105,20,0.027,21,1.028,22,0.641,23,1.105,25,0.749,33,0.687,34,0.698,36,0.552,38,1.799,40,0.28,41,0.013,42,1.799,45,2.42,46,0.749,57,0.018,58,0.018,59,2.701,60,1.317,61,4.326,62,2.42,63,2.066,64,3.324,65,3.271,66,4.657,67,3.271,68,4.492,69,4.492,70,3.271,71,2.977,72,1.966,73,2.758,74,1.966,75,2.758,76,2.758,77,2.758,78,1.966,79,3.324,80,2.42,81,3.271,82,3.271,83,2.758,84,1.655,85,1.529,86,2.758,87,2.758,88,3.271,89,2.758,90,3.271,91,3.271,92,2.168,93,2.758,94,2.758,95,3.271]],["title/interfaces/ActiveUserData.html",[96,2.226,97,1.7]],["body/interfaces/ActiveUserData.html",[3,0.38,4,0.335,5,0.335,9,0.526,20,0.026,22,0.782,30,1.663,40,0.38,57,0.022,58,0.022,96,2.941,97,2.773,98,4.437,99,3.741,100,3.741,101,2.376,102,3.143,103,4.596,104,1.57,105,3.271]],["title/controllers/AppController.html",[106,1.456,107,2.226]],["body/controllers/AppController.html",[3,0.359,4,0.316,5,0.316,9,0.497,10,1.211,14,0.652,20,0.027,25,0.959,33,0.627,36,0.708,40,0.359,41,0.017,46,0.959,57,0.021,58,0.021,85,1.96,104,1.397,106,2.293,107,3.506,108,1.817,109,3.534,110,5.133,111,2.121,112,4.191,113,3.187,114,3.534,115,3.101,116,4.191]],["title/modules/AppModule.html",[117,1.456,118,2.226]],["body/modules/AppModule.html",[3,0.288,4,0.253,5,0.253,20,0.027,33,0.731,36,0.566,40,0.288,41,0.013,57,0.018,58,0.018,74,2.017,107,3.446,108,1.981,113,3.314,114,2.829,117,2.253,118,4.266,119,1.698,120,1.698,121,2.017,122,2.017,123,1.698,124,3.126,125,2.017,126,2.829,127,2.829,128,2.829,129,3.623,130,3.623,131,2.748,132,2.017,133,2.017,134,3.355,135,3.382,136,3.355,137,3.355,138,2.017,139,2.017,140,3.355,141,2.829,142,3.355,143,3.355,144,3.355]],["title/injectables/AppService.html",[34,0.522,113,1.847]],["body/injectables/AppService.html",[3,0.378,4,0.333,5,0.333,9,0.524,10,1.251,14,0.686,20,0.027,25,1.011,33,0.524,34,0.85,36,0.745,40,0.378,41,0.017,46,1.011,57,0.022,58,0.022,60,1.778,104,1.443,110,5.229,113,3.005,145,3.723,146,4.415,147,3.723,148,4.415]],["title/controllers/AuthenticationController.html",[106,1.456,149,2.226]],["body/controllers/AuthenticationController.html",[3,0.243,4,0.214,5,0.214,9,0.337,10,0.931,14,0.739,19,1.169,20,0.027,21,1.088,22,0.678,23,1.169,25,1.088,33,0.698,36,0.48,40,0.243,41,0.011,46,1.088,55,1.903,57,0.016,58,0.016,85,1.329,106,1.232,108,1.232,111,2.406,115,2.102,149,2.697,150,2.396,151,2.102,152,2.396,153,2.697,154,2.697,155,3.431,156,2.841,157,3.437,158,4.069,159,2.841,160,2.102,161,2.893,162,4.377,163,2.841,164,2.396,165,3.437,166,4.069,167,2.841,168,2.102,169,2.102,170,2.238,171,2.396,172,2.697,173,1.883,174,2.396,175,1.562,176,1.883,177,1.883,178,2.102,179,1.708,180,2.102,181,2.102,182,2.396,183,1.883,184,2.396,185,2.396,186,2.841,187,2.841,188,2.841,189,2.841,190,2.841,191,2.841,192,2.841,193,2.841]],["title/guards/AuthenticationGuard.html",[0,2.226,194,2.226]],["body/guards/AuthenticationGuard.html",[1,3.416,2,2.481,3,0.217,4,0.191,5,0.191,7,1.522,9,0.3,10,0.857,11,3.882,13,1.622,14,0.582,16,2.769,17,3.259,19,0.92,20,0.027,21,0.857,22,0.534,23,0.92,24,1.874,25,0.58,27,1.622,33,0.622,34,0.582,36,0.428,40,0.217,41,0.01,44,1.184,46,1.019,48,1.393,54,2.135,57,0.018,58,0.015,63,1.793,84,2.779,85,2.568,92,1.678,101,1.098,178,1.874,179,1.522,180,1.874,181,1.874,194,2.481,195,2.135,196,3.742,197,3.742,198,3.742,199,2.532,200,5.492,201,2.532,202,2.532,203,2.135,204,1.874,205,2.769,206,3.742,207,2.532,208,2.532,209,2.532,210,1.832,211,3.156,212,2.532,213,2.532,214,2.532,215,2.532,216,2.532,217,2.532,218,2.532,219,2.532,220,2.532,221,2.532,222,1.281,223,2.532,224,4.917,225,3.742,226,2.532,227,3.742,228,2.532,229,2.532,230,2.532,231,2.532]],["title/modules/AuthenticationModule.html",[117,1.456,232,2.019]],["body/modules/AuthenticationModule.html",[1,1.946,3,0.179,4,0.158,5,0.158,7,1.946,10,0.478,14,0.325,19,0.514,20,0.027,21,0.478,22,0.298,23,0.514,25,0.478,33,0.766,36,0.353,38,1.149,40,0.179,41,0.008,44,0.977,52,1.513,55,1.513,57,0.013,58,0.013,59,3.067,74,1.256,78,1.946,80,1.546,89,2.729,92,2.145,108,1.403,117,1.717,119,1.057,120,1.057,121,1.256,122,1.256,123,1.057,124,2.381,125,1.256,131,1.946,132,1.256,133,1.256,135,1.546,138,1.256,139,1.256,141,1.762,149,2.625,170,2.806,171,1.762,194,2.145,203,1.762,204,1.546,210,0.73,232,3.584,233,1.762,234,1.762,235,2.581,236,2.806,237,2.09,238,2.625,239,2.09,240,3.236,241,4.459,242,2.09,243,3.236,244,1.546,245,3.236,246,1.637,247,1.546,248,2.145,249,2.09,250,2.394,251,3.236,252,2.09,253,1.546,254,2.09,255,1.762,256,2.09,257,2.09,258,2.09,259,2.09,260,3.236,261,1.762,262,1.256,263,1.762,264,1.762,265,2.145,266,1.762,267,2.09,268,2.09,269,2.625,270,1.385,271,2.729,272,1.385,273,2.09,274,1.762,275,2.145,276,2.09,277,1.546,278,2.09,279,3.236,280,3.236,281,2.09,282,2.09,283,3.236,284,2.09,285,2.09,286,1.762,287,2.09,288,2.09,289,1.762,290,2.09,291,2.09,292,2.09,293,2.09,294,2.09,295,2.09,296,2.09,297,2.09,298,2.09]],["title/injectables/AuthenticationService.html",[34,0.522,170,1.847]],["body/injectables/AuthenticationService.html",[3,0.107,4,0.094,5,0.094,9,0.148,10,0.488,13,0.924,14,0.665,19,1.108,20,0.027,21,0.979,22,0.643,23,1.052,25,0.918,27,0.924,30,1.762,33,0.636,34,0.331,35,0.926,36,0.211,40,0.107,41,0.005,46,0.843,48,2.585,52,2.198,55,1.536,56,0.83,57,0.008,58,0.008,60,0.504,63,2.286,66,2.771,71,2.658,72,1.975,73,1.056,74,0.753,80,0.926,83,1.056,84,2.537,85,1.723,97,0.633,102,2.029,103,2.431,104,0.868,105,2.205,138,0.753,139,0.753,153,2.178,154,1.413,155,1.797,157,1.975,160,1.577,161,2.029,164,1.797,165,2.411,170,1.172,172,1.413,173,0.83,174,1.056,175,0.688,176,0.83,182,1.056,183,0.83,184,1.056,210,1.796,222,2.758,235,2.165,246,1.663,247,0.926,250,3.166,253,0.926,255,1.056,261,1.056,262,0.753,263,1.056,289,1.797,299,1.056,300,2.131,301,2.131,302,2.131,303,2.131,304,1.056,305,2.783,306,4.279,307,1.252,308,1.797,309,2.131,310,1.252,311,2.131,312,2.442,313,1.252,314,2.131,315,1.252,316,1.252,317,2.131,318,3.286,319,3.286,320,1.252,321,1.577,322,1.252,323,1.252,324,1.056,325,1.252,326,0.83,327,2.131,328,1.252,329,0.926,330,0.926,331,1.281,332,2.131,333,1.673,334,2.131,335,2.347,336,2.347,337,1.797,338,1.252,339,1.797,340,1.797,341,1.056,342,2.131,343,1.252,344,2.131,345,2.131,346,1.252,347,1.577,348,1.252,349,1.252,350,2.131,351,1.252,352,0.926,353,2.131,354,2.178,355,1.252,356,1.252,357,4.279,358,2.783,359,1.252,360,1.252,361,1.056,362,1.252,363,1.252,364,1.252,365,1.056,366,1.252,367,1.252,368,1.252,369,1.252,370,2.131,371,2.131,372,2.131,373,2.131,374,2.131,375,0.688,376,2.131,377,1.252,378,1.252,379,2.131,380,1.797,381,1.252,382,1.252,383,1.252]],["title/injectables/BcryptService.html",[34,0.522,248,2.226]],["body/injectables/BcryptService.html",[3,0.276,4,0.243,5,0.243,9,0.382,10,1.018,14,0.692,19,1.094,20,0.027,21,1.018,22,0.635,23,1.094,25,1.018,27,2.379,33,0.604,34,0.692,36,0.544,40,0.276,41,0.013,44,1.508,46,1.018,57,0.018,58,0.018,60,1.299,63,2.398,104,1.666,210,1.126,222,1.632,246,2.251,248,2.948,352,3.291,384,2.719,385,4.294,386,4.294,387,4.294,388,5.021,389,4.629,390,3.224,391,4.294,392,3.224,393,3.224,394,2.719,395,3.224,396,4.448,397,3.224]],["title/classes/CreateUserDto.html",[41,0.013,398,1.847]],["body/classes/CreateUserDto.html",[3,0.428,4,0.377,5,0.377,20,0.025,40,0.428,41,0.02,57,0.023,58,0.023,398,3.239,399,2.166,400,4.214,401,3.698]],["title/injectables/HashingService.html",[34,0.522,246,1.7]],["body/injectables/HashingService.html",[3,0.307,4,0.27,5,0.27,9,0.425,10,1.093,14,0.742,19,1.174,20,0.027,21,1.093,22,0.681,23,1.174,25,1.093,27,2.485,33,0.425,34,0.742,36,0.604,40,0.307,41,0.014,57,0.019,58,0.019,60,1.442,104,1.703,246,2.416,352,3.533,385,4.026,386,4.026,387,4.026,388,5.179,389,4.531,391,4.026,402,3.019,403,6.27,404,3.58,405,3.58]],["title/modules/IamModule.html",[117,1.456,129,2.019]],["body/modules/IamModule.html",[3,0.351,4,0.309,5,0.309,20,0.027,33,0.618,36,0.692,40,0.351,41,0.016,57,0.021,58,0.021,108,1.776,117,2.486,119,2.073,120,2.073,121,2.463,122,2.463,123,2.073,124,3.134,125,2.463,129,3.831,131,3.134,132,2.463,133,2.463,135,3.858,232,3.831,406,4.097,407,4.097,408,4.097,409,4.097]],["title/classes/RefreshTokenDto.html",[41,0.013,157,2.019]],["body/classes/RefreshTokenDto.html",[3,0.375,4,0.33,5,0.33,9,0.519,14,0.68,20,0.026,22,0.624,33,0.519,40,0.375,41,0.022,57,0.022,58,0.022,101,2.354,104,1.434,111,2.213,153,3.916,157,3.266,183,3.6,399,1.895,410,4.58,411,3.687,412,5.909,413,4.373,414,2.898]],["title/injectables/RefreshTokenIdsStorage.html",[34,0.522,235,1.7]],["body/injectables/RefreshTokenIdsStorage.html",[3,0.188,4,0.165,5,0.165,9,0.26,10,0.768,14,0.841,19,1.124,20,0.027,21,1.046,22,0.703,23,1.124,25,1.19,27,2.254,30,0.821,33,0.398,34,0.522,36,0.37,40,0.288,41,0.013,42,1.205,44,1.024,46,0.768,48,1.205,52,1.569,55,2.935,56,1.452,57,0.013,58,0.013,60,0.882,63,2.305,64,2.483,84,2.631,101,1.454,104,1.511,105,3.314,210,0.765,222,2.064,235,1.698,244,2.483,262,3.356,272,1.452,321,3.647,331,1.317,354,1.452,365,2.829,375,1.205,415,4.131,416,1.621,417,4.384,418,3.355,419,3.355,420,4.384,421,4.384,422,2.829,423,2.19,424,2.829,425,4.707,426,2.19,427,2.829,428,2.19,429,2.19,430,2.19,431,2.829,432,2.19,433,2.19,434,1.847,435,1.847,436,1.847,437,1.847,438,1.847,439,1.847,440,3.439,441,1.847,442,1.847,443,1.847]],["title/classes/RefreshTokenIdsStorageError.html",[41,0.013,331,2.019]],["body/classes/RefreshTokenIdsStorageError.html",[3,0.264,4,0.233,5,0.233,13,1.336,14,0.479,19,0.758,20,0.027,21,0.706,22,0.44,23,0.758,27,2.155,30,1.155,33,0.511,34,0.67,36,0.52,40,0.369,41,0.017,42,2.371,44,1.441,46,0.987,48,1.695,52,2.016,55,2.517,56,2.043,57,0.017,58,0.017,63,2.002,84,2.181,104,1.55,105,2.961,210,1.076,222,2.516,235,1.56,262,2.592,272,2.043,321,2.281,331,2.592,354,2.857,375,1.695,399,1.336,415,3.19,416,2.281,417,4.192,420,4.192,421,4.192,422,2.599,424,2.599,425,4.54,427,2.599,431,2.599,434,3.635,435,2.599,436,2.599,437,2.599,438,2.599,439,2.599,440,4.192,441,2.599,442,2.599,443,2.599,444,3.082,445,3.082]],["title/injectables/RefreshTokenStrategy.html",[34,0.522,446,2.485]],["body/injectables/RefreshTokenStrategy.html",[3,0.286,4,0.252,5,0.252,9,0.396,10,1.044,13,2.249,14,0.709,19,0.822,20,0.027,21,0.765,22,0.477,23,0.822,25,0.765,33,0.661,34,0.709,36,0.564,38,1.838,40,0.286,41,0.013,42,1.838,45,2.474,46,0.765,55,1.563,57,0.018,58,0.018,60,1.346,62,2.474,63,2.09,64,3.374,71,3.694,72,2.01,75,3.845,76,2.819,77,3.845,78,2.01,79,3.374,86,2.819,87,2.819,92,2.216,94,2.819,153,3.022,210,1.167,270,2.216,380,3.845,446,3.374,447,4.375,448,4.375,449,3.343,450,4.559,451,3.866,452,3.343,453,3.343,454,3.343,455,2.819]],["title/controllers/SessionAuthenticationController.html",[106,1.456,238,2.226]],["body/controllers/SessionAuthenticationController.html",[3,0.232,4,0.204,5,0.204,9,0.321,10,0.899,13,1.173,14,0.611,19,0.966,20,0.027,21,0.899,22,0.561,23,0.966,25,0.899,30,1.902,33,0.718,36,0.457,40,0.232,41,0.011,46,0.619,57,0.016,58,0.016,63,2.264,72,1.627,84,1.369,85,1.265,97,2.568,106,1.173,108,1.173,111,1.988,147,2.282,151,2.002,152,3.313,154,2.604,161,2.936,162,2.282,168,2.907,169,2.002,172,1.793,175,1.488,176,1.793,177,1.793,178,2.002,179,1.627,180,2.002,181,2.002,185,2.282,210,0.945,222,1.988,236,2.16,238,2.604,264,2.282,265,3.364,266,2.282,269,1.793,270,1.793,329,2.002,330,2.002,347,2.002,451,3.727,456,3.9,457,2.282,458,3.929,459,2.706,460,3.929,461,2.706,462,2.706,463,2.706,464,2.706,465,2.706,466,2.706,467,2.706,468,2.706,469,2.706,470,2.002,471,2.706,472,2.002,473,2.706,474,2.706,475,2.706,476,2.706,477,2.706,478,2.706,479,2.706,480,2.706]],["title/injectables/SessionAuthenticationService.html",[34,0.522,236,1.847]],["body/injectables/SessionAuthenticationService.html",[3,0.234,4,0.206,5,0.206,9,0.324,10,0.905,13,1.714,14,0.723,19,1.143,20,0.027,21,1.064,22,0.663,23,1.143,25,0.905,27,1.714,30,1.91,33,0.642,34,0.615,35,2.02,36,0.461,40,0.234,41,0.011,46,0.905,48,2.175,52,1.849,57,0.016,58,0.016,60,1.1,63,2.271,72,1.641,84,2.737,85,1.277,102,2.001,104,1.227,138,1.641,139,1.641,154,2.621,160,2.926,161,2.737,172,1.81,175,1.501,176,1.81,210,1.381,222,2.352,236,2.175,246,2.579,247,2.02,250,3.771,265,3.378,304,2.302,308,3.334,324,2.302,326,1.81,333,1.641,335,2.302,336,2.302,337,3.334,339,2.302,340,2.302,341,2.302,481,4.298,482,2.302,483,3.954,484,4.649,485,2.73,486,3.954,487,2.73,488,2.73,489,2.73,490,2.73,491,2.73,492,2.73]],["title/guards/SessionGuard.html",[0,2.226,493,2.485]],["body/guards/SessionGuard.html",[2,2.543,3,0.329,4,0.29,5,0.29,9,0.455,10,1.144,11,4.519,14,0.597,16,2.839,17,3.904,19,0.944,20,0.027,21,0.878,22,0.548,23,0.944,24,3.699,25,0.878,26,4.215,27,2.167,28,4.688,33,0.593,34,0.777,36,0.648,39,2.839,40,0.329,41,0.015,44,1.794,46,0.878,57,0.02,58,0.02,210,1.34,451,2.543,493,3.699,494,3.235,495,3.837,496,3.837,497,3.837]],["title/classes/SignInDto.html",[41,0.013,161,1.7]],["body/classes/SignInDto.html",[3,0.348,4,0.306,5,0.306,9,0.482,14,0.806,20,0.026,22,0.74,33,0.482,40,0.348,41,0.021,57,0.021,58,0.021,101,2.247,102,2.89,104,1.588,111,2.623,161,2.623,175,3.141,333,3.433,399,1.76,414,2.691,498,4.226,499,3.423,500,4.815,501,4.06,502,4.371,503,4.06,504,3.423]],["title/classes/SignUpDto.html",[41,0.013,165,2.019]],["body/classes/SignUpDto.html",[3,0.348,4,0.306,5,0.306,9,0.482,14,0.806,20,0.026,22,0.74,33,0.482,40,0.348,41,0.021,57,0.021,58,0.021,101,2.247,102,2.89,104,1.588,111,2.623,165,3.117,173,3.785,333,3.433,399,1.76,414,2.691,498,4.226,500,4.815,502,4.371,504,3.423,505,3.423,506,4.06,507,4.06]],["title/classes/UpdateUserDto.html",[41,0.013,508,2.019]],["body/classes/UpdateUserDto.html",[3,0.4,4,0.352,5,0.352,20,0.026,33,0.67,40,0.4,41,0.018,42,2.565,57,0.022,58,0.022,398,2.565,399,2.022,401,3.451,508,3.398,509,3.933,510,4.664,511,3.933,512,3.451,513,3.451,514,4.664]],["title/classes/UserEntity.html",[41,0.013,312,2.226]],["body/classes/UserEntity.html",[3,0.353,4,0.311,5,0.311,9,0.488,14,0.94,20,0.026,21,1.315,22,0.863,40,0.353,41,0.016,57,0.021,58,0.021,101,2.266,102,2.908,104,1.684,105,2.875,312,3.466,333,3.455,375,3.16,399,1.784,515,3.47,516,4.115,517,4.115,518,4.115,519,4.115]],["title/classes/UserSerializer.html",[41,0.013,275,2.226]],["body/classes/UserSerializer.html",[3,0.383,4,0.192,5,0.192,9,0.302,10,0.86,13,1.936,14,0.767,19,0.924,20,0.027,21,0.86,22,0.536,23,0.924,25,1.022,30,2.274,32,4.158,33,0.585,38,1.4,40,0.218,41,0.01,44,1.757,46,0.583,57,0.015,58,0.015,63,1.799,71,3.268,78,2.685,97,3.018,102,1.289,103,1.884,210,0.889,244,3.891,269,2.491,275,2.491,277,3.891,286,2.147,326,1.688,329,1.884,330,1.884,347,1.884,354,2.491,361,2.147,399,1.104,520,4.435,521,2.147,522,4.466,523,4.466,524,4.931,525,3.758,526,2.547,527,2.547,528,6.067,529,2.547,530,2.547,531,3.169,532,2.547,533,3.758,534,2.547,535,2.547,536,2.547,537,2.547,538,2.547,539,2.547,540,2.547,541,2.547,542,3.758,543,3.758,544,2.547,545,2.547,546,2.547,547,2.547,548,2.547]],["title/controllers/UsersController.html",[106,1.456,549,2.226]],["body/controllers/UsersController.html",[3,0.225,4,0.198,5,0.198,9,0.312,10,0.88,14,0.828,19,1.231,20,0.027,21,1.146,22,0.714,23,1.231,25,1.219,33,0.594,36,0.444,40,0.225,41,0.01,46,1.219,57,0.015,58,0.015,85,1.229,104,1.588,106,1.139,108,1.139,111,2.696,115,1.944,151,1.944,168,2.845,169,3.365,375,3.06,398,3.06,508,3.544,512,2.845,513,2.845,549,2.549,550,2.216,551,2.216,552,4.221,553,3.243,554,3.243,555,3.243,556,2.216,557,2.628,558,2.628,559,2.216,560,3.845,561,2.628,562,2.216,563,3.845,564,2.628,565,2.216,566,3.845,567,2.628,568,2.628,569,2.628,570,2.628,571,2.501,572,2.216,573,2.216,574,2.216,575,2.628,576,2.628,577,2.628,578,2.628,579,2.628,580,2.628,581,2.628,582,2.628,583,2.628,584,2.628]],["title/modules/UsersModule.html",[117,1.456,130,2.019]],["body/modules/UsersModule.html",[3,0.343,4,0.302,5,0.302,20,0.026,33,0.673,36,0.676,40,0.343,41,0.016,57,0.02,58,0.02,108,2.228,117,2.46,119,2.027,120,2.027,121,2.409,122,2.409,123,2.027,124,3.412,125,2.409,130,3.808,131,3.09,132,2.409,133,2.409,549,3.761,571,3.484,572,3.378,585,3.378,586,3.378,587,4.006,588,4.006]],["title/injectables/UsersService.html",[34,0.522,571,1.847]],["body/injectables/UsersService.html",[3,0.24,4,0.212,5,0.212,9,0.333,10,0.923,14,0.85,19,1.27,20,0.027,21,1.182,22,0.737,23,1.27,25,1.343,30,1.935,33,0.56,34,0.627,36,0.474,40,0.24,41,0.011,46,1.252,52,1.312,57,0.016,58,0.016,60,1.13,104,1.444,105,3.361,375,3.131,398,3.007,508,3.526,512,2.984,513,2.984,551,2.366,552,4.353,553,3.401,554,3.401,555,3.401,556,3.401,559,3.401,562,3.401,565,3.401,571,2.218,573,2.366,574,2.366,589,2.366,590,2.806,591,2.806,592,2.806,593,2.806,594,2.806,595,5.468,596,2.806,597,2.806,598,2.806]],["title/coverage.html",[599,3.384]],["body/coverage.html",[0,2.8,1,1.394,5,0.175,6,1.955,7,2.107,8,1.955,20,0.027,22,0.331,30,0.869,34,0.904,41,0.023,52,1.084,55,2.201,57,0.014,58,0.014,59,1.394,61,1.955,62,2.593,96,1.537,97,1.173,99,1.955,100,1.955,106,2.04,107,1.537,109,1.955,113,1.275,123,1.173,145,1.955,149,1.537,150,1.955,157,1.394,161,1.173,165,1.394,170,1.275,173,1.537,175,1.275,177,1.537,183,1.537,194,1.537,195,1.955,205,1.716,235,1.173,236,1.275,238,1.537,246,1.173,248,1.537,262,2.107,265,2.323,275,1.537,277,1.716,299,1.955,312,1.537,331,1.394,384,1.955,398,1.275,400,1.955,401,2.593,402,1.955,410,1.955,411,1.955,415,2.593,416,2.593,446,1.716,447,1.955,448,1.955,456,1.955,457,1.955,470,1.716,472,1.716,481,1.955,482,1.955,493,1.716,494,1.955,498,2.593,499,1.955,505,1.955,508,1.394,509,1.955,515,1.955,520,1.955,521,1.955,531,1.955,549,1.537,550,1.955,571,1.275,589,1.955,599,1.716,600,2.319,601,2.319,602,2.319,603,6.701,604,5.054,605,4.224,606,5.683,607,1.955,608,1.955,609,4.707,610,5.519,611,2.955,612,4.224,613,3.504,614,1.955,615,1.955,616,1.955,617,3.504,618,2.319,619,2.319]],["title/dependencies.html",[120,2.043,620,2.369]],["body/dependencies.html",[20,0.027,36,0.648,38,2.11,39,2.839,41,0.02,57,0.02,58,0.02,74,2.307,78,3.005,79,2.839,120,1.942,138,2.307,139,2.307,204,2.839,253,2.839,269,2.543,270,3.313,271,3.235,272,2.543,274,3.235,326,2.543,394,3.235,414,2.543,511,3.235,621,5.559,622,3.837,623,3.837,624,3.837,625,3.837,626,3.837,627,3.837,628,3.837,629,3.837,630,3.837,631,3.837,632,3.837,633,3.837,634,3.837,635,3.837,636,3.837,637,3.837,638,3.837,639,3.837,640,3.837,641,3.837]],["title/miscellaneous/enumerations.html",[642,1.545,643,3.404]],["body/miscellaneous/enumerations.html",[9,0.593,20,0.023,57,0.023,58,0.023,179,3.541,642,2.749,643,4.214,644,4.998,645,5.889,646,4.998,647,4.998,648,4.998]],["title/miscellaneous/functions.html",[642,1.545,649,3.404]],["body/miscellaneous/functions.html",[9,0.603,20,0.024,57,0.024,58,0.024,123,3.191,616,4.285,642,2.795,649,4.285,650,5.082]],["title/index.html",[9,0.333,651,2.81,652,2.81]],["body/index.html",[4,0.261,20,0.026,57,0.018,58,0.018,93,2.915,599,2.558,653,3.457,654,3.457,655,4.665,656,3.457,657,3.457,658,3.457,659,3.457,660,3.457,661,3.457,662,2.915,663,5.279,664,3.457,665,3.457,666,3.457,667,3.457,668,6.215,669,3.457,670,3.457,671,3.457,672,6.08,673,3.457,674,3.457,675,4.665,676,3.457,677,3.457,678,3.457,679,4.665,680,4.665,681,3.457,682,3.457,683,3.457,684,4.665,685,4.665,686,3.457,687,3.457,688,3.457,689,3.457,690,3.457,691,2.915,692,3.457,693,3.457,694,3.457,695,3.457,696,3.457,697,3.457,698,3.457,699,3.457,700,3.457,701,3.457,702,2.915,703,3.457,704,3.457,705,3.457,706,3.457,707,3.457,708,3.457,709,2.915]],["title/modules.html",[119,2.315]],["body/modules.html",[20,0.023,57,0.023,58,0.023,118,3.14,119,2.397,129,2.848,130,2.848,232,2.848,691,5.357,710,6.353,711,6.353,712,6.353]],["title/overview.html",[713,3.857]],["body/overview.html",[2,2.336,20,0.026,57,0.019,58,0.019,59,3.205,60,1.419,96,2.336,108,1.528,113,2.932,117,1.528,118,4.207,119,1.783,120,1.783,121,2.119,122,2.119,123,1.783,124,2.119,125,2.119,126,2.972,127,2.972,128,2.972,129,3.571,130,3.571,131,2.841,132,2.119,133,2.119,170,2.932,232,3.939,233,2.972,234,2.972,235,2.698,236,2.932,399,1.528,455,2.972,571,2.932,585,2.972,586,2.972,713,2.972,714,4.725,715,3.525,716,3.525,717,3.525]],["title/properties.html",[101,1.75,620,2.369]],["body/properties.html",[20,0.026,57,0.023,58,0.023,101,2.166,662,4.214,702,4.214,709,4.214,718,4.998,719,4.998,720,4.998]],["title/miscellaneous/variables.html",[642,1.545,721,3.404]],["body/miscellaneous/variables.html",[9,0.435,17,2.43,20,0.027,22,0.692,30,2.169,46,0.839,57,0.019,58,0.019,97,2.455,104,1.281,177,3.216,179,2.917,205,3.59,210,1.694,211,4.091,451,2.43,470,3.59,472,2.713,607,3.092,608,4.091,611,3.092,614,3.092,615,4.091,642,2.016,721,3.092,722,3.667,723,4.852,724,3.667,725,5.787,726,5.787,727,3.667,728,4.852,729,3.667,730,4.852,731,3.667,732,3.667,733,3.667,734,3.667,735,3.667]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"modules/IamModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":603,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":719,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":640,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":631,"title":{},"body":{"dependencies.html":{}}}],["0.22.0",{"_index":635,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":630,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":636,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":610,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":604,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":606,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":605,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":612,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":617,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":613,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":455,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{},"overview.html":{}}}],["1.17.3",{"_index":633,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":624,"title":{},"body":{"dependencies.html":{}}}],["10.1.1",{"_index":623,"title":{},"body":{"dependencies.html":{}}}],["10.2.5",{"_index":621,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":717,"title":{},"body":{"overview.html":{}}}],["3.1.1",{"_index":622,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":714,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":637,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":628,"title":{},"body":{"dependencies.html":{}}}],["5.3.1",{"_index":627,"title":{},"body":{"dependencies.html":{}}}],["5.3.2",{"_index":634,"title":{},"body":{"dependencies.html":{}}}],["6.1.3",{"_index":632,"title":{},"body":{"dependencies.html":{}}}],["7.1.11",{"_index":626,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":641,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":716,"title":{},"body":{"overview.html":{}}}],["9",{"_index":715,"title":{},"body":{"overview.html":{}}}],["abstract",{"_index":403,"title":{},"body":{"injectables/HashingService.html":{}}}],["access",{"_index":54,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["accesstoken",{"_index":358,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["accesstokenguard",{"_index":1,"title":{"guards/AccessTokenGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{}}}],["accesstokenstrategy",{"_index":59,"title":{"injectables/AccessTokenStrategy.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{},"overview.html":{}}}],["action",{"_index":595,"title":{},"body":{"injectables/UsersService.html":{}}}],["activeuser",{"_index":470,"title":{},"body":{"controllers/SessionAuthenticationController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["activeuserdata",{"_index":97,"title":{"interfaces/ActiveUserData.html":{}},"body":{"interfaces/ActiveUserData.html":{},"injectables/AuthenticationService.html":{},"controllers/SessionAuthenticationController.html":{},"classes/UserSerializer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["adds",{"_index":596,"title":{},"body":{"injectables/UsersService.html":{}}}],["already",{"_index":344,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["amazing",{"_index":692,"title":{},"body":{"index.html":{}}}],["anonymous",{"_index":349,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["app",{"_index":670,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":114,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":260,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["appcontroller",{"_index":107,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":661,"title":{},"body":{"index.html":{}}}],["apply",{"_index":285,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["appmodule",{"_index":118,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":113,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["arguments",{"_index":51,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["async",{"_index":63,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"classes/UserSerializer.html":{}}}],["audience",{"_index":371,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["auth",{"_index":177,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth(authtype.none",{"_index":185,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{}}}],["auth_type_key",{"_index":205,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authenticated",{"_index":542,"title":{},"body":{"classes/UserSerializer.html":{}}}],["authentication",{"_index":152,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{}}}],["authentication.controller",{"_index":268,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["authentication.controller.ts",{"_index":457,"title":{},"body":{"controllers/SessionAuthenticationController.html":{},"coverage.html":{}}}],["authentication.controller.ts:28",{"_index":464,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["authentication.controller.ts:34",{"_index":461,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["authentication.service",{"_index":266,"title":{},"body":{"modules/AuthenticationModule.html":{},"controllers/SessionAuthenticationController.html":{}}}],["authentication.service.ts",{"_index":482,"title":{},"body":{"injectables/SessionAuthenticationService.html":{},"coverage.html":{}}}],["authentication.service.ts:12",{"_index":485,"title":{},"body":{"injectables/SessionAuthenticationService.html":{}}}],["authentication.service.ts:18",{"_index":487,"title":{},"body":{"injectables/SessionAuthenticationService.html":{}}}],["authentication.service.ts:26",{"_index":488,"title":{},"body":{"injectables/SessionAuthenticationService.html":{}}}],["authentication/authentication.module",{"_index":409,"title":{},"body":{"modules/IamModule.html":{}}}],["authentication/session",{"_index":265,"title":{},"body":{"modules/AuthenticationModule.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"coverage.html":{}}}],["authenticationcontroller",{"_index":149,"title":{"controllers/AuthenticationController.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{}}}],["authenticationguard",{"_index":194,"title":{"guards/AuthenticationGuard.html":{}},"body":{"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{}}}],["authenticationguard.defaultauthtype",{"_index":215,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authenticationmodule",{"_index":232,"title":{"modules/AuthenticationModule.html":{}},"body":{"modules/AuthenticationModule.html":{},"modules/IamModule.html":{},"modules.html":{},"overview.html":{}}}],["authenticationservice",{"_index":170,"title":{"injectables/AuthenticationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["authguard",{"_index":37,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["authguard('jwt",{"_index":43,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["author",{"_index":702,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":187,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["authtype",{"_index":179,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"controllers/SessionAuthenticationController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authtype.bearer",{"_index":206,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtype.none",{"_index":208,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypeguardmap",{"_index":196,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypes",{"_index":211,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["await",{"_index":222,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{}}}],["backers",{"_index":693,"title":{},"body":{"index.html":{}}}],["based",{"_index":50,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["bcrypt",{"_index":394,"title":{},"body":{"injectables/BcryptService.html":{},"dependencies.html":{}}}],["bcryptservice",{"_index":248,"title":{"injectables/BcryptService.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/BcryptService.html":{},"coverage.html":{}}}],["bearer",{"_index":647,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["body",{"_index":168,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":26,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/SessionGuard.html":{}}}],["bootstrap",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":712,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":710,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":388,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["building",{"_index":656,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":11,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/SessionGuard.html":{}}}],["canactivate(context",{"_index":16,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/SessionGuard.html":{}}}],["catch",{"_index":353,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["checkexist",{"_index":483,"title":{},"body":{"injectables/SessionAuthenticationService.html":{}}}],["checkexist(email",{"_index":486,"title":{},"body":{"injectables/SessionAuthenticationService.html":{}}}],["checkuserexist",{"_index":300,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["checkuserexist(email",{"_index":309,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["class",{"_index":41,"title":{"classes/CreateUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenIdsStorageError.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"modules/IamModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":399,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenIdsStorageError.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"overview.html":{}}}],["client",{"_index":287,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["cluster_appmodule",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule",{"_index":233,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_providers",{"_index":234,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_iammodule",{"_index":406,"title":{},"body":{"modules/IamModule.html":{}}}],["cluster_iammodule_imports",{"_index":407,"title":{},"body":{"modules/IamModule.html":{}}}],["cluster_usersmodule",{"_index":585,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":586,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["compare",{"_index":385,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["compare(data",{"_index":387,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["config/jwt.config/jwt.config",{"_index":255,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{}}}],["configmodule",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":281,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["configmodule.forroot",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":66,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthenticationService.html":{}}}],["configure",{"_index":239,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["configure(consumer",{"_index":240,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["conflictexception",{"_index":324,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{}}}],["conflictexception('email",{"_index":335,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{}}}],["connect",{"_index":274,"title":{},"body":{"modules/AuthenticationModule.html":{},"dependencies.html":{}}}],["const",{"_index":210,"title":{},"body":{"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/UserSerializer.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":13,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"classes/UserSerializer.html":{}}}],["constructor(hashservice",{"_index":304,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{}}}],["constructor(jwtconfigservice",{"_index":65,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["constructor(message",{"_index":434,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["constructor(private",{"_index":115,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":199,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["consumer",{"_index":243,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["context",{"_index":24,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/SessionGuard.html":{}}}],["context.getclass",{"_index":214,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.gethandler",{"_index":213,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":496,"title":{},"body":{"guards/SessionGuard.html":{}}}],["controller",{"_index":106,"title":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('authentication",{"_index":186,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["controller('session",{"_index":474,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["controller('users",{"_index":575,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":108,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"modules/IamModule.html":{},"controllers/SessionAuthenticationController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["controllers/authentication.controller",{"_index":254,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["controllers/session",{"_index":267,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["cookie",{"_index":293,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["coverage",{"_index":599,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":512,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":576,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(createuserdto",{"_index":556,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createparamdecorator",{"_index":727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createredisstore",{"_index":273,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["createredisstore(session",{"_index":284,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["createuserdto",{"_index":398,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["crypto",{"_index":328,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["ctx",{"_index":731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data",{"_index":352,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["data.interface",{"_index":330,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/SessionAuthenticationController.html":{},"classes/UserSerializer.html":{}}}],["data.interface.ts",{"_index":100,"title":{},"body":{"interfaces/ActiveUserData.html":{},"coverage.html":{}}}],["declarations",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":111,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"classes/RefreshTokenDto.html":{},"controllers/SessionAuthenticationController.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"controllers/UsersController.html":{}}}],["decorators/active",{"_index":471,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["decorators/auth/auth.decorator",{"_index":178,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"controllers/SessionAuthenticationController.html":{}}}],["default",{"_index":725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaultauthtype",{"_index":198,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["defined",{"_index":14,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":570,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':id",{"_index":563,"title":{},"body":{"controllers/UsersController.html":{}}}],["dependencies",{"_index":120,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":662,"title":{},"body":{"index.html":{},"properties.html":{}}}],["deserializeuser",{"_index":523,"title":{},"body":{"classes/UserSerializer.html":{}}}],["deserializeuser(payload",{"_index":527,"title":{},"body":{"classes/UserSerializer.html":{}}}],["development",{"_index":671,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":600,"title":{},"body":{"coverage.html":{}}}],["done",{"_index":528,"title":{},"body":{"classes/UserSerializer.html":{}}}],["done(null",{"_index":543,"title":{},"body":{"classes/UserSerializer.html":{}}}],["dto/create",{"_index":573,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/refresh",{"_index":182,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["dto/sign",{"_index":172,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{}}}],["dto/update",{"_index":574,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":681,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":657,"title":{},"body":{"index.html":{}}}],["email",{"_index":102,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{}}}],["encrypt",{"_index":389,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["enumerations",{"_index":643,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/auth",{"_index":180,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"controllers/SessionAuthenticationController.html":{}}}],["err",{"_index":32,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/UserSerializer.html":{}}}],["error",{"_index":354,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"classes/UserSerializer.html":{}}}],["error,payload",{"_index":529,"title":{},"body":{"classes/UserSerializer.html":{}}}],["error,user",{"_index":534,"title":{},"body":{"classes/UserSerializer.html":{}}}],["error.code",{"_index":355,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["exception",{"_index":49,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["executioncontext",{"_index":17,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/SessionGuard.html":{},"miscellaneous/variables.html":{}}}],["exists",{"_index":336,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{}}}],["expiresin",{"_index":318,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["export",{"_index":40,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"modules/IamModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":270,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"dependencies.html":{}}}],["extends",{"_index":42,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UpdateUserDto.html":{}}}],["extractjwt",{"_index":76,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":87,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["false",{"_index":89,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthenticationModule.html":{}}}],["field",{"_index":728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"modules/IamModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findall",{"_index":552,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone",{"_index":553,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":579,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(id",{"_index":559,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["flat",{"_index":218,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["forroutes",{"_index":298,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["found",{"_index":56,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["framework",{"_index":655,"title":{},"body":{"index.html":{}}}],["fulfilled",{"_index":225,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["function",{"_index":531,"title":{},"body":{"classes/UserSerializer.html":{},"coverage.html":{}}}],["functions",{"_index":649,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generatetoken",{"_index":301,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["generatetoken(user",{"_index":311,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["gensalt",{"_index":393,"title":{},"body":{"injectables/BcryptService.html":{}}}],["gensalt(10",{"_index":397,"title":{},"body":{"injectables/BcryptService.html":{}}}],["get(':id",{"_index":560,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('test",{"_index":460,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["gethello",{"_index":110,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getkey",{"_index":418,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{}}}],["getkey(userid",{"_index":422,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["getpassportinstance",{"_index":524,"title":{},"body":{"classes/UserSerializer.html":{}}}],["getting",{"_index":651,"title":{"index.html":{}},"body":{}}],["grow",{"_index":688,"title":{},"body":{"index.html":{}}}],["guard",{"_index":0,"title":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/SessionGuard.html":{}},"body":{"coverage.html":{}}}],["guard.canactivate(context",{"_index":221,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["guardpromises",{"_index":219,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/SessionGuard.html":{},"overview.html":{}}}],["guards.map((guard",{"_index":220,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["guards/access",{"_index":258,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["guards/authentication/authentication.guard",{"_index":259,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["handlerequest",{"_index":12,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["handlerequest(err",{"_index":29,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["hash",{"_index":386,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["hash(data",{"_index":391,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["hashedpassword",{"_index":345,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["hashing.service",{"_index":395,"title":{},"body":{"injectables/BcryptService.html":{}}}],["hashing/bcrypt/bcrypt.service",{"_index":249,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["hashing/hashing.service",{"_index":247,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{}}}],["hashingservice",{"_index":246,"title":{"injectables/HashingService.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/SessionAuthenticationService.html":{},"coverage.html":{}}}],["hashservice",{"_index":308,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{}}}],["hello",{"_index":147,"title":{},"body":{"injectables/AppService.html":{},"controllers/SessionAuthenticationController.html":{}}}],["here",{"_index":699,"title":{},"body":{"index.html":{}}}],["httpcode",{"_index":465,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["httpcode(httpstatus.ok",{"_index":476,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["httpcode(httpstatus.ok)@post('sign",{"_index":463,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["httponly",{"_index":295,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["https://nestjs.com",{"_index":706,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":466,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["iam/iam.module",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["iammodule",{"_index":129,"title":{"modules/IamModule.html":{}},"body":{"modules/AppModule.html":{},"modules/IamModule.html":{},"modules.html":{},"overview.html":{}}}],["id",{"_index":375,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":601,"title":{},"body":{"coverage.html":{}}}],["ids.storage",{"_index":263,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{}}}],["ids.storage.ts",{"_index":416,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"coverage.html":{}}}],["ids.storage.ts:19",{"_index":433,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{}}}],["ids.storage.ts:21",{"_index":429,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{}}}],["ids.storage.ts:24",{"_index":430,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{}}}],["ids.storage.ts:28",{"_index":426,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{}}}],["ids.storage.ts:32",{"_index":432,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{}}}],["ids.storage.ts:39",{"_index":428,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{}}}],["ids.storage.ts:43",{"_index":423,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{}}}],["ids.storage.ts:9",{"_index":444,"title":{},"body":{"classes/RefreshTokenIdsStorageError.html":{}}}],["ids.storage/refresh",{"_index":262,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"coverage.html":{}}}],["ignoreexpiration",{"_index":88,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["implements",{"_index":44,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/BcryptService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"guards/SessionGuard.html":{},"classes/UserSerializer.html":{}}}],["import",{"_index":33,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"modules/IamModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/IamModule.html":{}}}],["in.dto",{"_index":176,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{}}}],["in.dto.ts",{"_index":499,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["in.dto.ts:5",{"_index":501,"title":{},"body":{"classes/SignInDto.html":{}}}],["in.dto.ts:8",{"_index":503,"title":{},"body":{"classes/SignInDto.html":{}}}],["in.dto/sign",{"_index":175,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"classes/SignInDto.html":{},"coverage.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"modules/IamModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":73,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthenticationService.html":{}}}],["inject(jwtconfig.key",{"_index":83,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthenticationService.html":{}}}],["injectable",{"_index":34,"title":{"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/SessionAuthenticationService.html":{},"injectables/UsersService.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":60,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/SessionAuthenticationService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["insert",{"_index":365,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/RefreshTokenIdsStorage.html":{}}}],["insert(userid",{"_index":424,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["installation",{"_index":667,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":669,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":381,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["interface",{"_index":96,"title":{"interfaces/ActiveUserData.html":{}},"body":{"interfaces/ActiveUserData.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":98,"title":{},"body":{"interfaces/ActiveUserData.html":{}}}],["interfaces/active",{"_index":329,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/SessionAuthenticationController.html":{},"classes/UserSerializer.html":{}}}],["invalidate",{"_index":419,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{}}}],["invalidate(userid",{"_index":427,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["ioredis",{"_index":272,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"dependencies.html":{}}}],["isemail",{"_index":500,"title":{},"body":{"classes/SignInDto.html":{},"classes/SignUpDto.html":{}}}],["ismatch",{"_index":337,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{}}}],["isnotempty",{"_index":412,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["issuer",{"_index":373,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["isvalid",{"_index":376,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["join",{"_index":695,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":79,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["jwtconfig",{"_index":80,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{}}}],["jwtconfigservice",{"_index":68,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["jwtconfigservice.secret",{"_index":95,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["jwtconfiguration",{"_index":305,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["jwtfromrequest",{"_index":86,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["jwtmodule",{"_index":252,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":282,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtservice",{"_index":306,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["kamil",{"_index":703,"title":{},"body":{"index.html":{}}}],["keyof",{"_index":729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["legend",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":709,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":685,"title":{},"body":{"index.html":{}}}],["map((type",{"_index":216,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["match",{"_index":341,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{}}}],["matching",{"_index":58,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"modules/IamModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":445,"title":{},"body":{"classes/RefreshTokenIdsStorageError.html":{}}}],["metadata",{"_index":639,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":10,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["middlewareconsumer",{"_index":241,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["minlength",{"_index":504,"title":{},"body":{"classes/SignInDto.html":{},"classes/SignUpDto.html":{}}}],["minlength(8",{"_index":502,"title":{},"body":{"classes/SignInDto.html":{},"classes/SignUpDto.html":{}}}],["miscellaneous",{"_index":642,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":684,"title":{},"body":{"index.html":{}}}],["mode",{"_index":675,"title":{},"body":{"index.html":{}}}],["module",{"_index":117,"title":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":119,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":698,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":704,"title":{},"body":{"index.html":{}}}],["name",{"_index":21,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["nest",{"_index":663,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":708,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":36,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"modules/IamModule.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":74,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":204,"title":{},"body":{"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":253,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":38,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AuthenticationModule.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UserSerializer.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":625,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":511,"title":{},"body":{"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestmodule",{"_index":245,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["new",{"_index":52,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/SessionAuthenticationService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["node.js",{"_index":654,"title":{},"body":{"index.html":{}}}],["none",{"_index":648,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["null",{"_index":343,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["number",{"_index":105,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/AuthenticationService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{}}}],["observable",{"_index":28,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/SessionGuard.html":{}}}],["onapplicationbootstrap",{"_index":420,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["onapplicationshutdown",{"_index":421,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["open",{"_index":686,"title":{},"body":{"index.html":{}}}],["optional",{"_index":23,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":713,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p2002",{"_index":356,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["package",{"_index":620,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":569,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":19,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["partialtype",{"_index":510,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(createuserdto",{"_index":514,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["passport",{"_index":78,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthenticationModule.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UserSerializer.html":{},"dependencies.html":{}}}],["passport.initialize",{"_index":296,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["passport.session",{"_index":297,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["passportinstance",{"_index":536,"title":{},"body":{"classes/UserSerializer.html":{}}}],["passportinstance.deserializeuser((payload",{"_index":540,"title":{},"body":{"classes/UserSerializer.html":{}}}],["passportinstance.serializeuser((user",{"_index":538,"title":{},"body":{"classes/UserSerializer.html":{}}}],["passportmodule",{"_index":251,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["passportserializer",{"_index":522,"title":{},"body":{"classes/UserSerializer.html":{}}}],["passportstrategy",{"_index":75,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["passportstrategy(strategy",{"_index":82,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["passreqtocallback",{"_index":453,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["password",{"_index":333,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/UserEntity.html":{}}}],["patch",{"_index":568,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id",{"_index":566,"title":{},"body":{"controllers/UsersController.html":{}}}],["payload",{"_index":71,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthenticationService.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UserSerializer.html":{}}}],["permissions",{"_index":546,"title":{},"body":{"classes/UserSerializer.html":{}}}],["please",{"_index":696,"title":{},"body":{"index.html":{}}}],["pnpm",{"_index":668,"title":{},"body":{"index.html":{}}}],["post",{"_index":169,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["post('refresh",{"_index":158,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('sign",{"_index":162,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{}}}],["prefix",{"_index":151,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["prisma",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{},"dependencies.html":{}}}],["prisma/client",{"_index":326,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{},"classes/UserSerializer.html":{},"dependencies.html":{}}}],["prismamodule",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["prismamodule.forroot",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["prismaserive",{"_index":484,"title":{},"body":{"injectables/SessionAuthenticationService.html":{}}}],["prismaservice",{"_index":250,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{}}}],["private",{"_index":84,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{}}}],["process.env.session_secret",{"_index":290,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["production",{"_index":93,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"index.html":{}}}],["progressive",{"_index":653,"title":{},"body":{"index.html":{}}}],["project",{"_index":687,"title":{},"body":{"index.html":{}}}],["promise",{"_index":27,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{}}}],["promise.all",{"_index":359,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["promise.allsettled(guardpromises",{"_index":223,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["promisify",{"_index":468,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["promisify(request.login.bind(request))(user",{"_index":479,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["properties",{"_index":101,"title":{"properties.html":{}},"body":{"interfaces/ActiveUserData.html":{},"guards/AuthenticationGuard.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/UserEntity.html":{},"properties.html":{}}}],["provide",{"_index":279,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["providers",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["randomuuid",{"_index":327,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["read",{"_index":697,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":85,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"controllers/UsersController.html":{}}}],["record",{"_index":207,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["redis",{"_index":271,"title":{},"body":{"modules/AuthenticationModule.html":{},"dependencies.html":{}}}],["redis(process.env.redis_url",{"_index":288,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["redisclient",{"_index":417,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["redisclient(process.env.redis_url",{"_index":437,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["redisstore",{"_index":283,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["reflect",{"_index":638,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":200,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["refresh",{"_index":380,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["refreshtoken",{"_index":153,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["refreshtoken(@body",{"_index":192,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refreshtoken(refreshtokendto",{"_index":156,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refreshtoken.refreshtoken",{"_index":369,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtokendto",{"_index":157,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["refreshtokenid",{"_index":357,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtokenidsstorage",{"_index":235,"title":{"injectables/RefreshTokenIdsStorage.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"coverage.html":{},"overview.html":{}}}],["refreshtokenidsstorageerror",{"_index":331,"title":{"classes/RefreshTokenIdsStorageError.html":{}},"body":{"injectables/AuthenticationService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"coverage.html":{}}}],["refreshtokenidsstorageerror('token",{"_index":442,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["refreshtokens",{"_index":302,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtokens(refreshtoken",{"_index":314,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtokenstrategy",{"_index":446,"title":{"injectables/RefreshTokenStrategy.html":{}},"body":{"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["rejected",{"_index":224,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["rejected['reason",{"_index":228,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["remove",{"_index":554,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":583,"title":{},"body":{"controllers/UsersController.html":{}}}],["remove(id",{"_index":562,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["removes",{"_index":598,"title":{},"body":{"injectables/UsersService.html":{}}}],["repository",{"_index":666,"title":{},"body":{"index.html":{}}}],["req",{"_index":467,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["request",{"_index":451,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"guards/SessionGuard.html":{},"miscellaneous/variables.html":{}}}],["request.headers?.authorization.split",{"_index":454,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["request.isauthenticated",{"_index":497,"title":{},"body":{"guards/SessionGuard.html":{}}}],["request[request_user_key",{"_index":733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request_user_key",{"_index":615,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["resave",{"_index":291,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["reset",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["result",{"_index":230,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["result.status",{"_index":227,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["result.value",{"_index":231,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["results",{"_index":57,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"modules/IamModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["results.find((result",{"_index":226,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["results.some",{"_index":229,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["retrieve",{"_index":548,"title":{},"body":{"classes/UserSerializer.html":{}}}],["return",{"_index":46,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":25,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["role",{"_index":544,"title":{},"body":{"classes/UserSerializer.html":{}}}],["run",{"_index":672,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":39,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/SessionGuard.html":{},"dependencies.html":{}}}],["salt",{"_index":396,"title":{},"body":{"injectables/BcryptService.html":{}}}],["samesite",{"_index":294,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["saveuninitialized",{"_index":292,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["sayhello",{"_index":458,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["sayhello(@activeuser",{"_index":480,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["sayhello(user",{"_index":459,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["scalable",{"_index":658,"title":{},"body":{"index.html":{}}}],["secret",{"_index":289,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{}}}],["secretorkey",{"_index":94,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["serializer",{"_index":278,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["serializer.ts",{"_index":521,"title":{},"body":{"classes/UserSerializer.html":{},"coverage.html":{}}}],["serializer.ts:17",{"_index":532,"title":{},"body":{"classes/UserSerializer.html":{}}}],["serializer.ts:21",{"_index":535,"title":{},"body":{"classes/UserSerializer.html":{}}}],["serializer.ts:31",{"_index":530,"title":{},"body":{"classes/UserSerializer.html":{}}}],["serializer.ts:6",{"_index":526,"title":{},"body":{"classes/UserSerializer.html":{}}}],["serializer/user",{"_index":277,"title":{},"body":{"modules/AuthenticationModule.html":{},"classes/UserSerializer.html":{},"coverage.html":{}}}],["serializeuser",{"_index":525,"title":{},"body":{"classes/UserSerializer.html":{}}}],["serializeuser(user",{"_index":533,"title":{},"body":{"classes/UserSerializer.html":{}}}],["server",{"_index":659,"title":{},"body":{"index.html":{}}}],["services/authentication.service",{"_index":171,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{}}}],["services/session",{"_index":264,"title":{},"body":{"modules/AuthenticationModule.html":{},"controllers/SessionAuthenticationController.html":{}}}],["session",{"_index":269,"title":{},"body":{"modules/AuthenticationModule.html":{},"controllers/SessionAuthenticationController.html":{},"classes/UserSerializer.html":{},"dependencies.html":{}}}],["sessionauthenticationcontroller",{"_index":238,"title":{"controllers/SessionAuthenticationController.html":{}},"body":{"modules/AuthenticationModule.html":{},"controllers/SessionAuthenticationController.html":{},"coverage.html":{}}}],["sessionauthenticationservice",{"_index":236,"title":{"injectables/SessionAuthenticationService.html":{}},"body":{"modules/AuthenticationModule.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["sessionauthservice",{"_index":475,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["sessionguard",{"_index":493,"title":{"guards/SessionGuard.html":{}},"body":{"guards/SessionGuard.html":{},"coverage.html":{}}}],["set",{"_index":91,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["setmetadata(auth_type_key",{"_index":735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":660,"title":{},"body":{"index.html":{}}}],["signin",{"_index":154,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{}}}],["signin(@body",{"_index":190,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["signin(@req",{"_index":477,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["signin(request",{"_index":462,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["signin(signindto",{"_index":160,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{}}}],["signindto",{"_index":161,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"classes/SignInDto.html":{},"coverage.html":{}}}],["signindto.password",{"_index":492,"title":{},"body":{"injectables/SessionAuthenticationService.html":{}}}],["signtoken",{"_index":303,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["signtoken(userid",{"_index":317,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["signup",{"_index":155,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["signup(@body",{"_index":188,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["signup(signupdto",{"_index":164,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["signupdto",{"_index":165,"title":{"classes/SignUpDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/SignUpDto.html":{},"coverage.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"modules/IamModule.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["sponsors",{"_index":690,"title":{},"body":{"index.html":{}}}],["src/.../active",{"_index":722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth",{"_index":644,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../auth.decorator.ts",{"_index":723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../iam.contant.ts",{"_index":724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":650,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":109,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":112,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":145,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":146,"title":{},"body":{"injectables/AppService.html":{}}}],["src/iam/authentication/authentication.module.ts",{"_index":237,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["src/iam/authentication/authentication.module.ts:51",{"_index":242,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["src/iam/authentication/controllers/authentication.controller.ts",{"_index":150,"title":{},"body":{"controllers/AuthenticationController.html":{},"coverage.html":{}}}],["src/iam/authentication/controllers/authentication.controller.ts:15",{"_index":167,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/iam/authentication/controllers/authentication.controller.ts:20",{"_index":163,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/iam/authentication/controllers/authentication.controller.ts:25",{"_index":159,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/iam/authentication/controllers/session",{"_index":456,"title":{},"body":{"controllers/SessionAuthenticationController.html":{},"coverage.html":{}}}],["src/iam/authentication/decorators/active",{"_index":607,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/iam/authentication/decorators/auth/auth.decorator.ts",{"_index":611,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/iam/authentication/dto/refresh",{"_index":410,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/iam/authentication/dto/sign",{"_index":498,"title":{},"body":{"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"coverage.html":{}}}],["src/iam/authentication/enums/auth",{"_index":646,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/iam/authentication/guards/access",{"_index":6,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/iam/authentication/guards/authentication/authentication.guard.ts",{"_index":195,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/iam/authentication/guards/authentication/authentication.guard.ts:23",{"_index":202,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/iam/authentication/guards/authentication/authentication.guard.ts:8",{"_index":201,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/iam/authentication/guards/session/session.guard.ts",{"_index":494,"title":{},"body":{"guards/SessionGuard.html":{},"coverage.html":{}}}],["src/iam/authentication/guards/session/session.guard.ts:6",{"_index":495,"title":{},"body":{"guards/SessionGuard.html":{}}}],["src/iam/authentication/interfaces/active",{"_index":99,"title":{},"body":{"interfaces/ActiveUserData.html":{},"coverage.html":{}}}],["src/iam/authentication/services/authentication.service.ts",{"_index":299,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{}}}],["src/iam/authentication/services/authentication.service.ts:112",{"_index":315,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/iam/authentication/services/authentication.service.ts:150",{"_index":320,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/iam/authentication/services/authentication.service.ts:25",{"_index":307,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/iam/authentication/services/authentication.service.ts:35",{"_index":310,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/iam/authentication/services/authentication.service.ts:43",{"_index":316,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/iam/authentication/services/authentication.service.ts:57",{"_index":323,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/iam/authentication/services/authentication.service.ts:83",{"_index":313,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/iam/authentication/services/session",{"_index":481,"title":{},"body":{"injectables/SessionAuthenticationService.html":{},"coverage.html":{}}}],["src/iam/authentication/strategies/access",{"_index":61,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"coverage.html":{}}}],["src/iam/authentication/strategies/refresh",{"_index":447,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["src/iam/authentication/utils/refresh",{"_index":415,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"coverage.html":{}}}],["src/iam/authentication/utils/user",{"_index":520,"title":{},"body":{"classes/UserSerializer.html":{},"coverage.html":{}}}],["src/iam/config/jwt.config/jwt.config",{"_index":81,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["src/iam/constants/iam.contant.ts",{"_index":614,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/iam/hashing/bcrypt/bcrypt.service.ts",{"_index":384,"title":{},"body":{"injectables/BcryptService.html":{},"coverage.html":{}}}],["src/iam/hashing/bcrypt/bcrypt.service.ts:11",{"_index":390,"title":{},"body":{"injectables/BcryptService.html":{}}}],["src/iam/hashing/bcrypt/bcrypt.service.ts:7",{"_index":392,"title":{},"body":{"injectables/BcryptService.html":{}}}],["src/iam/hashing/hashing.service.ts",{"_index":402,"title":{},"body":{"injectables/HashingService.html":{},"coverage.html":{}}}],["src/iam/hashing/hashing.service.ts:5",{"_index":405,"title":{},"body":{"injectables/HashingService.html":{}}}],["src/iam/hashing/hashing.service.ts:6",{"_index":404,"title":{},"body":{"injectables/HashingService.html":{}}}],["src/iam/iam.module.ts",{"_index":408,"title":{},"body":{"modules/IamModule.html":{}}}],["src/main.ts",{"_index":616,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/users/dto/create",{"_index":400,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":509,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":515,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:2",{"_index":517,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/entities/user.entity.ts:3",{"_index":516,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/entities/user.entity.ts:4",{"_index":519,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/entities/user.entity.ts:5",{"_index":518,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/users.controller.ts",{"_index":550,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:11",{"_index":557,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:16",{"_index":558,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:21",{"_index":561,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:26",{"_index":567,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:31",{"_index":564,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":587,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":589,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:11",{"_index":591,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:15",{"_index":592,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:19",{"_index":594,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:23",{"_index":593,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:7",{"_index":590,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":673,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":676,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":677,"title":{},"body":{"index.html":{}}}],["started",{"_index":652,"title":{"index.html":{}},"body":{}}],["starter",{"_index":665,"title":{},"body":{"index.html":{}}}],["statements",{"_index":602,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":197,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["stay",{"_index":700,"title":{},"body":{"index.html":{}}}],["storage",{"_index":366,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["store",{"_index":286,"title":{},"body":{"modules/AuthenticationModule.html":{},"classes/UserSerializer.html":{}}}],["storedtokenid",{"_index":440,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["strategies/access",{"_index":256,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["strategy",{"_index":77,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["string",{"_index":104,"title":{},"body":{"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/SessionAuthenticationService.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":103,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/AuthenticationService.html":{},"classes/UserSerializer.html":{}}}],["super",{"_index":45,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["super(message",{"_index":435,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["super.canactivate(context",{"_index":47,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["support",{"_index":691,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":711,"title":{},"body":{"modules.html":{}}}],["t",{"_index":319,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["table",{"_index":619,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":618,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":680,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":683,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":682,"title":{},"body":{"index.html":{}}}],["tests",{"_index":679,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":689,"title":{},"body":{"index.html":{}}}],["this.accesstokenguard",{"_index":209,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.appservice.gethello",{"_index":116,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.refreshtokens(refreshtokendto",{"_index":193,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authservice.signin(signindto",{"_index":191,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authservice.signup(signupdto",{"_index":189,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authtypeguardmap[type",{"_index":217,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.checkexist(signindto.email",{"_index":490,"title":{},"body":{"injectables/SessionAuthenticationService.html":{}}}],["this.checkuserexist(email",{"_index":334,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.deserializeuser(payload",{"_index":541,"title":{},"body":{"classes/UserSerializer.html":{}}}],["this.generatetoken(user",{"_index":342,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.getpassportinstance",{"_index":537,"title":{},"body":{"classes/UserSerializer.html":{}}}],["this.hashservice.compare",{"_index":491,"title":{},"body":{"injectables/SessionAuthenticationService.html":{}}}],["this.hashservice.compare(password",{"_index":338,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.hashservice.hash(password",{"_index":346,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.jwtconfiguration.accesstokenttl",{"_index":362,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.jwtconfiguration.audience",{"_index":372,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.jwtconfiguration.issuer",{"_index":374,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.jwtconfiguration.refreshtokenttl",{"_index":364,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.jwtconfiguration.secret",{"_index":370,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.jwtservice.signasync",{"_index":383,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.jwtservice.verifyasync",{"_index":368,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.prismaserive.user.findunique",{"_index":489,"title":{},"body":{"injectables/SessionAuthenticationService.html":{}}}],["this.prismaservice.user.create",{"_index":351,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.prismaservice.user.findunique",{"_index":332,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.redisclient",{"_index":436,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["this.redisclient.del(this.getkey(userid",{"_index":443,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["this.redisclient.get(this.getkey(userid",{"_index":441,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["this.redisclient.quit",{"_index":438,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["this.redisclient.set(this.getkey(userid",{"_index":439,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["this.reflector.getallandoverride",{"_index":212,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.refreshtokenidsstorage.insert(user.id",{"_index":367,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.refreshtokenidsstorage.invalidate(user.id",{"_index":378,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.refreshtokenidsstorage.validate",{"_index":377,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.serializeuser(user",{"_index":539,"title":{},"body":{"classes/UserSerializer.html":{}}}],["this.sessionauthservice.signin(signindto",{"_index":478,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["this.signtoken",{"_index":360,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.signtoken(user.id",{"_index":363,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":577,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":578,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(+id",{"_index":580,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(+id",{"_index":584,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(+id",{"_index":582,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":48,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/SessionAuthenticationService.html":{}}}],["todo",{"_index":90,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["token",{"_index":55,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["token.dto",{"_index":184,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["token.dto.ts",{"_index":411,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:5",{"_index":413,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["token.dto/refresh",{"_index":183,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.guard",{"_index":203,"title":{},"body":{"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{}}}],["token.guard.ts",{"_index":8,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:11",{"_index":15,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:15",{"_index":18,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:21",{"_index":31,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.strategy",{"_index":257,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["token.strategy.ts",{"_index":62,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["token.strategy.ts:10",{"_index":449,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["token.strategy.ts:19",{"_index":452,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["token.strategy.ts:20",{"_index":70,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["token.strategy.ts:8",{"_index":67,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["token/access",{"_index":7,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{}}}],["token/refresh",{"_index":448,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["tokenid",{"_index":425,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["touch",{"_index":701,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":629,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":92,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["try",{"_index":350,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["twitter",{"_index":707,"title":{},"body":{"index.html":{}}}],["type",{"_index":22,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/ActiveUserData.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type.enum",{"_index":181,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"controllers/SessionAuthenticationController.html":{}}}],["type.enum.ts",{"_index":645,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typescript",{"_index":664,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":35,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{}}}],["unauthorizedexception('invalid",{"_index":379,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["unauthorizedexception('no",{"_index":53,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["unauthorizedexception('user",{"_index":340,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{}}}],["unauthorizedexception(error.message",{"_index":382,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["undefined",{"_index":730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unit",{"_index":678,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":72,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthenticationService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{}}}],["unlicensed",{"_index":720,"title":{},"body":{"properties.html":{}}}],["up",{"_index":166,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["up.dto",{"_index":174,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["up.dto.ts",{"_index":505,"title":{},"body":{"classes/SignUpDto.html":{},"coverage.html":{}}}],["up.dto.ts:5",{"_index":506,"title":{},"body":{"classes/SignUpDto.html":{}}}],["up.dto.ts:8",{"_index":507,"title":{},"body":{"classes/SignUpDto.html":{}}}],["up.dto/sign",{"_index":173,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/SignUpDto.html":{},"coverage.html":{}}}],["update",{"_index":555,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(@param('id",{"_index":581,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(id",{"_index":565,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updates",{"_index":597,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto",{"_index":508,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["useclass",{"_index":280,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["user",{"_index":30,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AuthenticationService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"classes/UserSerializer.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.decorator",{"_index":473,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["user.decorator.ts",{"_index":608,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":513,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":401,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.email",{"_index":347,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/SessionAuthenticationController.html":{},"classes/UserSerializer.html":{}}}],["user.id",{"_index":361,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/UserSerializer.html":{}}}],["user.name",{"_index":348,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user.password",{"_index":339,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{}}}],["user.permissions",{"_index":547,"title":{},"body":{"classes/UserSerializer.html":{}}}],["user.role",{"_index":545,"title":{},"body":{"classes/UserSerializer.html":{}}}],["user/active",{"_index":472,"title":{},"body":{"controllers/SessionAuthenticationController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user?.[field",{"_index":734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userentity",{"_index":312,"title":{"classes/UserEntity.html":{}},"body":{"injectables/AuthenticationService.html":{},"classes/UserEntity.html":{},"coverage.html":{}}}],["userid",{"_index":321,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["users",{"_index":551,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":588,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":572,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/entities/user.entity",{"_index":325,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["users/users.module",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":549,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userserializer",{"_index":275,"title":{"classes/UserSerializer.html":{}},"body":{"modules/AuthenticationModule.html":{},"classes/UserSerializer.html":{},"coverage.html":{}}}],["usersmodule",{"_index":130,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":571,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["util",{"_index":469,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["utils/refresh",{"_index":261,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{}}}],["utils/user",{"_index":276,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["validate",{"_index":64,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenIdsStorage.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["validate(payload",{"_index":69,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["validate(request",{"_index":450,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["validate(userid",{"_index":431,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["validator",{"_index":414,"title":{},"body":{"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"dependencies.html":{}}}],["value",{"_index":726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":609,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":721,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":718,"title":{},"body":{"properties.html":{}}}],["void",{"_index":244,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/UserSerializer.html":{}}}],["watch",{"_index":674,"title":{},"body":{"index.html":{}}}],["website",{"_index":705,"title":{},"body":{"index.html":{}}}],["world",{"_index":148,"title":{},"body":{"injectables/AppService.html":{}}}],["yes",{"_index":322,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["you'd",{"_index":694,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AccessTokenGuard.html":{"url":"guards/AccessTokenGuard.html","title":"guard - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/iam/authentication/guards/access-token/access-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/iam/authentication/guards/access-token/access-token.guard.ts:11\n                            \n                        \n\n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/guards/access-token/access-token.guard.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: any, user: any, info: any)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/guards/access-token/access-token.guard.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AccessTokenGuard extends AuthGuard('jwt') implements CanActivate {\n  constructor() {\n    super();\n  }\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    return super.canActivate(context);\n  }\n\n  handleRequest(err: any, user: any, info: any) {\n    // You can throw an exception based on either \"info\" or \"err\" arguments\n    if (err || !user) {\n      throw err || new UnauthorizedException('No access token found');\n    }\n    return user;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccessTokenStrategy.html":{"url":"injectables/AccessTokenStrategy.html","title":"injectable - AccessTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/strategies/access-token/access-token.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtConfigService: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/iam/authentication/strategies/access-token/access-token.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtConfigService\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/strategies/access-token/access-token.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport jwtConfig from '../../../../../src/iam/config/jwt.config/jwt.config';\n\n@Injectable()\nexport class AccessTokenStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor(\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfigService: ConfigType,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      //   ignoreExpiration: false, // TODO: set to true in production\n      secretOrKey: jwtConfigService.secret,\n    });\n  }\n\n  async validate(payload: any) {\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ActiveUserData.html":{"url":"interfaces/ActiveUserData.html","title":"interface - ActiveUserData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ActiveUserData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/interfaces/active-user-data.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ActiveUserData {\n  sub: number;\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nIamModule\n\nIamModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nIamModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            IamModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { PrismaModule } from 'nestjs-prisma';\nimport { IamModule } from './iam/iam.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { UsersModule } from './users/users.module';\n\n@Module({\n  imports: [\n    PrismaModule.forRoot(),\n    ConfigModule.forRoot(),\n    IamModule,\n    UsersModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthenticationController.html":{"url":"controllers/AuthenticationController.html","title":"controller - AuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/controllers/authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                refreshToken\n                            \n                            \n                                    \n                                signIn\n                            \n                            \n                                    \n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('refresh-token')\n                \n            \n\n            \n                \n                    Defined in src/iam/authentication/controllers/authentication.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshTokenDto\n                                    \n                                                RefreshTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(signInDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('sign-in')\n                \n            \n\n            \n                \n                    Defined in src/iam/authentication/controllers/authentication.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInDto\n                                    \n                                                SignInDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(signUpDto: SignUpDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('sign-up')\n                \n            \n\n            \n                \n                    Defined in src/iam/authentication/controllers/authentication.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signUpDto\n                                    \n                                                SignUpDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { AuthenticationService } from '../services/authentication.service';\nimport { SignUpDto } from '../dto/sign-up.dto/sign-up.dto';\nimport { SignInDto } from '../dto/sign-in.dto/sign-in.dto';\nimport { Auth } from '../decorators/auth/auth.decorator';\nimport { AuthType } from '../enums/auth-type.enum';\nimport { RefreshTokenDto } from '../dto/refresh-token.dto/refresh-token.dto';\n\n@Auth(AuthType.None)\n@Controller('authentication')\nexport class AuthenticationController {\n  constructor(private readonly authService: AuthenticationService) {}\n\n  @Post('sign-up')\n  signUp(@Body() signUpDto: SignUpDto) {\n    return this.authService.signUp(signUpDto);\n  }\n\n  @Post('sign-in')\n  signIn(@Body() signInDto: SignInDto) {\n    return this.authService.signIn(signInDto);\n  }\n\n  @Post('refresh-token')\n  refreshToken(@Body() refreshTokenDto: RefreshTokenDto) {\n    return this.authService.refreshTokens(refreshTokenDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/iam/authentication/guards/authentication/authentication.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authTypeGuardMap\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                defaultAuthType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessTokenGuard: AccessTokenGuard)\n                    \n                \n                        \n                            \n                                Defined in src/iam/authentication/guards/authentication/authentication.guard.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenGuard\n                                                  \n                                                        \n                                                                        AccessTokenGuard\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/guards/authentication/authentication.guard.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { AccessTokenGuard } from './../access-token/access-token.guard';\nimport { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { AuthType } from '../../enums/auth-type.enum';\nimport { Reflector } from '@nestjs/core';\nimport { AUTH_TYPE_KEY } from '../../decorators/auth/auth.decorator';\n\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n  constructor(\n    private readonly reflector: Reflector,\n    private readonly accessTokenGuard: AccessTokenGuard,\n  ) {}\n  private static readonly defaultAuthType = AuthType.Bearer;\n\n  private readonly authTypeGuardMap: Record = {\n    [AuthType.None]: { canActivate: () => true },\n    [AuthType.Bearer]: this.accessTokenGuard,\n  };\n\n  async canActivate(context: ExecutionContext): Promise {\n    const authTypes = this.reflector.getAllAndOverride(\n      AUTH_TYPE_KEY,\n      [context.getHandler(), context.getClass()],\n    ) ?? [AuthenticationGuard.defaultAuthType];\n\n    const guards = authTypes\n      .map((type: any) => this.authTypeGuardMap[type])\n      .flat();\n\n    const guardPromises = guards.map((guard: any) =>\n      guard.canActivate(context),\n    );\n\n    const results = await Promise.allSettled(guardPromises); //? return 'rejected' or 'fulfilled'\n\n    const rejected = results.find((result: any) => {\n      return result.status === 'rejected';\n    });\n\n    if (rejected) {\n      throw rejected['reason'];\n    }\n\n    return results.some(\n      (result: any) => result.status === 'fulfilled' && result.value,\n    );\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthenticationModule.html":{"url":"modules/AuthenticationModule.html","title":"module - AuthenticationModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthenticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\n\nAccessTokenStrategy\n\nAccessTokenStrategy\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\nAuthenticationModule -->\n\nAccessTokenStrategy->AuthenticationModule\n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nRefreshTokenIdsStorage\n\nRefreshTokenIdsStorage\n\nAuthenticationModule -->\n\nRefreshTokenIdsStorage->AuthenticationModule\n\n\n\n\n\nSessionAuthenticationService\n\nSessionAuthenticationService\n\nAuthenticationModule -->\n\nSessionAuthenticationService->AuthenticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/iam/authentication/authentication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccessTokenStrategy\n                        \n                        \n                            AuthenticationService\n                        \n                        \n                            RefreshTokenIdsStorage\n                        \n                        \n                            SessionAuthenticationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthenticationController\n                        \n                        \n                            SessionAuthenticationController\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/authentication.module.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { HashingService } from '../hashing/hashing.service';\nimport { BcryptService } from '../hashing/bcrypt/bcrypt.service';\nimport { PrismaService } from 'nestjs-prisma';\nimport { PassportModule } from '@nestjs/passport';\nimport { ConfigModule } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AuthenticationService } from './services/authentication.service';\nimport { AuthenticationController } from './controllers/authentication.controller';\nimport jwtConfig from '../config/jwt.config/jwt.config';\nimport { AccessTokenStrategy } from './strategies/access-token/access-token.strategy';\nimport { AccessTokenGuard } from './guards/access-token/access-token.guard';\nimport { AuthenticationGuard } from './guards/authentication/authentication.guard';\nimport { APP_GUARD } from '@nestjs/core';\nimport { RefreshTokenIdsStorage } from './utils/refresh-token-ids.storage/refresh-token-ids.storage';\nimport { SessionAuthenticationService } from './services/session-authentication/session-authentication.service';\nimport { SessionAuthenticationController } from './controllers/session-authentication/session-authentication.controller';\n\nimport passport from 'passport';\nimport session from 'express-session';\nimport Redis from 'ioredis';\nimport createRedisStore from 'connect-redis';\nimport { UserSerializer } from './utils/user-serializer/user-serializer';\n\n@Module({\n  providers: [\n    {\n      provide: HashingService,\n      useClass: BcryptService,\n    },\n    {\n      provide: APP_GUARD,\n      useClass: AuthenticationGuard,\n    },\n    RefreshTokenIdsStorage,\n    AuthenticationService,\n    PrismaService,\n    AccessTokenStrategy,\n    AccessTokenGuard,\n    SessionAuthenticationService,\n    UserSerializer,\n  ],\n  imports: [\n    PassportModule,\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n  ],\n  controllers: [AuthenticationController, SessionAuthenticationController],\n})\nexport class AuthenticationModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    const RedisStore = createRedisStore(session);\n    consumer\n      .apply(\n        session({\n          store: new RedisStore({\n            client: new Redis(process.env.REDIS_URL),\n          }),\n          secret: process.env.SESSION_SECRET,\n          resave: false,\n          saveUninitialized: false,\n          cookie: { sameSite: true, httpOnly: true },\n        }),\n        passport.initialize(),\n        passport.session(),\n      )\n      .forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationService.html":{"url":"injectables/AuthenticationService.html","title":"injectable - AuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/services/authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                checkUserExist\n                            \n                            \n                                    Async\n                                generateToken\n                            \n                            \n                                    Async\n                                refreshTokens\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Private\n                                    Async\n                                signToken\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hashService: HashingService, prismaService: PrismaService, jwtConfiguration: ConfigType<>, jwtService: JwtService, refreshTokenIdsStorage: RefreshTokenIdsStorage)\n                    \n                \n                        \n                            \n                                Defined in src/iam/authentication/services/authentication.service.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        hashService\n                                                  \n                                                        \n                                                                        HashingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                    PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokenIdsStorage\n                                                  \n                                                        \n                                                                        RefreshTokenIdsStorage\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        checkUserExist\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkUserExist(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/services/authentication.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateToken(user: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/services/authentication.service.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshTokens(refreshToken: RefreshTokenDto)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/services/authentication.service.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                RefreshTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/services/authentication.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInDto\n                                    \n                                                SignInDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        signToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    signToken(userID: number, expiresIn: number, payload?: T)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/services/authentication.service.ts:150\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    expiresIn\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(signUpDto: SignUpDto)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/services/authentication.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signUpDto\n                                    \n                                                SignUpDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { HashingService } from '../../hashing/hashing.service';\nimport { PrismaService } from 'nestjs-prisma';\nimport { SignInDto } from '../dto/sign-in.dto/sign-in.dto';\nimport { SignUpDto } from '../dto/sign-up.dto/sign-up.dto';\nimport { UserEntity } from '../../../users/entities/user.entity';\nimport { User } from '@prisma/client';\nimport { randomUUID } from 'crypto';\nimport jwtConfig from '../../config/jwt.config/jwt.config';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { ActiveUserData } from '../interfaces/active-user-data.interface';\nimport {\n  RefreshTokenIdsStorage,\n  RefreshTokenIdsStorageError,\n} from '../utils/refresh-token-ids.storage/refresh-token-ids.storage';\nimport { RefreshTokenDto } from '../dto/refresh-token.dto/refresh-token.dto';\n\n@Injectable()\nexport class AuthenticationService {\n  constructor(\n    private readonly hashService: HashingService,\n    private readonly prismaService: PrismaService,\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n    private readonly jwtService: JwtService,\n    private readonly refreshTokenIdsStorage: RefreshTokenIdsStorage,\n  ) {}\n\n  private async checkUserExist(email: string): Promise {\n    return await this.prismaService.user.findUnique({\n      where: {\n        email,\n      },\n    });\n  }\n\n  async signIn(signInDto: SignInDto) {\n    const { email, password } = signInDto;\n\n    const user = await this.checkUserExist(email);\n\n    if (!user) throw new ConflictException('Email not exists');\n\n    const isMatch = await this.hashService.compare(password, user.password);\n\n    if (!isMatch) throw new UnauthorizedException('User or password not match');\n\n    return await this.generateToken(user);\n  }\n\n  async signUp(signUpDto: SignUpDto) {\n    const { email, password } = signUpDto;\n\n    if ((await this.checkUserExist(email)) !== null)\n      throw new ConflictException('Email already exists');\n\n    const hashedPassword = await this.hashService.hash(password);\n    const user = new UserEntity();\n    user.email = email;\n    user.password = hashedPassword;\n    user.name = 'Anonymous';\n\n    try {\n      await this.prismaService.user.create({\n        data: {\n          ...user,\n        },\n      });\n    } catch (error) {\n      if (error.code === 'P2002') {\n        throw new ConflictException('Email already exists');\n      }\n      throw error;\n    }\n  }\n\n  async generateToken(user: UserEntity) {\n    const refreshTokenId = randomUUID();\n\n    const payload = {\n      email: user.email,\n    };\n\n    const [accessToken, refreshToken] = await Promise.all([\n      //* accessToken\n      this.signToken>(\n        user.id,\n        this.jwtConfiguration.accessTokenTtl,\n        payload,\n      ),\n      //* refreshToken\n      this.signToken(user.id, this.jwtConfiguration.refreshTokenTtl, {\n        refreshTokenId,\n      }),\n\n      //* Insert refreshTokenId into storage\n      await this.refreshTokenIdsStorage.insert(user.id, refreshTokenId),\n    ]);\n\n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n\n  async refreshTokens(refreshToken: RefreshTokenDto) {\n    try {\n      const { sub, refreshTokenId } = await this.jwtService.verifyAsync & { refreshTokenId: string }\n      >(refreshToken.refreshToken, {\n        secret: this.jwtConfiguration.secret,\n        audience: this.jwtConfiguration.audience,\n        issuer: this.jwtConfiguration.issuer,\n      });\n\n      const user = await this.prismaService.user.findUnique({\n        where: {\n          id: sub,\n        },\n      });\n\n      if (!user) throw new UnauthorizedException('User not found');\n\n      const isValid = await this.refreshTokenIdsStorage.validate(\n        sub,\n        refreshTokenId,\n      );\n\n      if (isValid) {\n        await this.refreshTokenIdsStorage.invalidate(user.id);\n      } else {\n        throw new UnauthorizedException('Invalid refresh token');\n      }\n\n      return await this.generateToken(user);\n    } catch (error) {\n      if (error instanceof RefreshTokenIdsStorageError) {\n        throw new UnauthorizedException('Invalid refresh token');\n      }\n      throw new UnauthorizedException(error.message);\n    }\n  }\n\n  private async signToken(userID: number, expiresIn: number, payload?: T) {\n    return await this.jwtService.signAsync(\n      {\n        sub: userID,\n        ...payload,\n      },\n      {\n        audience: this.jwtConfiguration.audience,\n        issuer: this.jwtConfiguration.issuer,\n        secret: this.jwtConfiguration.secret,\n        expiresIn,\n      },\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptService.html":{"url":"injectables/BcryptService.html","title":"injectable - BcryptService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/hashing/bcrypt/bcrypt.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                compare\n                            \n                            \n                                    Async\n                                hash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        compare\n                        \n                    \n                \n            \n            \n                \n                    \n                    compare(data: string | Buffer, encrypt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/hashing/bcrypt/bcrypt.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            string | Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    encrypt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        hash\n                        \n                    \n                \n            \n            \n                \n                    \n                    hash(data: string | Buffer)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/hashing/bcrypt/bcrypt.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            string | Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { hash, genSalt, compare } from 'bcrypt';\nimport { HashingService } from '../hashing.service';\n\n@Injectable()\nexport class BcryptService implements HashingService {\n  async hash(data: string | Buffer): Promise {\n    const salt = await genSalt(10);\n    return hash(data, salt);\n  }\n  async compare(data: string | Buffer, encrypt: string): Promise {\n    return compare(data, encrypt);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateUserDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingService.html":{"url":"injectables/HashingService.html","title":"injectable - HashingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/hashing/hashing.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                compare\n                            \n                            \n                                    Abstract\n                                hash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        compare\n                        \n                    \n                \n            \n            \n                \n                    \n                    compare(data: string | Buffer, encrypt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/hashing/hashing.service.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            string | Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    encrypt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        hash\n                        \n                    \n                \n            \n            \n                \n                    \n                    hash(data: string | Buffer)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/hashing/hashing.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            string | Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport abstract class HashingService {\n  abstract hash(data: string | Buffer): Promise;\n  abstract compare(data: string | Buffer, encrypt: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/IamModule.html":{"url":"modules/IamModule.html","title":"module - IamModule","body":"\n                   \n\n\n\n\n    Modules\n    IamModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_IamModule\n\n\n\ncluster_IamModule_imports\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nIamModule\n\nIamModule\n\nIamModule -->\n\nAuthenticationModule->IamModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/iam/iam.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthenticationModule } from './authentication/authentication.module';\n\n@Module({\n  providers: [],\n  controllers: [],\n  imports: [AuthenticationModule],\n})\nexport class IamModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/dto/refresh-token.dto/refresh-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/iam/authentication/dto/refresh-token.dto/refresh-token.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\n\nexport class RefreshTokenDto {\n  @IsNotEmpty()\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenIdsStorage.html":{"url":"injectables/RefreshTokenIdsStorage.html","title":"injectable - RefreshTokenIdsStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenIdsStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/utils/refresh-token-ids.storage/refresh-token-ids.storage.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                redisClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getKey\n                            \n                            \n                                    Async\n                                insert\n                            \n                            \n                                    Async\n                                invalidate\n                            \n                            \n                                onApplicationBootstrap\n                            \n                            \n                                onApplicationShutdown\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    getKey(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/utils/refresh-token-ids.storage/refresh-token-ids.storage.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        insert\n                        \n                    \n                \n            \n            \n                \n                    \n                    insert(userId: number, tokenID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/utils/refresh-token-ids.storage/refresh-token-ids.storage.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        invalidate\n                        \n                    \n                \n            \n            \n                \n                    \n                    invalidate(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/utils/refresh-token-ids.storage/refresh-token-ids.storage.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \nonApplicationBootstrap()\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/utils/refresh-token-ids.storage/refresh-token-ids.storage.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onApplicationShutdown\n                        \n                    \n                \n            \n            \n                \nonApplicationShutdown()\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/utils/refresh-token-ids.storage/refresh-token-ids.storage.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(userId: number, tokenID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/utils/refresh-token-ids.storage/refresh-token-ids.storage.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        redisClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     redisClient\n\n                    \n                \n                    \n                        \n                                Defined in src/iam/authentication/utils/refresh-token-ids.storage/refresh-token-ids.storage.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  OnApplicationBootstrap,\n  OnApplicationShutdown,\n} from '@nestjs/common';\n\nimport redisClient from 'ioredis';\n\nexport class RefreshTokenIdsStorageError extends Error {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n@Injectable()\nexport class RefreshTokenIdsStorage\n  implements OnApplicationBootstrap, OnApplicationShutdown\n{\n  private redisClient: redisClient;\n\n  onApplicationBootstrap() {\n    this.redisClient = new redisClient(process.env.REDIS_URL);\n  }\n  onApplicationShutdown() {\n    this.redisClient.quit();\n  }\n\n  async insert(userId: number, tokenID: string): Promise {\n    await this.redisClient.set(this.getKey(userId), tokenID);\n  }\n\n  async validate(userId: number, tokenID: string): Promise {\n    const storedTokenID = await this.redisClient.get(this.getKey(userId));\n    if (!storedTokenID)\n      throw new RefreshTokenIdsStorageError('Token ID not found');\n    return storedTokenID === tokenID;\n  }\n\n  async invalidate(userId: number): Promise {\n    await this.redisClient.del(this.getKey(userId));\n  }\n\n  private getKey(userId: number): string {\n    return `user-${userId}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenIdsStorageError.html":{"url":"classes/RefreshTokenIdsStorageError.html","title":"class - RefreshTokenIdsStorageError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenIdsStorageError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/utils/refresh-token-ids.storage/refresh-token-ids.storage.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/iam/authentication/utils/refresh-token-ids.storage/refresh-token-ids.storage.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Injectable,\n  OnApplicationBootstrap,\n  OnApplicationShutdown,\n} from '@nestjs/common';\n\nimport redisClient from 'ioredis';\n\nexport class RefreshTokenIdsStorageError extends Error {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n@Injectable()\nexport class RefreshTokenIdsStorage\n  implements OnApplicationBootstrap, OnApplicationShutdown\n{\n  private redisClient: redisClient;\n\n  onApplicationBootstrap() {\n    this.redisClient = new redisClient(process.env.REDIS_URL);\n  }\n  onApplicationShutdown() {\n    this.redisClient.quit();\n  }\n\n  async insert(userId: number, tokenID: string): Promise {\n    await this.redisClient.set(this.getKey(userId), tokenID);\n  }\n\n  async validate(userId: number, tokenID: string): Promise {\n    const storedTokenID = await this.redisClient.get(this.getKey(userId));\n    if (!storedTokenID)\n      throw new RefreshTokenIdsStorageError('Token ID not found');\n    return storedTokenID === tokenID;\n  }\n\n  async invalidate(userId: number): Promise {\n    await this.redisClient.del(this.getKey(userId));\n  }\n\n  private getKey(userId: number): string {\n    return `user-${userId}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenStrategy.html":{"url":"injectables/RefreshTokenStrategy.html","title":"injectable - RefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/strategies/refresh-token/refresh-token.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/iam/authentication/strategies/refresh-token/refresh-token.strategy.ts:10\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(request: Request, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/strategies/refresh-token/refresh-token.strategy.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { Request } from 'express';\n\n@Injectable()\nexport class RefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh',\n) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: 'refresh-token',\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(request: Request, payload: any) {\n    const refreshToken = request.headers?.authorization.split(' ')[1];\n    return { refreshToken, ...payload };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SessionAuthenticationController.html":{"url":"controllers/SessionAuthenticationController.html","title":"controller - SessionAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SessionAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/controllers/session-authentication/session-authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                session-authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                sayHello\n                            \n                            \n                                    \n                                    \n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        sayHello\n                        \n                    \n                \n            \n            \n                \n                    \n                    sayHello(user: ActiveUserData)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('test')\n                \n            \n\n            \n                \n                    Defined in src/iam/authentication/controllers/session-authentication/session-authentication.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ActiveUserData\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(request: Request, signInDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('sign-in')\n                \n            \n\n            \n                \n                    Defined in src/iam/authentication/controllers/session-authentication/session-authentication.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    signInDto\n                                    \n                                                SignInDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Post,\n  Req,\n} from '@nestjs/common';\nimport { Request } from 'express';\nimport { promisify } from 'util';\nimport { AuthType } from '../../enums/auth-type.enum';\nimport { Auth } from '../../decorators/auth/auth.decorator';\nimport { SessionAuthenticationService } from '../../services/session-authentication/session-authentication.service';\nimport { SignInDto } from '../../dto/sign-in.dto/sign-in.dto';\nimport { ActiveUser } from '../../decorators/active-user/active-user.decorator';\nimport { ActiveUserData } from '../../interfaces/active-user-data.interface';\n\n@Auth(AuthType.None)\n@Controller('session-authentication')\nexport class SessionAuthenticationController {\n  constructor(\n    private readonly sessionAuthService: SessionAuthenticationService,\n  ) {}\n\n  @HttpCode(HttpStatus.OK)\n  @Post('sign-in')\n  async signIn(@Req() request: Request, @Body() signInDto: SignInDto) {\n    const user = await this.sessionAuthService.signIn(signInDto);\n    await promisify(request.logIn.bind(request))(user);\n  }\n\n  @Get('test')\n  async sayHello(@ActiveUser() user: ActiveUserData) {\n    return `Hello ${user.email}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionAuthenticationService.html":{"url":"injectables/SessionAuthenticationService.html","title":"injectable - SessionAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/services/session-authentication/session-authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                checkExist\n                            \n                            \n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hashService: HashingService, prismaSerive: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/iam/authentication/services/session-authentication/session-authentication.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        hashService\n                                                  \n                                                        \n                                                                        HashingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaSerive\n                                                  \n                                                        \n                                                                    PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        checkExist\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkExist(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/services/session-authentication/session-authentication.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/services/session-authentication/session-authentication.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInDto\n                                    \n                                                SignInDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { User } from '@prisma/client';\nimport { PrismaService } from 'nestjs-prisma';\nimport { SignInDto } from '../../dto/sign-in.dto/sign-in.dto';\nimport { HashingService } from '../../../hashing/hashing.service';\n\n@Injectable()\nexport class SessionAuthenticationService {\n  constructor(\n    private readonly hashService: HashingService,\n    private prismaSerive: PrismaService,\n  ) {}\n\n  private async checkExist(email: string): Promise {\n    return await this.prismaSerive.user.findUnique({\n      where: {\n        email,\n      },\n    });\n  }\n\n  async signIn(signInDto: SignInDto) {\n    const user = await this.checkExist(signInDto.email);\n    if (!user) throw new ConflictException('Email not exists');\n\n    const isMatch = await this.hashService.compare(\n      signInDto.password,\n      user.password,\n    );\n\n    if (!isMatch) throw new UnauthorizedException('User or password not match');\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/SessionGuard.html":{"url":"guards/SessionGuard.html","title":"guard - SessionGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    SessionGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/iam/authentication/guards/session/session.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/guards/session/session.guard.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class SessionGuard implements CanActivate {\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const request = context.switchToHttp().getRequest();\n    return request.isAuthenticated();\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/dto/sign-in.dto/sign-in.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/iam/authentication/dto/sign-in.dto/sign-in.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/iam/authentication/dto/sign-in.dto/sign-in.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, MinLength } from 'class-validator';\n\nexport class SignInDto {\n  @IsEmail()\n  email: string;\n\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignUpDto.html":{"url":"classes/SignUpDto.html","title":"class - SignUpDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignUpDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/dto/sign-up.dto/sign-up.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/iam/authentication/dto/sign-up.dto/sign-up.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/iam/authentication/dto/sign-up.dto/sign-up.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, MinLength } from 'class-validator';\n\nexport class SignUpDto {\n  @IsEmail()\n  email: string;\n\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UserEntity {\n  id: number;\n  email: string;\n  password: string;\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserSerializer.html":{"url":"classes/UserSerializer.html","title":"class - UserSerializer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserSerializer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/utils/user-serializer/user-serializer.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        PassportSerializer\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deserializeUser\n                            \n                            \n                                getPassportInstance\n                            \n                            \n                                serializeUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/iam/authentication/utils/user-serializer/user-serializer.ts:6\n                            \n                        \n\n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deserializeUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deserializeUser(payload: ActiveUserData, done: (err: Error,payload: ActiveUserData) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/utils/user-serializer/user-serializer.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                ActiveUserData\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPassportInstance\n                        \n                    \n                \n            \n            \n                \ngetPassportInstance()\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/utils/user-serializer/user-serializer.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serializeUser\n                        \n                    \n                \n            \n            \n                \nserializeUser(user: User, done: (err: Error,user: ActiveUserData) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/utils/user-serializer/user-serializer.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PassportSerializer } from '@nestjs/passport';\nimport { User } from '@prisma/client';\nimport passport from 'passport';\nimport { ActiveUserData } from '../../interfaces/active-user-data.interface';\n\nexport class UserSerializer implements PassportSerializer {\n  constructor() {\n    const passportInstance = this.getPassportInstance();\n    passportInstance.serializeUser((user, done) =>\n      this.serializeUser(user as User, done),\n    );\n    passportInstance.deserializeUser((payload, done) =>\n      this.deserializeUser(payload as ActiveUserData, done),\n    );\n  }\n\n  getPassportInstance() {\n    return passport;\n  }\n\n  serializeUser(user: User, done: (err: Error, user: ActiveUserData) => void) {\n    // store user info authenticated in session\n    done(null, {\n      sub: user.id,\n      email: user.email,\n      //   role: user.role,\n      //   permissions: user.permissions as any,\n    });\n  }\n\n  async deserializeUser(\n    payload: ActiveUserData,\n    done: (err: Error, payload: ActiveUserData) => void,\n  ) {\n    // retrieve user info authenticated from session\n    done(null, payload);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.usersService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.usersService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.usersService.update(+id, updateUserDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.usersService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService\n\nUsersService\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\n\n@Injectable()\nexport class UsersService {\n  create(createUserDto: CreateUserDto) {\n    return 'This action adds a new user';\n  }\n\n  findAll() {\n    return `This action returns all users`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} user`;\n  }\n\n  update(id: number, updateUserDto: UpdateUserDto) {\n    return `This action updates a #${id} user`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} user`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/iam/authentication/controllers/authentication.controller.ts\n            \n            controller\n            AuthenticationController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/iam/authentication/controllers/session-authentication/session-authentication.controller.ts\n            \n            controller\n            SessionAuthenticationController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/iam/authentication/decorators/active-user/active-user.decorator.ts\n            \n            variable\n            ActiveUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/iam/authentication/decorators/auth/auth.decorator.ts\n            \n            variable\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/iam/authentication/decorators/auth/auth.decorator.ts\n            \n            variable\n            AUTH_TYPE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/iam/authentication/dto/refresh-token.dto/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/iam/authentication/dto/sign-in.dto/sign-in.dto.ts\n            \n            class\n            SignInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/iam/authentication/dto/sign-up.dto/sign-up.dto.ts\n            \n            class\n            SignUpDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/iam/authentication/guards/access-token/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/iam/authentication/guards/authentication/authentication.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/iam/authentication/guards/session/session.guard.ts\n            \n            guard\n            SessionGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/iam/authentication/interfaces/active-user-data.interface.ts\n            \n            interface\n            ActiveUserData\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/iam/authentication/services/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/iam/authentication/services/session-authentication/session-authentication.service.ts\n            \n            injectable\n            SessionAuthenticationService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/iam/authentication/strategies/access-token/access-token.strategy.ts\n            \n            injectable\n            AccessTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/iam/authentication/strategies/refresh-token/refresh-token.strategy.ts\n            \n            injectable\n            RefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/iam/authentication/utils/refresh-token-ids.storage/refresh-token-ids.storage.ts\n            \n            class\n            RefreshTokenIdsStorageError\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/iam/authentication/utils/refresh-token-ids.storage/refresh-token-ids.storage.ts\n            \n            injectable\n            RefreshTokenIdsStorage\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/iam/authentication/utils/user-serializer/user-serializer.ts\n            \n            class\n            UserSerializer\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/iam/constants/iam.contant.ts\n            \n            variable\n            REQUEST_USER_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/iam/hashing/bcrypt/bcrypt.service.ts\n            \n            injectable\n            BcryptService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/iam/hashing/hashing.service.ts\n            \n            injectable\n            HashingService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            class\n            UserEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.2.5\n        \n            @nestjs/config : ^3.1.1\n        \n            @nestjs/core : ^10.2.5\n        \n            @nestjs/jwt : ^10.1.1\n        \n            @nestjs/passport : ^10.0.2\n        \n            @nestjs/platform-express : ^10.2.5\n        \n            @nestjs/swagger : ^7.1.11\n        \n            @prisma/client : ^5.3.1\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            connect-redis : ^6.1.3\n        \n            express-session : ^1.17.3\n        \n            ioredis : ^5.3.2\n        \n            nestjs-prisma : ^0.22.0\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthType   (src/.../auth-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/iam/authentication/enums/auth-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthType\n                    \n                \n                        \n                            \n                                 Bearer\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ pnpm installRunning the app\n# development\n$ pnpm run start\n\n# watch mode\n$ pnpm run start:dev\n\n# production mode\n$ pnpm run start:prodTest\n# unit tests\n$ pnpm run test\n\n# e2e tests\n$ pnpm run test:e2e\n\n# test coverage\n$ pnpm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthenticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        IamModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nIamModule\n\nIamModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nIamModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAccessTokenStrategy\n\nAccessTokenStrategy\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\nAuthenticationModule -->\n\nAccessTokenStrategy->AuthenticationModule\n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nRefreshTokenIdsStorage\n\nRefreshTokenIdsStorage\n\nAuthenticationModule -->\n\nRefreshTokenIdsStorage->AuthenticationModule\n\n\n\n\n\nSessionAuthenticationService\n\nSessionAuthenticationService\n\nAuthenticationModule -->\n\nSessionAuthenticationService->AuthenticationModule\n\n\n\nIamModule -->\n\nAuthenticationModule->IamModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActiveUser   (src/.../active-user.decorator.ts)\n                        \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            AUTH_TYPE_KEY   (src/.../auth.decorator.ts)\n                        \n                        \n                            REQUEST_USER_KEY   (src/.../iam.contant.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/iam/authentication/decorators/active-user/active-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ActiveUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (field: keyof ActiveUserData | undefined, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    const user: ActiveUserData | undefined = request[REQUEST_USER_KEY];\n    return field ? user && user?.[field] : user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/iam/authentication/decorators/auth/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...authTypes: AuthType[]) =>\n  SetMetadata(AUTH_TYPE_KEY, authTypes)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AUTH_TYPE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'authType'\n                    \n                \n\n\n        \n    \n\n    src/iam/constants/iam.contant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        REQUEST_USER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
