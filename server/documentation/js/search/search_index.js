var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AccessTokenGuard.html",[0,2.299,1,2.299]],["body/guards/AccessTokenGuard.html",[1,3.15,2,2.311,3,0.373,4,0.184,5,0.184,6,5.198,7,3.847,8,3.122,9,0.336,10,1.238,11,4.385,12,4.971,13,1.93,14,0.701,15,3.648,16,2.518,17,3.847,18,3.648,19,1.238,20,0.021,21,0.999,22,0.575,23,0.999,24,3.431,25,1.238,26,3.15,27,2.243,28,4.304,29,4.971,30,2.057,31,3.648,32,5.198,33,0.36,34,0.843,35,2.518,36,0.619,37,3.648,38,2.139,39,2.518,40,0.208,41,0.108,42,1.992,43,3.648,44,1.181,45,2.776,46,1.174,47,3.648,48,2.715,49,3.648,50,3.648,51,3.648,52,1.552,53,3.648,54,3.122,55,1.749,56,2.518,57,0.014,58,0.014]],["title/injectables/AccessTokenStrategy.html",[34,0.615,59,2.299]],["body/injectables/AccessTokenStrategy.html",[3,0.223,4,0.198,5,0.198,7,3.719,9,0.362,10,1.301,13,1.783,14,0.648,19,1.301,20,0.02,21,1.05,22,0.604,23,1.05,25,0.978,33,0.414,34,0.886,36,0.666,38,2.303,40,0.223,41,0.117,42,2.144,45,2.988,46,0.928,57,0.014,58,0.014,59,3.31,60,1.579,61,5.025,62,2.988,63,1.803,64,3.976,65,3.927,66,4.762,67,3.927,68,5.224,69,5.224,70,3.927,71,3.605,72,1.671,73,2.71,74,2.006,75,3.361,76,3.361,77,3.361,78,2.488,79,3.976,80,2.988,81,3.927,82,3.927,83,3.361,84,1.671,85,1.493,86,3.361,87,3.361,88,3.927,89,2.988,90,3.927,91,3.927,92,1.772,93,3.361,94,3.361,95,3.927]],["title/interfaces/ActiveUserData.html",[96,2.504,97,1.637]],["body/interfaces/ActiveUserData.html",[3,0.276,4,0.244,5,0.244,9,0.447,20,0.02,22,0.75,23,1.201,30,1.569,40,0.276,57,0.016,58,0.016,96,3.344,97,2.697,98,4.846,99,3.688,100,4.148,101,1.836,102,2.721,103,3.696,104,5.151,105,1.423,106,2.759]],["title/controllers/AppController.html",[107,1.544,108,2.504]],["body/controllers/AppController.html",[3,0.275,4,0.243,5,0.243,9,0.445,10,1.486,14,0.599,20,0.02,25,1.202,33,0.379,36,0.819,40,0.275,41,0.143,46,1.141,57,0.016,58,0.016,85,1.836,105,1.199,107,2.538,108,4.116,109,2.054,110,4.132,111,5.786,112,1.739,113,4.827,114,3.796,115,4.132,116,3.332,117,4.827]],["title/modules/AppModule.html",[118,1.38,119,2.504]],["body/modules/AppModule.html",[3,0.219,4,0.194,5,0.194,20,0.02,33,0.44,36,0.654,40,0.219,41,0.115,57,0.014,58,0.014,74,1.97,108,4.015,109,2.196,114,3.908,115,3.301,118,2.212,119,4.961,120,1.849,121,1.97,122,2.261,123,2.261,124,1.97,125,3.177,126,2.261,127,3.301,128,3.301,129,3.301,130,3.908,131,4.222,132,4.222,133,3.027,134,2.261,135,2.261,136,3.856,137,3.27,138,3.856,139,3.856,140,2.106,141,1.55,142,3.856,143,2.935,144,3.856,145,3.301,146,3.856,147,3.856]],["title/injectables/AppService.html",[34,0.615,114,2.128]],["body/injectables/AppService.html",[3,0.287,4,0.253,5,0.253,9,0.464,10,1.524,14,0.624,20,0.02,25,1.254,33,0.32,34,1.038,36,0.854,40,0.287,41,0.15,46,1.19,57,0.017,58,0.017,60,2.024,105,1.23,111,5.871,114,3.589,148,4.31,149,5.036,150,4.31,151,5.036]],["title/controllers/AuthenticationController.html",[107,1.544,152,2.504]],["body/controllers/AuthenticationController.html",[3,0.145,4,0.128,5,0.128,9,0.235,10,0.957,13,0.87,14,0.685,19,1.376,20,0.021,21,1.11,22,0.639,23,1.11,25,1.376,30,0.825,33,0.428,36,0.432,40,0.145,41,0.076,46,1.305,55,2.468,57,0.01,58,0.01,63,1.42,72,1.084,84,1.635,85,1.461,97,2.323,107,1.084,109,1.084,112,1.989,152,2.651,153,2.181,154,1.494,155,2.181,156,4.623,157,2.651,158,2.651,159,4.406,160,3.288,161,2.548,162,5.806,163,3.499,164,2.548,165,2.548,166,2.548,167,3.678,168,2.548,169,2.548,170,1.939,171,3.17,172,3.957,173,2.548,174,2.181,175,3.261,176,2.548,177,2.181,178,3.678,179,3.841,180,2.548,181,1.758,182,2.181,183,2.181,184,1.758,185,3.841,186,2.253,187,2.181,188,3.191,189,1.758,190,2.181,191,1.494,192,1.758,193,1.758,194,1.939,195,1.614,196,1.939,197,1.939,198,2.181,199,1.758,200,3.288,201,2.181,202,1.614,203,1.939,204,1.758,205,1.494,206,2.098,207,2.181,208,1.614,209,1.758,210,1.391,211,2.548,212,2.181,213,1.758,214,2.181,215,2.548,216,2.548,217,2.548,218,4.727,219,3.957,220,2.548,221,2.548,222,2.548,223,2.548,224,2.548,225,2.548,226,2.548,227,2.548,228,2.548,229,2.548,230,2.548,231,0.743,232,3.288,233,2.651,234,1.461,235,2.548,236,2.548,237,2.548,238,2.548,239,2.548]],["title/guards/AuthenticationGuard.html",[0,2.299,240,2.504]],["body/guards/AuthenticationGuard.html",[1,4.08,2,2.842,3,0.179,4,0.158,5,0.158,7,1.994,9,0.29,10,1.117,11,4.155,13,1.531,14,0.556,16,3.095,17,3.608,19,1.117,20,0.021,21,0.901,22,0.519,23,0.901,24,2.172,25,0.784,27,2.024,33,0.383,34,0.761,36,0.534,40,0.179,41,0.094,44,1.019,46,1.235,48,1.719,54,2.694,57,0.014,58,0.012,63,1.605,84,2.663,85,2.38,92,1.42,101,0.967,194,2.395,195,1.994,196,2.395,197,2.395,231,1.755,234,1.197,240,3.095,241,2.694,242,4.485,243,4.485,244,4.485,245,2.694,246,5.357,247,3.147,248,3.147,249,2.694,250,1.846,251,3.413,252,4.485,253,3.147,254,3.147,255,3.147,256,3.839,257,2.694,258,2.694,259,2.694,260,3.147,261,3.147,262,3.147,263,3.147,264,3.147,265,3.147,266,3.147,267,3.147,268,5.695,269,4.485,270,3.147,271,4.485,272,3.147,273,3.147,274,2.694,275,3.147]],["title/modules/AuthenticationModule.html",[118,1.38,276,2.299]],["body/modules/AuthenticationModule.html",[1,2.293,3,0.134,4,0.119,5,0.119,7,2.293,20,0.021,33,0.456,36,0.4,38,1.382,40,0.206,41,0.108,44,0.763,52,1.54,55,1.735,57,0.01,58,0.01,59,3.568,74,1.203,78,2.293,80,1.793,89,2.754,92,1.633,109,1.54,118,1.676,120,1.13,121,1.203,122,1.382,123,1.382,124,1.203,125,2.406,126,1.382,133,2.122,134,1.382,135,1.382,137,1.493,140,1.287,141,0.947,143,1.793,152,3.041,186,3.303,187,2.017,206,3.075,207,2.017,208,1.493,209,2.498,210,1.287,231,0.687,233,1.626,240,2.498,249,2.017,250,1.382,276,4.351,277,2.017,278,2.017,279,2.877,280,3.075,281,2.877,282,2.356,283,1.976,284,1.793,285,2.498,286,2.356,287,3.619,288,2.356,289,1.793,290,2.356,291,2.017,292,2.356,293,2.356,294,2.356,295,2.356,296,2.754,297,2.017,298,1.493,299,2.017,300,3.619,301,2.293,302,2.017,303,2.498,304,2.498,305,2.356,306,2.356,307,3.412,308,3.098,309,1.626,310,2.356,311,2.017,312,2.498,313,2.356,314,1.793,315,2.356,316,2.017,317,2.293,318,2.017,319,1.793,320,2.356,321,2.754,322,3.098,323,2.356,324,2.017,325,2.356,326,2.356,327,2.356,328,2.356,329,3.619,330,2.356,331,2.356,332,2.356,333,2.017,334,2.356,335,2.356,336,2.356,337,2.356,338,2.356,339,2.356,340,2.356,341,2.356,342,2.356,343,2.356,344,2.356]],["title/injectables/AuthenticationService.html",[34,0.615,186,2.128]],["body/injectables/AuthenticationService.html",[3,0.18,4,0.073,5,0.073,9,0.134,10,0.609,13,0.834,14,0.595,19,1.255,20,0.021,21,0.964,22,0.583,23,0.964,25,1.123,30,1.806,33,0.39,34,0.415,35,1,36,0.246,40,0.082,41,0.043,46,1.065,48,3.046,52,2.374,55,1.785,56,1.687,57,0.007,58,0.007,60,0.583,63,1.927,66,2.833,71,3.111,72,1.769,73,1,74,0.74,80,1.103,83,1.24,84,2.232,85,1.714,92,2.274,97,0.654,102,1.812,103,1.731,104,3.431,105,0.291,106,1.918,157,3.111,158,1.687,159,3.186,160,2.092,167,2.358,170,1.86,171,2.462,174,2.092,175,2.358,177,2.092,178,2.856,186,1.433,188,2.188,189,1,190,1.24,191,0.85,192,1,198,1.24,199,1,200,2.092,204,1,205,0.85,206,2.033,208,0.918,209,1,213,1,231,1.808,233,2.188,234,2.329,280,2.62,281,1.901,283,2.033,284,1.103,289,1.103,291,1.24,297,1.24,298,0.918,299,1.24,316,1.24,345,1.24,346,2.444,347,2.444,348,2.444,349,1.24,350,3.17,351,3.17,352,4.797,353,3.17,354,1.449,355,2.092,356,2.444,357,2.634,358,1.449,359,2.444,360,1.449,361,1.449,362,1.449,363,2.444,364,3.722,365,3.722,366,1.449,367,1.731,368,1.103,369,1.449,370,1.24,371,2.444,372,1.449,373,1.549,374,1.335,375,1.449,376,1,377,1.24,378,2.444,379,2.033,380,3.722,381,1.687,382,2.444,383,2.713,384,2.713,385,2.092,386,1.449,387,2.092,388,2.713,389,1.24,390,1.449,391,3.722,392,1.449,393,1.449,394,1.449,395,3.17,396,1.24,397,4.106,398,2.444,399,2.444,400,3.17,401,3.17,402,3.17,403,3.17,404,3.17,405,1.619,406,1.24,407,1.449,408,1.103,409,1.24,410,2.444,411,2.444,412,1.449,413,1.549,414,2.444,415,1.449,416,2.444,417,2.569,418,1.449,419,1.449,420,4.797,421,1.449,422,1.449,423,1.24,424,1.449,425,1.103,426,1.449,427,1.449,428,1.449,429,1.24,430,1.449,431,1.449,432,1.449,433,1.449,434,1.449,435,2.092,436,1.449,437,1.449,438,1.449]],["title/modules/AuthorizationModule.html",[118,1.38,439,2.299]],["body/modules/AuthorizationModule.html",[3,0.285,4,0.252,5,0.252,20,0.02,33,0.419,36,0.851,40,0.285,41,0.149,57,0.017,58,0.017,118,2.322,120,2.405,125,2.739,250,2.942,296,4.647,321,3.817,322,4.293,439,3.868,440,5.016,441,4.214,442,5.016]],["title/injectables/BcryptService.html",[34,0.615,285,2.504]],["body/injectables/BcryptService.html",[3,0.221,4,0.195,5,0.195,9,0.358,10,1.291,14,0.643,19,1.291,20,0.02,21,1.041,22,0.6,23,1.041,25,1.291,27,2.81,33,0.371,34,0.879,36,0.658,40,0.221,41,0.115,44,1.256,46,1.224,57,0.014,58,0.014,60,1.56,63,2.05,105,1.409,231,1.131,234,1.475,283,2.83,285,3.576,443,3.32,444,4.994,445,4.994,446,4.994,447,4.608,448,5.33,449,3.879,450,3.283,451,4.994,452,3.879,453,3.879,454,3.32,455,3.879,456,5.182,457,3.879]],["title/controllers/CloudController.html",[107,1.544,458,2.504]],["body/controllers/CloudController.html",[3,0.198,4,0.175,5,0.278,9,0.321,10,1.199,14,0.684,19,1.199,20,0.021,21,0.967,22,0.557,23,0.967,25,1.374,33,0.351,36,0.59,40,0.198,41,0.103,46,1.303,57,0.013,58,0.013,63,2.035,72,2.048,85,1.323,105,1.109,107,1.481,109,1.481,112,1.987,116,2.402,154,3.236,184,2.402,210,1.9,231,1.608,234,2.098,279,2.818,458,3.322,459,2.979,460,2.979,461,5.095,462,4.813,463,5.517,464,4.813,465,3.48,466,3.48,467,4.813,468,3.48,469,3.48,470,4.722,471,3.48,472,3.48,473,2.402,474,2.979,475,4.119,476,2.979,477,2.979,478,2.979,479,2.648,480,3.48,481,3.48,482,2.979,483,3.48,484,3.48,485,3.48,486,4.813,487,3.48,488,4.813,489,3.48,490,3.48,491,3.48,492,2.979,493,3.48,494,2.979]],["title/modules/CloudModule.html",[118,1.38,130,2.128]],["body/modules/CloudModule.html",[3,0.214,4,0.19,5,0.19,20,0.021,33,0.43,36,0.639,40,0.214,41,0.112,57,0.014,58,0.014,73,2.599,74,1.923,109,2.161,118,2.186,120,1.805,121,1.923,122,2.208,123,2.208,124,1.923,125,3.139,126,3.371,130,3.967,133,2.979,134,2.208,135,2.208,137,3.218,143,3.866,250,2.208,279,3.658,296,3.866,319,2.866,321,2.866,324,3.223,458,3.967,477,3.223,495,3.223,496,3.223,497,3.766,498,3.766,499,3.766,500,4.246,501,3.223,502,5.079,503,3.766,504,3.223,505,3.766,506,3.766,507,3.766,508,3.766,509,3.766,510,3.766,511,3.766,512,3.766,513,3.766]],["title/injectables/CloudService.html",[34,0.615,279,1.853]],["body/injectables/CloudService.html",[3,0.17,4,0.15,5,0.297,9,0.275,10,1.076,13,1.474,14,0.731,19,1.264,20,0.02,21,1.02,22,0.587,23,1.02,25,1.264,33,0.354,34,0.732,36,0.506,40,0.17,41,0.089,46,1.02,52,2.366,57,0.012,58,0.012,60,1.201,63,2.032,66,4.231,72,1.838,73,2.061,74,1.525,84,2.366,85,2.115,101,1.327,105,1.329,154,3.807,181,2.061,234,1.93,279,2.206,319,2.273,368,3.287,447,3.502,461,3.697,482,4.759,501,2.556,514,2.556,515,4.759,516,3.697,517,2.986,518,2.986,519,4.319,520,2.986,521,4.319,522,2.986,523,4.319,524,2.986,525,3.287,526,2.556,527,2.556,528,5.074,529,4.319,530,4.319,531,4.319,532,4.319,533,4.319,534,4.319,535,4.319,536,4.319,537,4.319,538,2.986,539,4.319,540,4.319,541,4.319,542,2.556,543,2.556,544,2.986,545,2.986,546,4.319,547,4.319,548,4.319,549,2.986]],["title/classes/CreateInfoDto.html",[41,0.108,550,2.504]],["body/classes/CreateInfoDto.html",[3,0.209,4,0.185,5,0.185,9,0.339,14,0.815,20,0.02,21,1.141,22,0.761,23,1.375,30,1.839,33,0.318,40,0.209,41,0.149,44,1.619,57,0.014,58,0.014,101,1.536,102,2.283,105,1.375,112,2.368,141,1.479,550,3.451,551,1.191,552,5.118,553,2.8,554,3.92,555,4.862,556,4.862,557,3.679,558,3.679,559,3.599,560,3.679,561,4.638,562,3.679,563,3.679,564,3.679,565,4.28,566,3.679,567,3.679,568,5,569,4.165,570,3.679,571,2.539,572,1.566,573,2.539,574,3.149,575,1.66,576,3.679,577,3.149,578,3.149]],["title/classes/CreateUserDto.html",[41,0.108,374,1.981]],["body/classes/CreateUserDto.html",[3,0.215,4,0.19,5,0.19,9,0.348,14,0.797,20,0.02,21,1.157,22,0.744,23,1.238,26,3.224,33,0.366,40,0.215,41,0.151,44,1.648,57,0.014,58,0.014,101,1.563,102,2.314,105,1.383,112,2.316,141,1.518,374,2.779,379,3.143,551,1.223,552,5.041,559,3.224,561,3.873,569,3.647,572,1.607,575,1.704,579,2.874,580,4.381,581,4.381,582,2.874,583,3.777,584,3.777,585,3.777,586,2.874,587,3.777,588,3.777,589,3.777,590,3.777,591,3.777,592,5.089,593,3.777,594,2.607,595,3.885,596,1.811,597,3.777,598,2.607,599,3.777]],["title/injectables/HashingService.html",[34,0.615,283,1.981]],["body/injectables/HashingService.html",[3,0.241,4,0.213,5,0.213,9,0.391,10,1.368,14,0.681,19,1.368,20,0.02,21,1.104,22,0.635,23,1.104,25,1.368,27,2.908,33,0.27,34,0.931,36,0.719,40,0.241,41,0.126,57,0.015,58,0.015,60,1.704,105,1.434,283,2.999,444,4.701,445,4.701,446,4.701,447,4.722,448,5.215,450,3.48,451,4.701,600,3.627,601,6.964,602,4.238,603,4.238]],["title/modules/IamModule.html",[118,1.38,131,2.299]],["body/modules/IamModule.html",[3,0.257,4,0.228,5,0.228,20,0.02,33,0.4,36,0.767,40,0.257,41,0.134,57,0.016,58,0.016,109,1.924,118,2.389,120,2.168,121,2.31,122,2.652,123,2.652,124,2.31,125,3.126,126,2.652,131,4.531,133,3.357,134,2.652,135,2.652,137,3.627,276,4.409,439,4.409,604,3.87,605,3.87,606,4.521,607,4.521,608,4.521]],["title/classes/InfoEntity.html",[41,0.108,609,2.761]],["body/classes/InfoEntity.html",[3,0.328,4,0.162,5,0.162,9,0.297,14,0.847,20,0.02,21,1.065,22,0.791,33,0.337,40,0.184,41,0.136,44,1.478,57,0.012,58,0.012,101,1.402,102,2.13,105,1.402,106,1.942,112,2.461,367,2.893,551,1.044,554,3.656,555,4.534,556,4.534,559,2.892,561,4.031,565,3.907,569,3.356,571,2.227,572,1.373,573,2.227,574,2.761,575,1.456,577,2.761,578,2.761,582,2.455,586,2.455,594,2.227,595,4.007,596,1.547,598,2.227,609,3.474,610,2.761,611,5.297,612,3.656,613,3.656,614,4.565,615,3.226,616,3.226,617,3.226,618,3.226,619,3.975,620,5.202,621,3.226,622,3.226,623,3.226,624,3.226,625,3.226,626,3.226,627,3.226,628,3.226,629,3.226,630,4.565]],["title/classes/PositionEntity.html",[41,0.108,631,2.761]],["body/classes/PositionEntity.html",[3,0.254,4,0.224,5,0.224,9,0.411,14,0.841,20,0.02,21,1.254,22,0.785,33,0.284,40,0.254,41,0.132,44,1.837,57,0.015,58,0.015,101,1.743,105,1.14,106,2.796,367,3.408,405,3.188,551,1.443,572,1.897,612,4.307,613,4.307,619,4.534,631,4.318,632,3.816,633,6.241,634,4.459,635,4.459,636,4.459,637,4.459,638,4.459]],["title/classes/RefreshTokenDto.html",[41,0.108,167,2.299]],["body/classes/RefreshTokenDto.html",[3,0.284,4,0.252,5,0.252,9,0.461,14,0.62,20,0.02,22,0.578,33,0.318,40,0.284,41,0.181,57,0.017,58,0.017,101,1.871,105,1.224,112,1.8,157,4.535,167,3.859,199,4.204,551,1.618,575,2.254,639,5.214,640,3.803,641,5.625,642,4.277]],["title/injectables/RefreshTokenIdsStorage.html",[34,0.615,280,1.981]],["body/injectables/RefreshTokenIdsStorage.html",[3,0.157,4,0.139,5,0.139,9,0.255,10,1.018,14,0.768,19,1.336,20,0.02,21,1.078,22,0.662,23,1.078,25,1.491,27,2.701,30,0.896,33,0.26,34,0.693,36,0.469,40,0.232,41,0.121,42,1.511,44,0.896,46,0.965,48,1.511,52,1.739,55,3.358,56,1.91,57,0.011,58,0.011,60,1.113,63,1.993,64,3.109,84,2.547,101,1.255,105,1.304,106,2.883,231,0.807,234,1.847,280,2.231,298,4.027,309,1.91,367,3.124,373,1.753,405,1.414,417,1.91,429,3.497,473,2.82,643,4.837,644,2.106,645,5.124,646,4.085,647,4.085,648,5.124,649,5.124,650,3.497,651,2.767,652,3.497,653,5.44,654,2.767,655,3.497,656,2.767,657,2.767,658,2.767,659,3.497,660,2.767,661,2.767,662,2.369,663,2.369,664,2.369,665,2.369,666,2.369,667,2.369,668,4.157,669,2.369,670,2.369,671,2.369]],["title/classes/RefreshTokenIdsStorageError.html",[41,0.108,373,2.299]],["body/classes/RefreshTokenIdsStorageError.html",[3,0.212,4,0.188,5,0.188,13,1.274,14,0.463,19,0.93,20,0.02,21,0.75,22,0.432,23,0.75,27,2.582,30,1.208,33,0.321,34,0.856,36,0.633,40,0.287,41,0.15,42,2.757,44,1.208,46,1.193,48,2.038,52,2.149,55,2.939,56,2.576,57,0.014,58,0.014,63,1.757,84,2.149,105,1.327,106,2.609,231,1.088,234,2.176,280,2.038,298,3.199,309,2.576,367,2.038,373,3.199,405,1.907,417,3.485,551,1.208,643,3.843,644,2.841,645,4.898,648,4.898,649,4.898,650,3.195,652,3.195,653,5.247,655,3.195,659,3.195,662,4.322,663,3.195,664,3.195,665,3.195,666,3.195,667,3.195,668,4.898,669,3.195,670,3.195,671,3.195,672,3.733,673,3.733]],["title/injectables/RefreshTokenStrategy.html",[34,0.615,674,2.761]],["body/injectables/RefreshTokenStrategy.html",[3,0.228,4,0.201,5,0.201,9,0.369,10,1.317,13,2.022,14,0.656,19,0.996,20,0.02,21,0.804,22,0.463,23,0.804,25,0.996,33,0.401,34,0.897,36,0.678,38,2.346,40,0.228,41,0.119,42,2.185,45,3.044,46,0.945,55,1.918,57,0.014,58,0.014,60,1.608,62,3.044,63,1.82,64,4.025,71,4.35,72,1.702,75,4.527,76,3.424,77,4.527,78,2.534,79,4.025,86,3.424,87,3.424,92,1.805,94,3.424,157,3.65,210,2.185,231,1.166,435,4.527,674,4.025,675,5.071,676,5.071,677,4,678,5.288,679,4.524,680,4,681,4,682,4,683,3.424]],["title/classes/RoleEntity.html",[41,0.108,684,1.853]],["body/classes/RoleEntity.html",[3,0.253,4,0.224,5,0.224,9,0.41,13,1.517,14,0.814,19,1.107,20,0.02,21,1.392,22,0.759,23,0.893,33,0.283,40,0.253,41,0.132,44,1.833,57,0.015,58,0.015,101,1.739,105,1.415,106,2.409,405,3.183,551,1.438,572,1.891,684,2.892,685,3.803,686,6.231,687,4.742,688,5.662,689,5.662,690,4.443,691,4.443,692,4.443]],["title/guards/RolesGuard.html",[0,2.299,441,2.504]],["body/guards/RolesGuard.html",[2,2.338,3,0.21,4,0.186,5,0.186,9,0.34,10,1.248,11,4.403,13,1.26,14,0.621,16,2.547,17,3.866,19,1.248,20,0.021,21,1.007,22,0.58,23,1.007,24,3.458,25,0.919,26,3.174,27,2.26,28,4.329,30,1.622,33,0.428,34,0.85,36,0.626,39,2.547,40,0.21,41,0.11,44,1.195,46,1.184,57,0.014,58,0.014,85,1.403,92,1.665,97,2.26,99,2.808,116,2.547,205,2.164,231,1.46,245,3.158,246,5.631,250,2.164,257,3.158,258,3.158,259,3.158,441,3.458,684,1.885,693,3.158,694,3.69,695,3.69,696,3.69,697,3.813,698,3.69,699,3.813,700,3.69,701,5.01,702,3.158,703,3.69,704,3.69]],["title/controllers/SessionAuthenticationController.html",[107,1.544,304,2.504]],["body/controllers/SessionAuthenticationController.html",[3,0.19,4,0.168,5,0.168,9,0.307,10,1.164,13,1.139,14,0.579,19,1.164,20,0.02,21,0.939,22,0.541,23,0.939,25,1.164,30,1.892,33,0.432,36,0.566,40,0.19,41,0.099,46,0.788,57,0.013,58,0.013,63,1.959,72,1.419,84,1.419,85,1.268,97,2.637,107,1.419,109,1.419,112,1.683,150,2.855,154,1.956,155,3.999,158,3.225,163,2.113,171,3.576,172,2.855,181,3.225,182,2.855,183,2.855,184,2.302,188,2.302,191,1.956,192,2.302,193,2.302,194,2.538,195,2.113,196,2.538,197,2.538,201,2.855,202,2.113,203,2.538,204,2.302,205,1.956,209,2.302,210,1.821,214,2.855,218,2.855,219,2.855,231,0.972,234,1.777,301,2.96,302,2.855,303,4.034,304,3.225,307,2.302,413,2.113,679,4.402,705,4.617,706,2.855,707,4.673,708,3.335,709,4.673,710,3.335,711,3.335,712,3.335,713,3.335,714,3.335,715,3.335,716,3.335,717,3.335,718,3.335,719,3.335,720,3.335,721,3.335]],["title/injectables/SessionAuthenticationService.html",[34,0.615,301,2.299]],["body/injectables/SessionAuthenticationService.html",[3,0.191,4,0.169,5,0.169,9,0.31,10,1.17,13,1.604,14,0.672,19,1.349,20,0.02,21,1.088,22,0.627,23,1.088,25,1.17,27,2.12,30,1.899,33,0.393,34,0.797,35,2.32,36,0.57,40,0.191,41,0.1,46,1.11,48,2.566,52,1.999,57,0.013,58,0.013,60,1.351,63,1.964,72,1.43,84,2.626,85,1.278,102,1.889,105,1.088,140,1.836,141,1.351,158,3.243,170,3.576,171,3.37,188,2.32,191,1.971,192,2.32,231,1.369,234,2.06,283,3.203,284,2.558,301,2.977,303,4.047,317,3.716,349,2.877,355,4.021,370,2.877,379,1.836,383,2.877,384,2.877,385,4.021,387,2.877,388,2.877,389,2.877,572,1.43,722,5.02,723,2.558,724,4.698,725,5.416,726,3.361,727,4.698,728,3.361,729,3.361,730,3.361,731,3.361,732,3.361,733,3.361]],["title/guards/SessionGuard.html",[0,2.299,734,2.761]],["body/guards/SessionGuard.html",[2,2.845,3,0.255,4,0.226,5,0.226,9,0.414,10,1.42,11,4.692,14,0.557,16,3.099,17,4.173,19,1.118,20,0.02,21,0.902,22,0.52,23,0.902,24,3.933,25,1.118,26,3.611,27,2.572,28,4.765,33,0.363,34,0.967,36,0.761,39,3.099,40,0.255,41,0.133,44,1.453,46,1.061,57,0.016,58,0.016,231,1.309,679,3.099,702,3.843,734,4.337,735,3.843,736,4.49,737,4.49]],["title/classes/SettingEntity.html",[41,0.108,738,2.761]],["body/classes/SettingEntity.html",[3,0.212,4,0.188,5,0.188,9,0.344,14,0.837,20,0.02,22,0.781,33,0.364,40,0.212,41,0.15,44,1.635,57,0.014,58,0.014,101,1.551,106,2.149,112,2.307,367,3.125,381,3.949,551,1.208,571,2.576,572,1.588,573,2.576,575,1.684,595,3.872,596,1.79,612,3.949,613,3.949,619,4.231,738,3.843,739,3.195,740,5.722,741,5.722,742,5.722,743,5.722,744,3.733,745,5.049,746,3.733,747,3.733,748,5.049,749,3.733,750,3.733,751,5.049,752,3.733,753,3.733,754,5.049,755,3.733,756,3.733,757,3.733,758,3.733,759,3.733,760,5.049,761,3.733,762,3.733,763,3.733,764,3.733]],["title/classes/SignInDto.html",[41,0.108,171,1.981]],["body/classes/SignInDto.html",[3,0.243,4,0.215,5,0.215,9,0.393,14,0.758,20,0.02,22,0.707,23,1.108,33,0.351,40,0.243,41,0.164,57,0.015,58,0.015,101,1.694,102,2.457,105,1.377,112,2.202,171,3.012,191,3.79,379,3.338,551,1.381,559,3.495,569,3.495,575,1.925,582,3.247,586,3.247,594,2.944,595,3.79,596,2.045,598,2.944,765,4.46,766,3.651,767,6.113,768,4.266,769,4.266,770,4.266,771,4.266,772,4.266,773,4.266]],["title/classes/SignInWithTokenDto.html",[41,0.108,175,2.299]],["body/classes/SignInWithTokenDto.html",[3,0.284,4,0.252,5,0.252,9,0.461,14,0.62,20,0.02,22,0.578,33,0.318,40,0.284,41,0.181,57,0.017,58,0.017,101,1.871,105,1.224,112,1.8,175,3.859,213,4.204,397,5.625,551,1.618,575,2.254,640,3.803,641,5.625,642,4.277,765,4.204]],["title/classes/SignUpDto.html",[41,0.108,178,2.299]],["body/classes/SignUpDto.html",[3,0.254,4,0.224,5,0.224,9,0.411,14,0.704,20,0.02,22,0.657,33,0.361,40,0.254,41,0.169,57,0.015,58,0.015,101,1.743,102,2.509,105,1.32,112,2.044,178,3.595,189,4.307,379,3.408,551,1.443,559,3.595,575,2.012,594,3.077,595,3.66,596,2.138,598,3.077,765,4.307,774,3.816,775,5.674,776,4.459,777,4.459,778,4.459,779,4.459,780,5.674,781,4.459,782,4.459]],["title/injectables/TfaAuthenticationService.html",[34,0.615,206,1.981]],["body/injectables/TfaAuthenticationService.html",[3,0.173,4,0.153,5,0.153,9,0.281,10,1.09,13,1.494,14,0.695,19,1.397,20,0.021,21,1.127,22,0.649,23,1.127,25,1.277,33,0.357,34,0.742,36,0.516,40,0.173,41,0.09,46,1.034,55,1.459,57,0.012,58,0.012,60,1.223,63,1.901,72,1.295,74,1.554,84,1.863,85,1.665,92,1.975,102,2.062,105,1.42,140,1.662,141,1.223,206,2.391,208,3.765,231,1.635,232,3.747,233,4.714,234,1.665,317,4.04,396,3.747,405,2.619,450,1.928,500,4.271,580,2.316,581,2.316,723,2.316,783,5.086,784,4.378,785,4.378,786,4.378,787,3.043,788,3.043,789,4.378,790,3.043,791,4.378,792,3.043,793,4.378,794,3.043,795,3.043,796,2.604,797,3.043,798,4.378,799,3.043,800,3.043,801,3.043,802,3.043,803,3.043,804,2.604,805,3.043]],["title/classes/UserEntity.html",[41,0.108,357,2.299]],["body/classes/UserEntity.html",[3,0.186,4,0.164,5,0.164,9,0.301,14,0.838,20,0.02,22,0.782,26,2.918,30,1.727,33,0.368,40,0.186,41,0.137,44,1.491,57,0.013,58,0.013,89,3.505,92,1.474,101,1.415,102,2.144,103,2.913,105,1.273,106,1.96,112,2.434,357,2.918,379,2.913,405,2.725,409,3.942,551,1.058,569,2.918,571,2.255,572,1.39,573,2.255,575,1.474,580,4.059,581,4.059,595,4.134,596,1.566,612,3.681,613,3.681,619,3.997,620,5.227,684,2.725,806,2.797,807,5.334,808,3.267,809,4.606,810,3.267,811,3.267,812,3.267,813,3.267,814,3.267,815,3.267,816,3.267,817,3.267,818,4.606,819,3.267,820,3.267,821,3.267,822,3.267,823,3.267,824,3.267]],["title/classes/UserSerializer.html",[41,0.108,312,2.504]],["body/classes/UserSerializer.html",[3,0.297,4,0.158,5,0.158,9,0.289,10,1.115,13,1.781,14,0.705,19,1.115,20,0.02,21,0.9,22,0.518,23,0.9,25,1.3,30,2.024,32,4.869,33,0.362,38,1.841,40,0.179,41,0.093,44,1.449,46,0.742,57,0.012,58,0.012,63,1.603,71,3.926,78,3.306,97,3.021,102,1.262,103,1.714,104,2.389,204,2.167,205,1.841,231,0.915,307,3.09,312,3.09,314,4.577,333,2.687,357,3.811,377,2.687,413,1.989,417,3.09,425,2.389,473,4.151,551,1.016,684,1.604,825,5.148,826,2.687,827,5.218,828,5.218,829,5.689,830,5.218,831,3.139,832,3.139,833,6.792,834,3.139,835,3.139,836,3.832,837,3.139,838,3.139,839,3.139,840,3.139,841,3.139,842,3.139,843,3.139,844,3.139,845,3.139,846,3.139,847,4.477,848,4.477,849,3.139,850,3.139,851,3.139,852,3.139]],["title/controllers/UsersController.html",[107,1.544,853,2.504]],["body/controllers/UsersController.html",[3,0.195,4,0.081,5,0.2,9,0.149,10,0.665,14,0.717,19,1.404,20,0.021,21,1.133,22,0.684,23,1.133,25,1.44,30,2.101,33,0.368,36,0.273,40,0.092,41,0.048,46,1.423,52,1.456,57,0.007,58,0.007,63,2.097,72,2.326,85,0.613,92,1.205,97,2.996,103,0.88,105,0.687,106,1.136,107,0.686,109,0.686,112,2.082,116,1.112,141,0.648,154,0.945,163,2.795,181,3.044,184,2.361,202,1.021,203,1.226,205,0.945,210,0.88,231,1.16,234,1.301,274,3.406,281,1.747,374,2.597,376,1.843,379,0.88,381,1.843,405,2.879,406,1.379,408,1.226,413,1.021,450,2.167,470,2.928,474,1.379,475,2.286,476,1.379,478,1.379,479,1.226,492,1.379,494,1.379,525,2.032,554,1.112,572,0.686,684,0.823,853,1.843,854,1.379,855,1.611,856,1.843,857,3.406,858,2.928,859,2.671,860,3.406,861,2.671,862,2.286,863,2.928,864,4.07,865,4.311,866,2.928,867,1.379,868,1.611,869,1.611,870,1.611,871,1.611,872,1.379,873,2.286,874,2.671,875,1.611,876,2.286,877,1.611,878,2.671,879,1.611,880,1.611,881,1.611,882,1.611,883,2.671,884,1.611,885,1.611,886,2.671,887,1.611,888,1.611,889,3.979,890,2.521,891,3.42,892,1.611,893,1.611,894,2.521,895,2.671,896,1.611,897,1.611,898,2.928,899,2.671,900,1.611,901,1.611,902,1.611,903,1.611,904,1.611,905,2.671,906,2.671,907,2.671,908,1.379,909,1.379,910,2.286,911,1.611,912,1.611,913,1.226,914,1.611,915,1.611,916,1.611,917,1.611,918,1.611,919,1.611,920,1.611,921,1.611,922,1.379,923,1.379,924,1.379,925,1.379,926,1.379,927,1.379,928,1.379,929,1.611,930,1.611,931,1.611,932,5.036,933,1.611,934,2.671,935,2.671,936,1.611,937,1.611,938,1.611,939,1.611,940,1.611,941,1.611,942,1.611,943,1.611,944,1.611,945,1.611,946,1.611,947,1.611,948,1.611,949,1.611,950,1.611,951,1.611,952,1.611,953,1.611,954,1.611,955,1.611,956,1.611]],["title/modules/UsersModule.html",[118,1.38,132,2.299]],["body/modules/UsersModule.html",[3,0.244,4,0.216,5,0.216,20,0.02,33,0.427,36,0.728,40,0.244,41,0.128,57,0.015,58,0.015,109,2.357,118,2.332,120,2.059,121,2.194,122,2.519,123,2.519,124,2.194,125,3.349,126,2.519,130,4.027,132,4.485,133,3.249,134,2.519,135,2.519,137,3.51,140,2.345,141,1.727,145,3.676,281,3.507,317,3.51,853,4.232,908,3.676,957,4.295,958,4.295,959,4.295,960,4.295,961,4.295]],["title/injectables/UsersService.html",[34,0.615,281,1.853]],["body/injectables/UsersService.html",[3,0.261,4,0.087,5,0.087,9,0.16,10,0.706,13,0.967,14,0.733,19,1.473,20,0.021,21,1.189,22,0.762,23,1.189,25,1.438,27,2.853,30,1.164,33,0.331,34,0.48,35,1.194,36,0.293,40,0.098,41,0.051,46,1.364,48,0.945,52,0.736,57,0.008,58,0.008,60,0.696,63,1.724,72,0.736,84,1.951,85,1.077,92,1.623,102,1.671,105,0.989,106,1.205,140,0.945,141,1.446,154,1.661,231,1.435,234,1.581,279,2.654,281,1.447,317,3.119,318,1.481,367,1.547,368,2.156,374,2.688,376,1.955,381,1.955,413,1.096,423,1.481,425,2.156,447,2.482,450,4.097,460,1.481,473,1.194,516,1.481,525,2.737,554,1.194,572,0.736,804,3.557,856,1.955,857,2.425,858,2.425,860,2.425,862,2.425,863,4.214,864,2.425,865,2.425,866,3.078,867,2.425,872,2.425,873,4.642,876,4.642,890,1.795,894,2.905,898,1.481,909,1.481,910,2.425,913,1.317,922,3.078,923,3.078,924,3.078,925,5.258,926,1.481,927,3.078,928,1.481,962,1.481,963,2.833,964,1.73,965,1.73,966,2.833,967,1.73,968,1.73,969,2.833,970,5.197,971,1.73,972,6.036,973,1.73,974,2.833,975,1.73,976,2.833,977,1.73,978,2.833,979,1.73,980,2.833,981,1.73,982,2.833,983,1.73,984,1.73,985,4.156,986,1.73,987,1.73,988,1.481,989,1.73,990,1.73,991,1.73,992,1.73,993,1.73,994,2.833,995,1.73,996,1.73,997,3.596,998,1.73,999,1.73,1000,1.73,1001,1.73,1002,1.73,1003,1.73]],["title/coverage.html",[1004,3.769]],["body/coverage.html",[0,3.085,1,1.45,5,0.115,6,1.959,7,2.242,8,1.959,20,0.02,22,0.265,30,0.741,34,1.085,41,0.2,52,0.974,55,2.334,57,0.01,58,0.01,59,1.45,61,1.959,62,2.693,96,1.58,97,1.033,99,1.742,100,1.959,103,1.25,107,2.24,108,1.58,110,1.959,114,1.342,124,1.169,141,0.92,148,1.959,152,1.58,153,1.959,163,1.45,167,1.45,171,1.25,175,1.45,178,1.45,186,1.342,189,1.58,191,1.342,193,1.58,199,1.58,202,1.45,206,1.25,208,1.45,213,1.58,240,1.58,241,1.959,251,1.742,279,1.169,280,1.25,281,1.169,283,1.25,285,1.58,298,2.242,301,1.45,303,2.443,304,1.58,312,1.58,314,1.742,345,1.959,357,1.45,373,1.45,374,1.25,441,1.58,443,1.959,458,1.58,459,1.959,500,1.58,514,1.959,550,1.58,552,2.693,553,2.693,579,2.693,600,1.959,609,1.742,610,1.959,631,1.742,632,1.959,639,1.959,640,2.693,643,2.693,644,2.693,674,1.742,675,1.959,676,1.959,684,1.169,685,1.959,693,1.959,697,1.742,699,1.742,705,1.959,706,1.959,722,1.959,723,2.693,734,1.742,735,1.959,738,1.742,739,1.959,765,2.986,766,1.959,774,1.959,783,1.959,806,1.959,825,1.959,826,1.959,836,4.168,853,1.58,854,1.959,890,1.45,894,1.45,962,1.959,988,6.364,1004,1.742,1005,2.289,1006,2.289,1007,2.289,1008,4.007,1009,1.959,1010,6.722,1011,1.959,1012,1.959,1013,6.154,1014,1.959,1015,5.567,1016,5.265,1017,4.869,1018,1.959,1019,5.804,1020,1.959,1021,1.959,1022,3.029,1023,4.869,1024,4.327,1025,3.029,1026,1.959,1027,1.959,1028,2.289,1029,2.693,1030,2.289,1031,2.289,1032,3.539,1033,2.289,1034,2.289]],["title/dependencies.html",[121,2.229,1035,2.593]],["body/dependencies.html",[20,0.021,36,0.726,38,2.51,39,2.954,41,0.164,57,0.015,58,0.015,74,2.186,78,3.502,79,3.257,121,2.186,140,2.337,141,1.721,210,3.019,212,3.664,250,2.51,289,3.257,307,2.954,308,3.664,309,2.954,311,3.664,454,3.664,479,3.257,504,3.664,515,3.664,542,3.664,543,3.664,572,1.821,575,1.931,596,2.052,796,3.664,1036,4.28,1037,6.122,1038,4.28,1039,4.28,1040,4.28,1041,4.28,1042,4.28,1043,4.28,1044,4.28,1045,4.28,1046,4.28,1047,4.28,1048,4.28,1049,4.28,1050,4.28,1051,4.28,1052,4.28,1053,4.28,1054,4.28,1055,4.28,1056,4.28,1057,4.28,1058,4.28,1059,4.28]],["title/miscellaneous/enumerations.html",[1060,1.777,1061,3.735]],["body/miscellaneous/enumerations.html",[9,0.513,20,0.018,57,0.018,58,0.018,195,4.113,1060,3.26,1061,4.758,1062,5.559,1063,6.492,1064,5.559,1065,5.559,1066,5.559]],["title/miscellaneous/functions.html",[1060,1.777,1067,3.735]],["body/miscellaneous/functions.html",[9,0.491,20,0.017,57,0.017,58,0.017,124,3.451,1008,4.055,1009,5.782,1011,5.782,1012,5.782,1027,4.561,1060,3.125,1067,4.561,1068,5.328,1069,5.782]],["title/index.html",[9,0.279,1070,3.029,1071,3.029]],["body/index.html",[4,0.207,20,0.02,57,0.015,58,0.015,93,3.523,687,3.132,1004,3.132,1072,4.116,1073,4.116,1074,5.388,1075,4.116,1076,4.116,1077,4.116,1078,4.116,1079,4.116,1080,4.116,1081,6.008,1082,4.116,1083,4.116,1084,4.116,1085,4.116,1086,6.916,1087,4.116,1088,4.116,1089,4.116,1090,6.788,1091,4.116,1092,4.116,1093,5.388,1094,4.116,1095,4.116,1096,4.116,1097,5.388,1098,5.388,1099,4.116,1100,4.116,1101,4.116,1102,4.612,1103,5.388,1104,4.116,1105,4.116,1106,4.116,1107,4.116,1108,4.116,1109,3.523,1110,4.116,1111,4.116,1112,4.116,1113,4.116,1114,4.116,1115,4.116,1116,4.116,1117,4.116,1118,4.116,1119,4.116,1120,3.523,1121,4.116,1122,4.116,1123,4.116,1124,4.116,1125,4.116,1126,4.116,1127,3.523]],["title/modules.html",[120,2.375]],["body/modules.html",[20,0.017,57,0.017,58,0.017,119,3.545,120,2.463,130,3.012,131,3.254,132,3.254,276,3.254,439,3.254,1109,6.049,1128,7.068,1129,7.068,1130,7.18,1131,5.136,1132,5.136]],["title/overview.html",[1133,4.239]],["body/overview.html",[2,2.358,20,0.02,57,0.014,58,0.014,59,3.62,60,1.496,96,2.569,109,1.584,114,3.351,118,1.416,119,4.852,120,1.784,121,1.901,122,2.183,123,2.183,124,1.901,125,2.033,126,2.183,127,3.186,128,3.186,129,3.186,130,3.956,131,4.273,132,4.273,133,2.955,134,2.183,135,2.183,186,3.351,206,3.12,276,4.606,277,3.186,278,3.186,279,3.505,280,3.12,281,3.128,439,3.62,495,3.186,496,3.186,551,1.205,604,3.186,605,3.186,683,3.186,1133,3.186,1134,3.722,1135,3.722,1136,3.722,1137,3.722,1138,3.722]],["title/properties.html",[101,1.34,1035,2.593]],["body/properties.html",[20,0.02,57,0.017,58,0.017,101,1.671,687,4.141,1102,4.657,1120,4.657,1127,4.657,1139,5.441,1140,5.441,1141,5.441,1142,5.441,1143,5.441,1144,5.441,1145,5.441]],["title/classes/updateInfoDto.html",[41,0.108,894,2.299]],["body/classes/updateInfoDto.html",[3,0.299,4,0.265,5,0.265,20,0.02,33,0.4,40,0.299,41,0.156,42,2.874,57,0.017,58,0.017,550,3.632,551,1.704,553,4.005,596,2.523,856,3.632,894,3.982,913,4.005,1029,4.005,1146,4.505,1147,5.263]],["title/classes/updateUserDto.html",[41,0.108,890,2.299]],["body/classes/updateUserDto.html",[3,0.299,4,0.265,5,0.265,20,0.02,33,0.4,40,0.299,41,0.156,42,2.874,57,0.017,58,0.017,374,2.874,376,3.632,551,1.704,579,4.005,596,2.523,856,3.632,890,3.982,1029,4.005,1146,4.505,1148,5.263]],["title/miscellaneous/variables.html",[1060,1.777,1149,3.735]],["body/miscellaneous/variables.html",[9,0.341,17,2.345,20,0.02,22,0.659,30,1.978,46,0.874,52,2.136,57,0.014,58,0.014,63,1.137,97,2.265,103,3.487,105,1.145,141,2.018,163,3.18,193,3.464,195,3.18,202,2.345,231,1.463,251,3.82,256,4.297,408,3.82,500,3.932,526,5.945,527,5.945,679,2.554,684,1.89,697,3.82,699,3.82,1008,2.816,1014,4.297,1018,3.167,1020,3.167,1021,4.297,1022,3.167,1025,3.167,1026,3.167,1060,2.17,1069,4.297,1149,3.167,1150,3.7,1151,5.02,1152,3.7,1153,3.7,1154,5.02,1155,3.7,1156,5.02,1157,3.7,1158,3.7,1159,3.7,1160,3.7,1161,3.7,1162,3.7,1163,3.7,1164,3.7]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/AuthorizationModule.html":{},"injectables/BcryptService.html":{},"controllers/CloudController.html":{},"modules/CloudModule.html":{},"injectables/CloudService.html":{},"classes/CreateInfoDto.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"modules/IamModule.html":{},"classes/InfoEntity.html":{},"classes/PositionEntity.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/RoleEntity.html":{},"guards/RolesGuard.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SettingEntity.html":{},"classes/SignInDto.html":{},"classes/SignInWithTokenDto.html":{},"classes/SignUpDto.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"classes/updateInfoDto.html":{},"classes/updateUserDto.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":988,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["0.1.13",{"_index":1058,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":1047,"title":{},"body":{"dependencies.html":{}}}],["0.22.0",{"_index":1051,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1046,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1053,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1010,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1031,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1030,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1032,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1015,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1019,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1016,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1023,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1017,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1028,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1024,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":683,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{},"overview.html":{}}}],["1.0.0",{"_index":1140,"title":{},"body":{"properties.html":{}}}],["1.17.3",{"_index":1049,"title":{},"body":{"dependencies.html":{}}}],["1.5.3",{"_index":1055,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":512,"title":{},"body":{"modules/CloudModule.html":{}}}],["10.0.2",{"_index":1040,"title":{},"body":{"dependencies.html":{}}}],["10.1.1",{"_index":1039,"title":{},"body":{"dependencies.html":{}}}],["10.2.7",{"_index":1037,"title":{},"body":{"dependencies.html":{}}}],["1000000",{"_index":952,"title":{},"body":{"controllers/UsersController.html":{}}}],["11",{"_index":1136,"title":{},"body":{"overview.html":{}}}],["12.0.1",{"_index":1052,"title":{},"body":{"dependencies.html":{}}}],["12345678",{"_index":782,"title":{},"body":{"classes/SignUpDto.html":{}}}],["12345678'})@minlength(8",{"_index":778,"title":{},"body":{"classes/SignUpDto.html":{}}}],["15",{"_index":1137,"title":{},"body":{"overview.html":{}}}],["3.1.1",{"_index":1038,"title":{},"body":{"dependencies.html":{}}}],["3.429.0",{"_index":1036,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":1138,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":1054,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":1135,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":1042,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":1044,"title":{},"body":{"dependencies.html":{}}}],["5.3.2",{"_index":1050,"title":{},"body":{"dependencies.html":{}}}],["5.4.2",{"_index":1043,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":1134,"title":{},"body":{"overview.html":{}}}],["6.1.3",{"_index":1048,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":509,"title":{},"body":{"modules/CloudModule.html":{}}}],["7.1.13",{"_index":1041,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1059,"title":{},"body":{"dependencies.html":{}}}],["abc@gmail.com",{"_index":781,"title":{},"body":{"classes/SignUpDto.html":{}}}],["abc@gmail.com'})@isemail",{"_index":776,"title":{},"body":{"classes/SignUpDto.html":{}}}],["abstract",{"_index":601,"title":{},"body":{"injectables/HashingService.html":{}}}],["access",{"_index":54,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["accesskeyid",{"_index":534,"title":{},"body":{"injectables/CloudService.html":{}}}],["accesstoken",{"_index":397,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/SignInWithTokenDto.html":{}}}],["accesstokenguard",{"_index":1,"title":{"guards/AccessTokenGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{}}}],["accesstokenstrategy",{"_index":59,"title":{"injectables/AccessTokenStrategy.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{},"overview.html":{}}}],["activeuser",{"_index":163,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["activeuser.email",{"_index":236,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["activeuserdata",{"_index":97,"title":{"interfaces/ActiveUserData.html":{}},"body":{"interfaces/ActiveUserData.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"guards/RolesGuard.html":{},"controllers/SessionAuthenticationController.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["address",{"_index":611,"title":{},"body":{"classes/InfoEntity.html":{}}}],["already",{"_index":410,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["amazing",{"_index":1110,"title":{},"body":{"index.html":{}}}],["apiproperty",{"_index":595,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/InfoEntity.html":{},"classes/SettingEntity.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/UserEntity.html":{}}}],["apiproperty()@isemail",{"_index":582,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/InfoEntity.html":{},"classes/SignInDto.html":{}}}],["apiproperty()@isenum($enums.deparment",{"_index":810,"title":{},"body":{"classes/UserEntity.html":{}}}],["apiproperty()@isenum($enums.languagesetting",{"_index":746,"title":{},"body":{"classes/SettingEntity.html":{}}}],["apiproperty()@isenum($enums.layoutsetting",{"_index":749,"title":{},"body":{"classes/SettingEntity.html":{}}}],["apiproperty()@isenum($enums.schemesetting",{"_index":752,"title":{},"body":{"classes/SettingEntity.html":{}}}],["apiproperty()@isenum($enums.themesetting",{"_index":755,"title":{},"body":{"classes/SettingEntity.html":{}}}],["apiproperty()@isenum($enums.userstatus",{"_index":626,"title":{},"body":{"classes/InfoEntity.html":{}}}],["apiproperty()@ishash('sha512",{"_index":588,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@isint",{"_index":758,"title":{},"body":{"classes/SettingEntity.html":{}}}],["apiproperty()@isoptional()@isboolean",{"_index":584,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@isoptional()@isphonenumber('vn",{"_index":624,"title":{},"body":{"classes/InfoEntity.html":{}}}],["apiproperty()@isoptional()@isstring",{"_index":590,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@isoptional()@isurl",{"_index":617,"title":{},"body":{"classes/InfoEntity.html":{}}}],["apiproperty()@isoptional()@length(6",{"_index":770,"title":{},"body":{"classes/SignInDto.html":{}}}],["apiproperty()@isstring",{"_index":614,"title":{},"body":{"classes/InfoEntity.html":{}}}],["apiproperty()@minlength(8",{"_index":586,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/InfoEntity.html":{},"classes/SignInDto.html":{}}}],["apiproperty({example",{"_index":775,"title":{},"body":{"classes/SignUpDto.html":{}}}],["apiproperty({required",{"_index":817,"title":{},"body":{"classes/UserEntity.html":{}}}],["app",{"_index":1088,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":115,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":296,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/AuthorizationModule.html":{},"modules/CloudModule.html":{}}}],["appcontroller",{"_index":108,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":1080,"title":{},"body":{"index.html":{}}}],["apply",{"_index":332,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["appmodule",{"_index":119,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appname",{"_index":798,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["appservice",{"_index":114,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["arguments",{"_index":51,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["async",{"_index":63,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"controllers/CloudController.html":{},"injectables/CloudService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["audience",{"_index":401,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["auth",{"_index":193,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth(authtype.bearer",{"_index":229,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["auth(authtype.none",{"_index":214,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{}}}],["auth_type_key",{"_index":251,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authenticated",{"_index":847,"title":{},"body":{"classes/UserSerializer.html":{}}}],["authentication",{"_index":155,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{}}}],["authentication.controller",{"_index":306,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["authentication.controller.ts",{"_index":706,"title":{},"body":{"controllers/SessionAuthenticationController.html":{},"coverage.html":{}}}],["authentication.controller.ts:28",{"_index":712,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["authentication.controller.ts:34",{"_index":710,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["authentication.service",{"_index":209,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/SessionAuthenticationController.html":{}}}],["authentication.service.ts",{"_index":723,"title":{},"body":{"injectables/SessionAuthenticationService.html":{},"injectables/TfaAuthenticationService.html":{},"coverage.html":{}}}],["authentication.service.ts:12",{"_index":726,"title":{},"body":{"injectables/SessionAuthenticationService.html":{}}}],["authentication.service.ts:13",{"_index":792,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["authentication.service.ts:18",{"_index":728,"title":{},"body":{"injectables/SessionAuthenticationService.html":{}}}],["authentication.service.ts:24",{"_index":794,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["authentication.service.ts:26",{"_index":729,"title":{},"body":{"injectables/SessionAuthenticationService.html":{}}}],["authentication.service.ts:28",{"_index":790,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["authentication.service.ts:7",{"_index":788,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["authentication/authentication.module",{"_index":607,"title":{},"body":{"modules/IamModule.html":{}}}],["authentication/session",{"_index":303,"title":{},"body":{"modules/AuthenticationModule.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"coverage.html":{}}}],["authentication/tfa",{"_index":208,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/TfaAuthenticationService.html":{},"coverage.html":{}}}],["authenticationcontroller",{"_index":152,"title":{"controllers/AuthenticationController.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{}}}],["authenticationguard",{"_index":240,"title":{"guards/AuthenticationGuard.html":{}},"body":{"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{}}}],["authenticationguard.defaultauthtype",{"_index":260,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authenticationmodule",{"_index":276,"title":{"modules/AuthenticationModule.html":{}},"body":{"modules/AuthenticationModule.html":{},"modules/IamModule.html":{},"modules.html":{},"overview.html":{}}}],["authenticationservice",{"_index":186,"title":{"injectables/AuthenticationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["authenticator",{"_index":795,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["authenticator.generatesecret",{"_index":797,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["authenticator.keyuri(email",{"_index":800,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["authenticator.verify",{"_index":801,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["authguard",{"_index":37,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["authguard('jwt",{"_index":43,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["author",{"_index":1120,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorization/authorization.module",{"_index":608,"title":{},"body":{"modules/IamModule.html":{}}}],["authorizationmodule",{"_index":439,"title":{"modules/AuthorizationModule.html":{}},"body":{"modules/AuthorizationModule.html":{},"modules/IamModule.html":{},"modules.html":{},"overview.html":{}}}],["authservice",{"_index":216,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["authtype",{"_index":195,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"controllers/SessionAuthenticationController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authtype.bearer",{"_index":252,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtype.none",{"_index":254,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypeguardmap",{"_index":242,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypes",{"_index":256,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["auto",{"_index":530,"title":{},"body":{"injectables/CloudService.html":{}}}],["available",{"_index":1132,"title":{},"body":{"modules.html":{}}}],["avatar",{"_index":554,"title":{},"body":{"classes/CreateInfoDto.html":{},"classes/InfoEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["await",{"_index":234,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"controllers/CloudController.html":{},"injectables/CloudService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"injectables/TfaAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":542,"title":{},"body":{"injectables/CloudService.html":{},"dependencies.html":{}}}],["backend",{"_index":1141,"title":{},"body":{"properties.html":{}}}],["backers",{"_index":1111,"title":{},"body":{"index.html":{}}}],["based",{"_index":50,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["bcrypt",{"_index":454,"title":{},"body":{"injectables/BcryptService.html":{},"dependencies.html":{}}}],["bcryptservice",{"_index":285,"title":{"injectables/BcryptService.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/BcryptService.html":{},"coverage.html":{}}}],["bearer",{"_index":1065,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["body",{"_index":181,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/CloudService.html":{},"controllers/SessionAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":26,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/CreateUserDto.html":{},"guards/RolesGuard.html":{},"guards/SessionGuard.html":{},"classes/UserEntity.html":{}}}],["bootstrap",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CloudModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1130,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1128,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":547,"title":{},"body":{"injectables/CloudService.html":{}}}],["buckets",{"_index":483,"title":{},"body":{"controllers/CloudController.html":{}}}],["buckets.buckets",{"_index":485,"title":{},"body":{"controllers/CloudController.html":{}}}],["buffer",{"_index":447,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/CloudService.html":{},"injectables/HashingService.html":{},"injectables/UsersService.html":{}}}],["building",{"_index":1075,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":11,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{},"guards/SessionGuard.html":{}}}],["canactivate(context",{"_index":16,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{},"guards/SessionGuard.html":{}}}],["catch",{"_index":416,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["checkemptydata",{"_index":963,"title":{},"body":{"injectables/UsersService.html":{}}}],["checkemptydata(data",{"_index":966,"title":{},"body":{"injectables/UsersService.html":{}}}],["checkexist",{"_index":724,"title":{},"body":{"injectables/SessionAuthenticationService.html":{}}}],["checkexist(email",{"_index":727,"title":{},"body":{"injectables/SessionAuthenticationService.html":{}}}],["class",{"_index":41,"title":{"classes/CreateInfoDto.html":{},"classes/CreateUserDto.html":{},"classes/InfoEntity.html":{},"classes/PositionEntity.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenIdsStorageError.html":{},"classes/RoleEntity.html":{},"classes/SettingEntity.html":{},"classes/SignInDto.html":{},"classes/SignInWithTokenDto.html":{},"classes/SignUpDto.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"classes/updateInfoDto.html":{},"classes/updateUserDto.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/AuthorizationModule.html":{},"injectables/BcryptService.html":{},"controllers/CloudController.html":{},"modules/CloudModule.html":{},"injectables/CloudService.html":{},"classes/CreateInfoDto.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"modules/IamModule.html":{},"classes/InfoEntity.html":{},"classes/PositionEntity.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/RoleEntity.html":{},"guards/RolesGuard.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SettingEntity.html":{},"classes/SignInDto.html":{},"classes/SignInWithTokenDto.html":{},"classes/SignUpDto.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"classes/updateInfoDto.html":{},"classes/updateUserDto.html":{}}}],["classes",{"_index":551,"title":{},"body":{"classes/CreateInfoDto.html":{},"classes/CreateUserDto.html":{},"classes/InfoEntity.html":{},"classes/PositionEntity.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenIdsStorageError.html":{},"classes/RoleEntity.html":{},"classes/SettingEntity.html":{},"classes/SignInDto.html":{},"classes/SignInWithTokenDto.html":{},"classes/SignUpDto.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"overview.html":{},"classes/updateInfoDto.html":{},"classes/updateUserDto.html":{}}}],["client",{"_index":334,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["cloud",{"_index":460,"title":{},"body":{"controllers/CloudController.html":{},"injectables/UsersService.html":{}}}],["cloud.controller",{"_index":499,"title":{},"body":{"modules/CloudModule.html":{}}}],["cloud.service",{"_index":477,"title":{},"body":{"controllers/CloudController.html":{},"modules/CloudModule.html":{}}}],["cloud/cloud.module",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["cloud/cloud.service",{"_index":318,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/UsersService.html":{}}}],["cloud/config/cloudflare_r2.config",{"_index":320,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["cloudcontroller",{"_index":458,"title":{"controllers/CloudController.html":{}},"body":{"controllers/CloudController.html":{},"modules/CloudModule.html":{},"coverage.html":{}}}],["cloudflare_r2config",{"_index":319,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/CloudModule.html":{},"injectables/CloudService.html":{}}}],["cloudflare_r2configservice",{"_index":519,"title":{},"body":{"injectables/CloudService.html":{}}}],["cloudmodule",{"_index":130,"title":{"modules/CloudModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CloudModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["cloudservice",{"_index":279,"title":{"injectables/CloudService.html":{}},"body":{"modules/AuthenticationModule.html":{},"controllers/CloudController.html":{},"modules/CloudModule.html":{},"injectables/CloudService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule",{"_index":277,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_providers",{"_index":278,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_cloudmodule",{"_index":495,"title":{},"body":{"modules/CloudModule.html":{},"overview.html":{}}}],["cluster_cloudmodule_exports",{"_index":496,"title":{},"body":{"modules/CloudModule.html":{},"overview.html":{}}}],["cluster_cloudmodule_providers",{"_index":497,"title":{},"body":{"modules/CloudModule.html":{}}}],["cluster_iammodule",{"_index":604,"title":{},"body":{"modules/IamModule.html":{},"overview.html":{}}}],["cluster_iammodule_imports",{"_index":605,"title":{},"body":{"modules/IamModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":957,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_imports",{"_index":959,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":958,"title":{},"body":{"modules/UsersModule.html":{}}}],["code",{"_index":396,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/TfaAuthenticationService.html":{}}}],["compare",{"_index":444,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["compare(data",{"_index":446,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["config/cloudflare_r2.config",{"_index":501,"title":{},"body":{"modules/CloudModule.html":{},"injectables/CloudService.html":{}}}],["config/jwt.config/jwt.config",{"_index":291,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{}}}],["configmodule",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CloudModule.html":{}}}],["configmodule.forfeature(cloudflare_r2config",{"_index":324,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/CloudModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":323,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["configmodule.forroot",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":500,"title":{},"body":{"modules/CloudModule.html":{},"injectables/TfaAuthenticationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configservice.get('upload_rate_limit",{"_index":511,"title":{},"body":{"modules/CloudModule.html":{}}}],["configservice.get('upload_rate_ttl",{"_index":508,"title":{},"body":{"modules/CloudModule.html":{}}}],["configtype",{"_index":66,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthenticationService.html":{},"injectables/CloudService.html":{}}}],["configure(consumer",{"_index":327,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["conflictexception",{"_index":370,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{}}}],["conflictexception('email",{"_index":383,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{}}}],["connect",{"_index":311,"title":{},"body":{"modules/AuthenticationModule.html":{},"dependencies.html":{}}}],["console.log(user",{"_index":938,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(where",{"_index":996,"title":{},"body":{"injectables/UsersService.html":{}}}],["const",{"_index":231,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"controllers/CloudController.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constants/iam.contant",{"_index":698,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor",{"_index":13,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/CloudService.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/RoleEntity.html":{},"guards/RolesGuard.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserSerializer.html":{},"injectables/UsersService.html":{}}}],["constructor(cloudflare_r2configservice",{"_index":517,"title":{},"body":{"injectables/CloudService.html":{}}}],["constructor(configservice",{"_index":787,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["constructor(hashservice",{"_index":349,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{}}}],["constructor(jwtconfigservice",{"_index":65,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["constructor(message",{"_index":662,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["constructor(name",{"_index":688,"title":{},"body":{"classes/RoleEntity.html":{}}}],["constructor(prismaservice",{"_index":964,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(private",{"_index":116,"title":{},"body":{"controllers/AppController.html":{},"controllers/CloudController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":245,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["consumer",{"_index":331,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["context",{"_index":24,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{},"guards/SessionGuard.html":{}}}],["context.getclass",{"_index":259,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":258,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":702,"title":{},"body":{"guards/RolesGuard.html":{},"guards/SessionGuard.html":{}}}],["contextrole",{"_index":701,"title":{},"body":{"guards/RolesGuard.html":{}}}],["contextrole.some((role",{"_index":703,"title":{},"body":{"guards/RolesGuard.html":{}}}],["controller",{"_index":107,"title":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/CloudController.html":{},"controllers/SessionAuthenticationController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/CloudController.html":{},"controllers/SessionAuthenticationController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('authentication",{"_index":215,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["controller('cloud",{"_index":480,"title":{},"body":{"controllers/CloudController.html":{}}}],["controller('session",{"_index":716,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["controller('users",{"_index":916,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":109,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"controllers/CloudController.html":{},"modules/CloudModule.html":{},"modules/IamModule.html":{},"controllers/SessionAuthenticationController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["controllers/authentication.controller",{"_index":290,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["controllers/session",{"_index":305,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["cookie",{"_index":339,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["coverage",{"_index":1004,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":856,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/updateInfoDto.html":{},"classes/updateUserDto.html":{}}}],["create(@body",{"_index":917,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(createuserdto",{"_index":867,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createdat",{"_index":612,"title":{},"body":{"classes/InfoEntity.html":{},"classes/PositionEntity.html":{},"classes/SettingEntity.html":{},"classes/UserEntity.html":{}}}],["createinfodto",{"_index":550,"title":{"classes/CreateInfoDto.html":{}},"body":{"classes/CreateInfoDto.html":{},"coverage.html":{},"classes/updateInfoDto.html":{}}}],["createparamdecorator",{"_index":1155,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createposition",{"_index":1009,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createredisstore",{"_index":310,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["createredisstore(session",{"_index":330,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["createrole",{"_index":1014,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["createuser",{"_index":1011,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createuserdto",{"_index":374,"title":{"classes/CreateUserDto.html":{}},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/updateUserDto.html":{}}}],["credentials",{"_index":533,"title":{},"body":{"injectables/CloudService.html":{}}}],["crypto",{"_index":372,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["ctu",{"_index":1142,"title":{},"body":{"properties.html":{}}}],["ctx",{"_index":1158,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1159,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cursor",{"_index":924,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["data",{"_index":450,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/TfaAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["data.interface",{"_index":205,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"guards/RolesGuard.html":{},"controllers/SessionAuthenticationController.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{}}}],["data.interface.ts",{"_index":100,"title":{},"body":{"interfaces/ActiveUserData.html":{},"coverage.html":{}}}],["data/${email}/avatar",{"_index":999,"title":{},"body":{"injectables/UsersService.html":{}}}],["date",{"_index":619,"title":{},"body":{"classes/InfoEntity.html":{},"classes/PositionEntity.html":{},"classes/SettingEntity.html":{},"classes/UserEntity.html":{}}}],["declarations",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CloudModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":112,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/CloudController.html":{},"classes/CreateInfoDto.html":{},"classes/CreateUserDto.html":{},"classes/InfoEntity.html":{},"classes/RefreshTokenDto.html":{},"controllers/SessionAuthenticationController.html":{},"classes/SettingEntity.html":{},"classes/SignInDto.html":{},"classes/SignInWithTokenDto.html":{},"classes/SignUpDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{}}}],["decorators/active",{"_index":201,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{}}}],["decorators/auth/auth.decorator",{"_index":194,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"controllers/SessionAuthenticationController.html":{}}}],["decorators/roles/roles.decorator",{"_index":700,"title":{},"body":{"guards/RolesGuard.html":{}}}],["default",{"_index":526,"title":{},"body":{"injectables/CloudService.html":{},"miscellaneous/variables.html":{}}}],["defaultauthtype",{"_index":244,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["defined",{"_index":14,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"controllers/CloudController.html":{},"injectables/CloudService.html":{},"classes/CreateInfoDto.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"classes/InfoEntity.html":{},"classes/PositionEntity.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/RoleEntity.html":{},"guards/RolesGuard.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SettingEntity.html":{},"classes/SignInDto.html":{},"classes/SignInWithTokenDto.html":{},"classes/SignUpDto.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":904,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':id",{"_index":886,"title":{},"body":{"controllers/UsersController.html":{}}}],["department",{"_index":807,"title":{},"body":{"classes/UserEntity.html":{}}}],["dependencies",{"_index":121,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CloudModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deprecated",{"_index":300,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["description",{"_index":687,"title":{},"body":{"classes/RoleEntity.html":{},"index.html":{},"properties.html":{}}}],["deserializeuser",{"_index":828,"title":{},"body":{"classes/UserSerializer.html":{}}}],["deserializeuser(payload",{"_index":832,"title":{},"body":{"classes/UserSerializer.html":{}}}],["development",{"_index":1089,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1005,"title":{},"body":{"coverage.html":{}}}],["done",{"_index":833,"title":{},"body":{"classes/UserSerializer.html":{}}}],["done(null",{"_index":848,"title":{},"body":{"classes/UserSerializer.html":{}}}],["dto/create",{"_index":909,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/refresh",{"_index":198,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["dto/sign",{"_index":188,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{}}}],["dto/update",{"_index":910,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":1099,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":1076,"title":{},"body":{"index.html":{}}}],["email",{"_index":102,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/AuthenticationService.html":{},"classes/CreateInfoDto.html":{},"classes/CreateUserDto.html":{},"classes/InfoEntity.html":{},"injectables/SessionAuthenticationService.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"injectables/UsersService.html":{}}}],["empty",{"_index":990,"title":{},"body":{"injectables/UsersService.html":{}}}],["enabletfasecret",{"_index":784,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["enabletfasecret(email",{"_index":789,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["encrypt",{"_index":448,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["endpoint",{"_index":531,"title":{},"body":{"injectables/CloudService.html":{}}}],["entity/role.entity",{"_index":912,"title":{},"body":{"controllers/UsersController.html":{}}}],["enumerations",{"_index":1061,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums",{"_index":571,"title":{},"body":{"classes/CreateInfoDto.html":{},"classes/InfoEntity.html":{},"classes/SettingEntity.html":{},"classes/UserEntity.html":{}}}],["enums.deparment",{"_index":809,"title":{},"body":{"classes/UserEntity.html":{}}}],["enums.languagesetting",{"_index":745,"title":{},"body":{"classes/SettingEntity.html":{}}}],["enums.layoutsetting",{"_index":748,"title":{},"body":{"classes/SettingEntity.html":{}}}],["enums.schemesetting",{"_index":751,"title":{},"body":{"classes/SettingEntity.html":{}}}],["enums.themesetting",{"_index":754,"title":{},"body":{"classes/SettingEntity.html":{}}}],["enums.userstatus",{"_index":565,"title":{},"body":{"classes/CreateInfoDto.html":{},"classes/InfoEntity.html":{}}}],["enums/auth",{"_index":196,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"controllers/SessionAuthenticationController.html":{}}}],["err",{"_index":32,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/UserSerializer.html":{}}}],["error",{"_index":417,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"classes/UserSerializer.html":{}}}],["error,payload",{"_index":834,"title":{},"body":{"classes/UserSerializer.html":{}}}],["error,user",{"_index":839,"title":{},"body":{"classes/UserSerializer.html":{}}}],["error.code",{"_index":418,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["example",{"_index":780,"title":{},"body":{"classes/SignUpDto.html":{}}}],["exception",{"_index":49,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["executioncontext",{"_index":17,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{},"guards/SessionGuard.html":{},"miscellaneous/variables.html":{}}}],["exists",{"_index":384,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{}}}],["expiresin",{"_index":364,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["export",{"_index":40,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/AuthorizationModule.html":{},"injectables/BcryptService.html":{},"controllers/CloudController.html":{},"modules/CloudModule.html":{},"injectables/CloudService.html":{},"classes/CreateInfoDto.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"modules/IamModule.html":{},"classes/InfoEntity.html":{},"classes/PositionEntity.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/RoleEntity.html":{},"guards/RolesGuard.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SettingEntity.html":{},"classes/SignInDto.html":{},"classes/SignInWithTokenDto.html":{},"classes/SignUpDto.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/updateInfoDto.html":{},"classes/updateUserDto.html":{}}}],["exports",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CloudModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":210,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"controllers/CloudController.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":470,"title":{},"body":{"controllers/CloudController.html":{},"controllers/UsersController.html":{}}}],["extends",{"_index":42,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/updateInfoDto.html":{},"classes/updateUserDto.html":{}}}],["extractjwt",{"_index":76,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":87,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["false",{"_index":89,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthenticationModule.html":{},"classes/UserEntity.html":{}}}],["field",{"_index":1156,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/AuthorizationModule.html":{},"injectables/BcryptService.html":{},"controllers/CloudController.html":{},"modules/CloudModule.html":{},"injectables/CloudService.html":{},"classes/CreateInfoDto.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"modules/IamModule.html":{},"classes/InfoEntity.html":{},"classes/PositionEntity.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/RoleEntity.html":{},"guards/RolesGuard.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SettingEntity.html":{},"classes/SignInDto.html":{},"classes/SignInWithTokenDto.html":{},"classes/SignUpDto.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/updateInfoDto.html":{},"classes/updateUserDto.html":{}}}],["file.buffer",{"_index":494,"title":{},"body":{"controllers/CloudController.html":{},"controllers/UsersController.html":{}}}],["file.originalname.split('.').pop",{"_index":955,"title":{},"body":{"controllers/UsersController.html":{}}}],["filebuffer",{"_index":985,"title":{},"body":{"injectables/UsersService.html":{}}}],["fileinterceptor",{"_index":478,"title":{},"body":{"controllers/CloudController.html":{},"controllers/UsersController.html":{}}}],["filename",{"_index":525,"title":{},"body":{"injectables/CloudService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["filetype",{"_index":953,"title":{},"body":{"controllers/UsersController.html":{}}}],["filetypevalidator",{"_index":907,"title":{},"body":{"controllers/UsersController.html":{}}}],["findall",{"_index":857,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findall(include",{"_index":969,"title":{},"body":{"injectables/UsersService.html":{}}}],["findfilter",{"_index":858,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findfilter(params",{"_index":872,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findinfo",{"_index":859,"title":{},"body":{"controllers/UsersController.html":{}}}],["findinfo(@activeuser",{"_index":933,"title":{},"body":{"controllers/UsersController.html":{}}}],["findinfo(user",{"_index":877,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone",{"_index":860,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@activeuser",{"_index":930,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(user",{"_index":880,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(where",{"_index":974,"title":{},"body":{"injectables/UsersService.html":{}}}],["findsetting",{"_index":861,"title":{},"body":{"controllers/UsersController.html":{}}}],["findsetting(@activeuser",{"_index":936,"title":{},"body":{"controllers/UsersController.html":{}}}],["findsetting(user",{"_index":882,"title":{},"body":{"controllers/UsersController.html":{}}}],["flat",{"_index":263,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["forroutes",{"_index":344,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["found",{"_index":56,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["framework",{"_index":1074,"title":{},"body":{"index.html":{}}}],["fulfilled",{"_index":269,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["function",{"_index":836,"title":{},"body":{"classes/UserSerializer.html":{},"coverage.html":{}}}],["functions",{"_index":1067,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generateqrcode",{"_index":156,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["generateqrcode(response",{"_index":161,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["generatesecret",{"_index":785,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["generatesecret(email",{"_index":791,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["generatetoken",{"_index":346,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["generatetoken(user",{"_index":356,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["gensalt",{"_index":453,"title":{},"body":{"injectables/BcryptService.html":{}}}],["gensalt(10",{"_index":457,"title":{},"body":{"injectables/BcryptService.html":{}}}],["get('buckets",{"_index":481,"title":{},"body":{"controllers/CloudController.html":{}}}],["get('filter",{"_index":874,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('info",{"_index":878,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('objects",{"_index":464,"title":{},"body":{"controllers/CloudController.html":{}}}],["get('objects/:prefix",{"_index":467,"title":{},"body":{"controllers/CloudController.html":{}}}],["get('setting",{"_index":883,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('test",{"_index":709,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["get()@roles(new",{"_index":869,"title":{},"body":{"controllers/UsersController.html":{}}}],["gethello",{"_index":111,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getkey",{"_index":646,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{}}}],["getkey(userid",{"_index":650,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["getpassportinstance",{"_index":829,"title":{},"body":{"classes/UserSerializer.html":{}}}],["getting",{"_index":1070,"title":{"index.html":{}},"body":{}}],["graph",{"_index":1131,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":1106,"title":{},"body":{"index.html":{}}}],["guard",{"_index":0,"title":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{},"guards/SessionGuard.html":{}},"body":{"coverage.html":{}}}],["guard.canactivate(context",{"_index":266,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["guardpromises",{"_index":264,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{},"guards/SessionGuard.html":{},"overview.html":{}}}],["guards.map((guard",{"_index":265,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["guards/access",{"_index":294,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["guards/authentication/authentication.guard",{"_index":295,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["guards/roles/roles.guard",{"_index":442,"title":{},"body":{"modules/AuthorizationModule.html":{}}}],["handlerequest",{"_index":12,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["handlerequest(err",{"_index":29,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["hash",{"_index":445,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["hash(data",{"_index":451,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["hashedpassword",{"_index":411,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["hashing.service",{"_index":455,"title":{},"body":{"injectables/BcryptService.html":{}}}],["hashing/bcrypt/bcrypt.service",{"_index":286,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["hashing/hashing.service",{"_index":284,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{}}}],["hashingservice",{"_index":283,"title":{"injectables/HashingService.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/SessionAuthenticationService.html":{},"coverage.html":{}}}],["hashservice",{"_index":355,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{}}}],["hello",{"_index":150,"title":{},"body":{"injectables/AppService.html":{},"controllers/SessionAuthenticationController.html":{}}}],["here",{"_index":1117,"title":{},"body":{"index.html":{}}}],["httpcode",{"_index":182,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{}}}],["httpcode(httpstatus.ok",{"_index":218,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{}}}],["httpcode(httpstatus.ok)@auth(authtype.bearer)@post('tfa/generate",{"_index":164,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpcode(httpstatus.ok)@post('refresh",{"_index":168,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpcode(httpstatus.ok)@post('sign",{"_index":172,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{}}}],["httponly",{"_index":341,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["https://${this.cloudflare_r2configservice.account_id}.r2.cloudflarestorage.com",{"_index":532,"title":{},"body":{"injectables/CloudService.html":{}}}],["https://nestjs.com",{"_index":1124,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":183,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{}}}],["iam/authentication/decorators/active",{"_index":914,"title":{},"body":{"controllers/UsersController.html":{}}}],["iam/authentication/interfaces/active",{"_index":915,"title":{},"body":{"controllers/UsersController.html":{}}}],["iam/authorization/decorators/roles/roles.decorator",{"_index":911,"title":{},"body":{"controllers/UsersController.html":{}}}],["iam/iam.module",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["iammodule",{"_index":131,"title":{"modules/IamModule.html":{}},"body":{"modules/AppModule.html":{},"modules/IamModule.html":{},"modules.html":{},"overview.html":{}}}],["id",{"_index":405,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/PositionEntity.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"classes/RoleEntity.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{}}}],["id.id",{"_index":805,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["identifier",{"_index":1006,"title":{},"body":{"coverage.html":{}}}],["ids.storage",{"_index":299,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{}}}],["ids.storage.ts",{"_index":644,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"coverage.html":{}}}],["ids.storage.ts:19",{"_index":661,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{}}}],["ids.storage.ts:21",{"_index":657,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{}}}],["ids.storage.ts:24",{"_index":658,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{}}}],["ids.storage.ts:28",{"_index":654,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{}}}],["ids.storage.ts:32",{"_index":660,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{}}}],["ids.storage.ts:39",{"_index":656,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{}}}],["ids.storage.ts:43",{"_index":651,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{}}}],["ids.storage.ts:9",{"_index":672,"title":{},"body":{"classes/RefreshTokenIdsStorageError.html":{}}}],["ids.storage/refresh",{"_index":298,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"coverage.html":{}}}],["ignoreexpiration",{"_index":88,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["image",{"_index":954,"title":{},"body":{"controllers/UsersController.html":{}}}],["implements",{"_index":44,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/BcryptService.html":{},"classes/CreateInfoDto.html":{},"classes/CreateUserDto.html":{},"classes/InfoEntity.html":{},"classes/PositionEntity.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"classes/RoleEntity.html":{},"guards/RolesGuard.html":{},"guards/SessionGuard.html":{},"classes/SettingEntity.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{}}}],["import",{"_index":33,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/AuthorizationModule.html":{},"injectables/BcryptService.html":{},"controllers/CloudController.html":{},"modules/CloudModule.html":{},"injectables/CloudService.html":{},"classes/CreateInfoDto.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"modules/IamModule.html":{},"classes/InfoEntity.html":{},"classes/PositionEntity.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/RoleEntity.html":{},"guards/RolesGuard.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SettingEntity.html":{},"classes/SignInDto.html":{},"classes/SignInWithTokenDto.html":{},"classes/SignUpDto.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/updateInfoDto.html":{},"classes/updateUserDto.html":{}}}],["imports",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CloudModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{}}}],["in.dto",{"_index":192,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{}}}],["in.dto.ts",{"_index":766,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["in.dto.ts:10",{"_index":769,"title":{},"body":{"classes/SignInDto.html":{}}}],["in.dto.ts:15",{"_index":771,"title":{},"body":{"classes/SignInDto.html":{}}}],["in.dto.ts:6",{"_index":768,"title":{},"body":{"classes/SignInDto.html":{}}}],["in.dto/sign",{"_index":191,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"classes/SignInDto.html":{},"coverage.html":{}}}],["include",{"_index":972,"title":{},"body":{"injectables/UsersService.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"controllers/CloudController.html":{},"injectables/CloudService.html":{},"classes/CreateInfoDto.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"classes/InfoEntity.html":{},"classes/PositionEntity.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/RoleEntity.html":{},"guards/RolesGuard.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SettingEntity.html":{},"classes/SignInDto.html":{},"classes/SignInWithTokenDto.html":{},"classes/SignUpDto.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/AuthorizationModule.html":{},"injectables/BcryptService.html":{},"controllers/CloudController.html":{},"modules/CloudModule.html":{},"injectables/CloudService.html":{},"classes/CreateInfoDto.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"modules/IamModule.html":{},"classes/InfoEntity.html":{},"classes/PositionEntity.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/RoleEntity.html":{},"guards/RolesGuard.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SettingEntity.html":{},"classes/SignInDto.html":{},"classes/SignInWithTokenDto.html":{},"classes/SignUpDto.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/updateInfoDto.html":{},"classes/updateUserDto.html":{}}}],["info.dto",{"_index":913,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/updateInfoDto.html":{}}}],["info.dto.ts",{"_index":553,"title":{},"body":{"classes/CreateInfoDto.html":{},"coverage.html":{},"classes/updateInfoDto.html":{}}}],["info.dto.ts:12",{"_index":562,"title":{},"body":{"classes/CreateInfoDto.html":{}}}],["info.dto.ts:15",{"_index":560,"title":{},"body":{"classes/CreateInfoDto.html":{}}}],["info.dto.ts:19",{"_index":567,"title":{},"body":{"classes/CreateInfoDto.html":{}}}],["info.dto.ts:23",{"_index":558,"title":{},"body":{"classes/CreateInfoDto.html":{}}}],["info.dto.ts:27",{"_index":564,"title":{},"body":{"classes/CreateInfoDto.html":{}}}],["info.dto.ts:30",{"_index":570,"title":{},"body":{"classes/CreateInfoDto.html":{}}}],["infoentity",{"_index":609,"title":{"classes/InfoEntity.html":{}},"body":{"classes/InfoEntity.html":{},"coverage.html":{}}}],["inject",{"_index":73,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthenticationService.html":{},"modules/CloudModule.html":{},"injectables/CloudService.html":{}}}],["inject(cloudflare_r2config.key",{"_index":544,"title":{},"body":{"injectables/CloudService.html":{}}}],["inject(jwtconfig.key",{"_index":83,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthenticationService.html":{}}}],["injectable",{"_index":34,"title":{"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/CloudService.html":{},"injectables/HashingService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/SessionAuthenticationService.html":{},"injectables/TfaAuthenticationService.html":{},"injectables/UsersService.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/CloudService.html":{},"injectables/HashingService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"injectables/TfaAuthenticationService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":60,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"injectables/CloudService.html":{},"injectables/HashingService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/SessionAuthenticationService.html":{},"injectables/TfaAuthenticationService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["insert",{"_index":429,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/RefreshTokenIdsStorage.html":{}}}],["insert(userid",{"_index":652,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["installation",{"_index":1085,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1087,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":436,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["interface",{"_index":96,"title":{"interfaces/ActiveUserData.html":{}},"body":{"interfaces/ActiveUserData.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":98,"title":{},"body":{"interfaces/ActiveUserData.html":{}}}],["interfaces/active",{"_index":204,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/SessionAuthenticationController.html":{},"classes/UserSerializer.html":{}}}],["invalidate",{"_index":647,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{}}}],["invalidate(userid",{"_index":655,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["ioredis",{"_index":309,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"dependencies.html":{}}}],["isboolean",{"_index":592,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isdate",{"_index":620,"title":{},"body":{"classes/InfoEntity.html":{},"classes/UserEntity.html":{}}}],["isemail",{"_index":559,"title":{},"body":{"classes/CreateInfoDto.html":{},"classes/CreateUserDto.html":{},"classes/InfoEntity.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{}}}],["isenum",{"_index":573,"title":{},"body":{"classes/CreateInfoDto.html":{},"classes/InfoEntity.html":{},"classes/SettingEntity.html":{},"classes/UserEntity.html":{}}}],["isenum($enums.deparment",{"_index":824,"title":{},"body":{"classes/UserEntity.html":{}}}],["isenum($enums.languagesetting",{"_index":763,"title":{},"body":{"classes/SettingEntity.html":{}}}],["isenum($enums.layoutsetting",{"_index":764,"title":{},"body":{"classes/SettingEntity.html":{}}}],["isenum($enums.schemesetting",{"_index":762,"title":{},"body":{"classes/SettingEntity.html":{}}}],["isenum($enums.themesetting",{"_index":761,"title":{},"body":{"classes/SettingEntity.html":{}}}],["isenum($enums.userstatus",{"_index":577,"title":{},"body":{"classes/CreateInfoDto.html":{},"classes/InfoEntity.html":{}}}],["ishash",{"_index":593,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ishash('sha512",{"_index":599,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isint",{"_index":760,"title":{},"body":{"classes/SettingEntity.html":{}}}],["ismatch",{"_index":385,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{}}}],["isnotempty",{"_index":641,"title":{},"body":{"classes/RefreshTokenDto.html":{},"classes/SignInWithTokenDto.html":{}}}],["isoptional",{"_index":569,"title":{},"body":{"classes/CreateInfoDto.html":{},"classes/CreateUserDto.html":{},"classes/InfoEntity.html":{},"classes/SignInDto.html":{},"classes/UserEntity.html":{}}}],["isoptional()@isenum($enums.userstatus",{"_index":566,"title":{},"body":{"classes/CreateInfoDto.html":{}}}],["isoptional()@isphonenumber('vn",{"_index":563,"title":{},"body":{"classes/CreateInfoDto.html":{}}}],["isoptional()@isstring",{"_index":557,"title":{},"body":{"classes/CreateInfoDto.html":{}}}],["isphonenumber",{"_index":574,"title":{},"body":{"classes/CreateInfoDto.html":{},"classes/InfoEntity.html":{}}}],["isphonenumber('vn",{"_index":578,"title":{},"body":{"classes/CreateInfoDto.html":{},"classes/InfoEntity.html":{}}}],["isstring",{"_index":561,"title":{},"body":{"classes/CreateInfoDto.html":{},"classes/CreateUserDto.html":{},"classes/InfoEntity.html":{}}}],["issuer",{"_index":403,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["istfaenabled",{"_index":580,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{}}}],["isurl",{"_index":630,"title":{},"body":{"classes/InfoEntity.html":{}}}],["isvalid",{"_index":391,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["join",{"_index":1113,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":79,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["jwtconfig",{"_index":80,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{}}}],["jwtconfigservice",{"_index":68,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["jwtconfigservice.secret",{"_index":95,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["jwtconfiguration",{"_index":351,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["jwtfromrequest",{"_index":86,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["jwtmodule",{"_index":288,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":325,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtservice",{"_index":352,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["kamil",{"_index":1121,"title":{},"body":{"index.html":{}}}],["key",{"_index":549,"title":{},"body":{"injectables/CloudService.html":{}}}],["keyof",{"_index":1157,"title":{},"body":{"miscellaneous/variables.html":{}}}],["language",{"_index":740,"title":{},"body":{"classes/SettingEntity.html":{}}}],["layout",{"_index":741,"title":{},"body":{"classes/SettingEntity.html":{}}}],["legend",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CloudModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":772,"title":{},"body":{"classes/SignInDto.html":{}}}],["length(6",{"_index":773,"title":{},"body":{"classes/SignInDto.html":{}}}],["license",{"_index":1127,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1103,"title":{},"body":{"index.html":{}}}],["limit",{"_index":510,"title":{},"body":{"modules/CloudModule.html":{}}}],["listallbuckets",{"_index":482,"title":{},"body":{"controllers/CloudController.html":{},"injectables/CloudService.html":{}}}],["listallobjects",{"_index":461,"title":{},"body":{"controllers/CloudController.html":{},"injectables/CloudService.html":{}}}],["listallobjects(prefix",{"_index":521,"title":{},"body":{"injectables/CloudService.html":{}}}],["listallobjectswithprefix",{"_index":462,"title":{},"body":{"controllers/CloudController.html":{}}}],["listallobjectswithprefix(@param('prefix",{"_index":489,"title":{},"body":{"controllers/CloudController.html":{}}}],["listallobjectswithprefix(prefix",{"_index":466,"title":{},"body":{"controllers/CloudController.html":{}}}],["listbucketscommand",{"_index":539,"title":{},"body":{"injectables/CloudService.html":{}}}],["listobjectsv2command",{"_index":540,"title":{},"body":{"injectables/CloudService.html":{}}}],["literal",{"_index":873,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["main",{"_index":1012,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["management",{"_index":1144,"title":{},"body":{"properties.html":{}}}],["map",{"_index":407,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["map((type",{"_index":261,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["match",{"_index":389,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{}}}],["matching",{"_index":58,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/AuthorizationModule.html":{},"injectables/BcryptService.html":{},"controllers/CloudController.html":{},"modules/CloudModule.html":{},"injectables/CloudService.html":{},"classes/CreateInfoDto.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"modules/IamModule.html":{},"classes/InfoEntity.html":{},"classes/PositionEntity.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/RoleEntity.html":{},"guards/RolesGuard.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SettingEntity.html":{},"classes/SignInDto.html":{},"classes/SignInWithTokenDto.html":{},"classes/SignUpDto.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"classes/updateInfoDto.html":{},"classes/updateUserDto.html":{},"miscellaneous/variables.html":{}}}],["maxfilesizevalidator",{"_index":906,"title":{},"body":{"controllers/UsersController.html":{}}}],["maxsize",{"_index":951,"title":{},"body":{"controllers/UsersController.html":{}}}],["message",{"_index":673,"title":{},"body":{"classes/RefreshTokenIdsStorageError.html":{}}}],["metadata",{"_index":1057,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":10,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"controllers/CloudController.html":{},"injectables/CloudService.html":{},"injectables/HashingService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["middlewareconsumer",{"_index":328,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["minlength",{"_index":594,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/InfoEntity.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{}}}],["minlength(8",{"_index":598,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/InfoEntity.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{}}}],["miscellaneous",{"_index":1060,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1102,"title":{},"body":{"index.html":{},"properties.html":{}}}],["mode",{"_index":1093,"title":{},"body":{"index.html":{}}}],["module",{"_index":118,"title":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/AuthorizationModule.html":{},"modules/CloudModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/AuthorizationModule.html":{},"modules/CloudModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":120,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/AuthorizationModule.html":{},"modules/CloudModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1116,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":1122,"title":{},"body":{"index.html":{}}}],["name",{"_index":21,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"controllers/CloudController.html":{},"injectables/CloudService.html":{},"classes/CreateInfoDto.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"classes/InfoEntity.html":{},"classes/PositionEntity.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/RoleEntity.html":{},"guards/RolesGuard.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["nest",{"_index":1081,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1126,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"injectables/SessionAuthenticationService.html":{},"injectables/TfaAuthenticationService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":36,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/AuthorizationModule.html":{},"injectables/BcryptService.html":{},"controllers/CloudController.html":{},"modules/CloudModule.html":{},"injectables/CloudService.html":{},"injectables/HashingService.html":{},"modules/IamModule.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"injectables/TfaAuthenticationService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":74,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/CloudModule.html":{},"injectables/CloudService.html":{},"injectables/TfaAuthenticationService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":250,"title":{},"body":{"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"modules/AuthorizationModule.html":{},"modules/CloudModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":289,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":38,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AuthenticationModule.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UserSerializer.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":479,"title":{},"body":{"controllers/CloudController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":596,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/InfoEntity.html":{},"classes/SettingEntity.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/UserEntity.html":{},"dependencies.html":{},"classes/updateInfoDto.html":{},"classes/updateUserDto.html":{}}}],["nestjs/throttler",{"_index":504,"title":{},"body":{"modules/CloudModule.html":{},"dependencies.html":{}}}],["nestmodule",{"_index":326,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["new",{"_index":52,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/CloudService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/SessionAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["node.js",{"_index":1073,"title":{},"body":{"index.html":{}}}],["none",{"_index":1066,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["null",{"_index":409,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/UserEntity.html":{}}}],["nullable",{"_index":818,"title":{},"body":{"classes/UserEntity.html":{}}}],["number",{"_index":106,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/AuthenticationService.html":{},"classes/InfoEntity.html":{},"classes/PositionEntity.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"classes/RoleEntity.html":{},"classes/SettingEntity.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["number(id",{"_index":948,"title":{},"body":{"controllers/UsersController.html":{}}}],["number(user.sub",{"_index":932,"title":{},"body":{"controllers/UsersController.html":{}}}],["object.keys(data).length",{"_index":987,"title":{},"body":{"injectables/UsersService.html":{}}}],["objects",{"_index":486,"title":{},"body":{"controllers/CloudController.html":{}}}],["objects.contents",{"_index":488,"title":{},"body":{"controllers/CloudController.html":{}}}],["observable",{"_index":28,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/RolesGuard.html":{},"guards/SessionGuard.html":{}}}],["onapplicationbootstrap",{"_index":648,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["onapplicationshutdown",{"_index":649,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["open",{"_index":1104,"title":{},"body":{"index.html":{}}}],["optional",{"_index":23,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/ActiveUserData.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"controllers/CloudController.html":{},"injectables/CloudService.html":{},"classes/CreateInfoDto.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/RoleEntity.html":{},"guards/RolesGuard.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SignInDto.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["orderby",{"_index":927,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["otplib",{"_index":796,"title":{},"body":{"injectables/TfaAuthenticationService.html":{},"dependencies.html":{}}}],["out",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CloudModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":1133,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p2002",{"_index":419,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["package",{"_index":1035,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":474,"title":{},"body":{"controllers/CloudController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":19,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"controllers/CloudController.html":{},"injectables/CloudService.html":{},"injectables/HashingService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/RoleEntity.html":{},"guards/RolesGuard.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["params",{"_index":876,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parsefilepipe",{"_index":905,"title":{},"body":{"controllers/UsersController.html":{}}}],["partialtype",{"_index":1146,"title":{},"body":{"classes/updateInfoDto.html":{},"classes/updateUserDto.html":{}}}],["partialtype(createinfodto",{"_index":1147,"title":{},"body":{"classes/updateInfoDto.html":{}}}],["partialtype(createuserdto",{"_index":1148,"title":{},"body":{"classes/updateUserDto.html":{}}}],["passport",{"_index":78,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthenticationModule.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UserSerializer.html":{},"dependencies.html":{}}}],["passport.initialize",{"_index":342,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["passport.session",{"_index":343,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["passportinstance",{"_index":841,"title":{},"body":{"classes/UserSerializer.html":{}}}],["passportinstance.deserializeuser((payload",{"_index":845,"title":{},"body":{"classes/UserSerializer.html":{}}}],["passportinstance.serializeuser((user",{"_index":843,"title":{},"body":{"classes/UserSerializer.html":{}}}],["passportmodule",{"_index":287,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["passportserializer",{"_index":827,"title":{},"body":{"classes/UserSerializer.html":{}}}],["passportstrategy",{"_index":75,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["passportstrategy(strategy",{"_index":82,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["passreqtocallback",{"_index":681,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["password",{"_index":379,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"injectables/SessionAuthenticationService.html":{},"classes/SignInDto.html":{},"classes/SignUpDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{}}}],["patch",{"_index":891,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('info",{"_index":895,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('setting",{"_index":899,"title":{},"body":{"controllers/UsersController.html":{}}}],["payload",{"_index":71,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthenticationService.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/UserSerializer.html":{}}}],["permissions",{"_index":850,"title":{},"body":{"classes/UserSerializer.html":{}}}],["phone",{"_index":555,"title":{},"body":{"classes/CreateInfoDto.html":{},"classes/InfoEntity.html":{}}}],["please",{"_index":1114,"title":{},"body":{"index.html":{}}}],["pnpm",{"_index":1086,"title":{},"body":{"index.html":{}}}],["position",{"_index":633,"title":{},"body":{"classes/PositionEntity.html":{}}}],["positionentity",{"_index":631,"title":{"classes/PositionEntity.html":{}},"body":{"classes/PositionEntity.html":{},"coverage.html":{}}}],["positions",{"_index":382,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["post",{"_index":184,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CloudController.html":{},"controllers/SessionAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["post('avatar",{"_index":949,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('avatar')@useinterceptors(undefined",{"_index":902,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('refresh",{"_index":226,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('sign",{"_index":219,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{}}}],["post('tfa/generate",{"_index":230,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('upload",{"_index":491,"title":{},"body":{"controllers/CloudController.html":{}}}],["post('upload')@useinterceptors(undefined",{"_index":471,"title":{},"body":{"controllers/CloudController.html":{}}}],["prefix",{"_index":154,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CloudController.html":{},"injectables/CloudService.html":{},"controllers/SessionAuthenticationController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["prefix}/${filename",{"_index":1001,"title":{},"body":{"injectables/UsersService.html":{}}}],["prisma",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"classes/CreateInfoDto.html":{},"classes/CreateUserDto.html":{},"injectables/SessionAuthenticationService.html":{},"injectables/TfaAuthenticationService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["prisma.infocreateinput",{"_index":576,"title":{},"body":{"classes/CreateInfoDto.html":{}}}],["prisma.infogetpayload",{"_index":941,"title":{},"body":{"controllers/UsersController.html":{}}}],["prisma.settinggetpayload",{"_index":944,"title":{},"body":{"controllers/UsersController.html":{}}}],["prisma.settingupdateinput",{"_index":898,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["prisma.usercreateinput",{"_index":597,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["prisma.usercreatenestedonewithoutinfoinput",{"_index":568,"title":{},"body":{"classes/CreateInfoDto.html":{}}}],["prisma.userinclude",{"_index":970,"title":{},"body":{"injectables/UsersService.html":{}}}],["prisma.userorderbywithrelationinput",{"_index":928,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["prisma.userwhereinput",{"_index":926,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["prisma.userwhereuniqueinput",{"_index":925,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["prisma/.../seed.ts",{"_index":1069,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["prisma/client",{"_index":572,"title":{},"body":{"classes/CreateInfoDto.html":{},"classes/CreateUserDto.html":{},"classes/InfoEntity.html":{},"classes/PositionEntity.html":{},"classes/RoleEntity.html":{},"injectables/SessionAuthenticationService.html":{},"classes/SettingEntity.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["prisma/seed.ts",{"_index":1008,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["prismaclient",{"_index":1163,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prismamodule",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["prismamodule.forroot",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["prismaserive",{"_index":725,"title":{},"body":{"injectables/SessionAuthenticationService.html":{}}}],["prismaservice",{"_index":317,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/SessionAuthenticationService.html":{},"injectables/TfaAuthenticationService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["private",{"_index":84,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/CloudService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"injectables/TfaAuthenticationService.html":{},"injectables/UsersService.html":{}}}],["process.env.session_secret",{"_index":336,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["production",{"_index":93,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"index.html":{}}}],["progressive",{"_index":1072,"title":{},"body":{"index.html":{}}}],["project",{"_index":1105,"title":{},"body":{"index.html":{}}}],["promise",{"_index":27,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"guards/RolesGuard.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"injectables/UsersService.html":{}}}],["promise.all",{"_index":423,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["promise.allsettled(guardpromises",{"_index":267,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["promisify",{"_index":714,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["promisify(request.login.bind(request))(user",{"_index":720,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["properties",{"_index":101,"title":{"properties.html":{}},"body":{"interfaces/ActiveUserData.html":{},"guards/AuthenticationGuard.html":{},"injectables/CloudService.html":{},"classes/CreateInfoDto.html":{},"classes/CreateUserDto.html":{},"classes/InfoEntity.html":{},"classes/PositionEntity.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RoleEntity.html":{},"classes/SettingEntity.html":{},"classes/SignInDto.html":{},"classes/SignInWithTokenDto.html":{},"classes/SignUpDto.html":{},"classes/UserEntity.html":{},"properties.html":{}}}],["provide",{"_index":321,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/AuthorizationModule.html":{},"modules/CloudModule.html":{}}}],["providers",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/AuthorizationModule.html":{},"modules/CloudModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["putobjectcommand",{"_index":541,"title":{},"body":{"injectables/CloudService.html":{}}}],["qrcode",{"_index":212,"title":{},"body":{"controllers/AuthenticationController.html":{},"dependencies.html":{}}}],["randomuuid",{"_index":371,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["read",{"_index":1115,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":85,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"controllers/CloudController.html":{},"injectables/CloudService.html":{},"guards/RolesGuard.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"injectables/TfaAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["record",{"_index":253,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["redis",{"_index":308,"title":{},"body":{"modules/AuthenticationModule.html":{},"dependencies.html":{}}}],["redis(process.env.redis_url",{"_index":335,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["redisclient",{"_index":645,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["redisclient(process.env.redis_url",{"_index":665,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["redisstore",{"_index":329,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["reflect",{"_index":1056,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":246,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["refresh",{"_index":435,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["refreshtoken",{"_index":157,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["refreshtoken(@body",{"_index":227,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refreshtoken(refreshtokendto",{"_index":166,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refreshtoken.refreshtoken",{"_index":432,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtokendto",{"_index":167,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["refreshtokenid",{"_index":420,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtokenidsstorage",{"_index":280,"title":{"injectables/RefreshTokenIdsStorage.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"coverage.html":{},"overview.html":{}}}],["refreshtokenidsstorageerror",{"_index":373,"title":{"classes/RefreshTokenIdsStorageError.html":{}},"body":{"injectables/AuthenticationService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"coverage.html":{}}}],["refreshtokenidsstorageerror('token",{"_index":670,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["refreshtokens",{"_index":347,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtokens(refreshtoken",{"_index":359,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtokenstrategy",{"_index":674,"title":{"injectables/RefreshTokenStrategy.html":{}},"body":{"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["region",{"_index":529,"title":{},"body":{"injectables/CloudService.html":{}}}],["rejected",{"_index":268,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["rejected['reason",{"_index":272,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["remove",{"_index":862,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":946,"title":{},"body":{"controllers/UsersController.html":{}}}],["remove(id",{"_index":885,"title":{},"body":{"controllers/UsersController.html":{}}}],["remove(where",{"_index":976,"title":{},"body":{"injectables/UsersService.html":{}}}],["repository",{"_index":1084,"title":{},"body":{"index.html":{}}}],["req",{"_index":713,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["request",{"_index":679,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"guards/SessionGuard.html":{},"miscellaneous/variables.html":{}}}],["request.headers?.authorization.split",{"_index":682,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["request.isauthenticated",{"_index":737,"title":{},"body":{"guards/SessionGuard.html":{}}}],["request[request_user_key",{"_index":1160,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request_user_key",{"_index":697,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":823,"title":{},"body":{"classes/UserEntity.html":{}}}],["res",{"_index":185,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["resave",{"_index":337,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["reset",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CloudModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":162,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["response.type('png",{"_index":238,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["result",{"_index":274,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/UsersController.html":{}}}],["result.info",{"_index":942,"title":{},"body":{"controllers/UsersController.html":{}}}],["result.setting",{"_index":945,"title":{},"body":{"controllers/UsersController.html":{}}}],["result.status",{"_index":271,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["result.value",{"_index":275,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["result[1].info",{"_index":1003,"title":{},"body":{"injectables/UsersService.html":{}}}],["results",{"_index":57,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/AuthorizationModule.html":{},"injectables/BcryptService.html":{},"controllers/CloudController.html":{},"modules/CloudModule.html":{},"injectables/CloudService.html":{},"classes/CreateInfoDto.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"modules/IamModule.html":{},"classes/InfoEntity.html":{},"classes/PositionEntity.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/RoleEntity.html":{},"guards/RolesGuard.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SettingEntity.html":{},"classes/SignInDto.html":{},"classes/SignInWithTokenDto.html":{},"classes/SignUpDto.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"classes/updateInfoDto.html":{},"classes/updateUserDto.html":{},"miscellaneous/variables.html":{}}}],["results.find((result",{"_index":270,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["results.some",{"_index":273,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["retrieve",{"_index":852,"title":{},"body":{"classes/UserSerializer.html":{}}}],["return",{"_index":46,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"controllers/CloudController.html":{},"injectables/CloudService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":25,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"controllers/CloudController.html":{},"injectables/CloudService.html":{},"injectables/HashingService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["role",{"_index":686,"title":{},"body":{"classes/RoleEntity.html":{}}}],["role.entity",{"_index":822,"title":{},"body":{"classes/UserEntity.html":{}}}],["role.name",{"_index":422,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["roleentity",{"_index":684,"title":{"classes/RoleEntity.html":{}},"body":{"classes/RoleEntity.html":{},"guards/RolesGuard.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roleentity('admin",{"_index":920,"title":{},"body":{"controllers/UsersController.html":{}}}],["roleentity())@get",{"_index":870,"title":{},"body":{"controllers/UsersController.html":{}}}],["roles",{"_index":103,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/AuthenticationService.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(new",{"_index":919,"title":{},"body":{"controllers/UsersController.html":{}}}],["roles_key",{"_index":699,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":441,"title":{"guards/RolesGuard.html":{}},"body":{"modules/AuthorizationModule.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["run",{"_index":1090,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":39,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/RolesGuard.html":{},"guards/SessionGuard.html":{},"dependencies.html":{}}}],["s3",{"_index":515,"title":{},"body":{"injectables/CloudService.html":{},"dependencies.html":{}}}],["s3client",{"_index":528,"title":{},"body":{"injectables/CloudService.html":{}}}],["salt",{"_index":456,"title":{},"body":{"injectables/BcryptService.html":{}}}],["samesite",{"_index":340,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["saveuninitialized",{"_index":338,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["sayhello",{"_index":707,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["sayhello(@activeuser",{"_index":721,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["sayhello(user",{"_index":708,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["scalable",{"_index":1077,"title":{},"body":{"index.html":{}}}],["scheme",{"_index":742,"title":{},"body":{"classes/SettingEntity.html":{}}}],["sdk/client",{"_index":543,"title":{},"body":{"injectables/CloudService.html":{},"dependencies.html":{}}}],["secret",{"_index":233,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/TfaAuthenticationService.html":{}}}],["secretaccesskey",{"_index":536,"title":{},"body":{"injectables/CloudService.html":{}}}],["secretorkey",{"_index":94,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["select",{"_index":803,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["serializer",{"_index":315,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["serializer.ts",{"_index":826,"title":{},"body":{"classes/UserSerializer.html":{},"coverage.html":{}}}],["serializer.ts:17",{"_index":837,"title":{},"body":{"classes/UserSerializer.html":{}}}],["serializer.ts:21",{"_index":840,"title":{},"body":{"classes/UserSerializer.html":{}}}],["serializer.ts:34",{"_index":835,"title":{},"body":{"classes/UserSerializer.html":{}}}],["serializer.ts:6",{"_index":831,"title":{},"body":{"classes/UserSerializer.html":{}}}],["serializer/user",{"_index":314,"title":{},"body":{"modules/AuthenticationModule.html":{},"classes/UserSerializer.html":{},"coverage.html":{}}}],["serializeuser",{"_index":830,"title":{},"body":{"classes/UserSerializer.html":{}}}],["serializeuser(user",{"_index":838,"title":{},"body":{"classes/UserSerializer.html":{}}}],["server",{"_index":1078,"title":{},"body":{"index.html":{}}}],["services/authentication.service",{"_index":187,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{}}}],["services/session",{"_index":302,"title":{},"body":{"modules/AuthenticationModule.html":{},"controllers/SessionAuthenticationController.html":{}}}],["services/tfa",{"_index":207,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{}}}],["session",{"_index":307,"title":{},"body":{"modules/AuthenticationModule.html":{},"controllers/SessionAuthenticationController.html":{},"classes/UserSerializer.html":{},"dependencies.html":{}}}],["sessionauthenticationcontroller",{"_index":304,"title":{"controllers/SessionAuthenticationController.html":{}},"body":{"modules/AuthenticationModule.html":{},"controllers/SessionAuthenticationController.html":{},"coverage.html":{}}}],["sessionauthenticationservice",{"_index":301,"title":{"injectables/SessionAuthenticationService.html":{}},"body":{"modules/AuthenticationModule.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"coverage.html":{}}}],["sessionauthservice",{"_index":717,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["sessionguard",{"_index":734,"title":{"guards/SessionGuard.html":{}},"body":{"guards/SessionGuard.html":{},"coverage.html":{}}}],["set",{"_index":91,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["setmetadata(auth_type_key",{"_index":1162,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(roles_key",{"_index":1164,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setting",{"_index":381,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/SettingEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["settingentity",{"_index":738,"title":{"classes/SettingEntity.html":{}},"body":{"classes/SettingEntity.html":{},"coverage.html":{}}}],["side",{"_index":1079,"title":{},"body":{"index.html":{}}}],["signin",{"_index":158,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{}}}],["signin(@body",{"_index":222,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["signin(@req",{"_index":718,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["signin(request",{"_index":711,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["signin(signindto",{"_index":170,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{}}}],["signindto",{"_index":171,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"classes/SignInDto.html":{},"coverage.html":{}}}],["signindto.password",{"_index":733,"title":{},"body":{"injectables/SessionAuthenticationService.html":{}}}],["signindto.tfacode",{"_index":393,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["signinwithtoken",{"_index":159,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["signinwithtoken(@body",{"_index":224,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["signinwithtoken(signinwithtoken",{"_index":174,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["signinwithtokendto",{"_index":175,"title":{"classes/SignInWithTokenDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/SignInWithTokenDto.html":{},"coverage.html":{}}}],["signtoken",{"_index":348,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["signtoken(userid",{"_index":363,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["signup",{"_index":160,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["signup(@body",{"_index":220,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["signup(signupdto",{"_index":177,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["signupdto",{"_index":178,"title":{"classes/SignUpDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/SignUpDto.html":{},"coverage.html":{}}}],["skip",{"_index":922,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/AuthorizationModule.html":{},"injectables/BcryptService.html":{},"controllers/CloudController.html":{},"modules/CloudModule.html":{},"injectables/CloudService.html":{},"classes/CreateInfoDto.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"modules/IamModule.html":{},"classes/InfoEntity.html":{},"classes/PositionEntity.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/RoleEntity.html":{},"guards/RolesGuard.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SettingEntity.html":{},"classes/SignInDto.html":{},"classes/SignInWithTokenDto.html":{},"classes/SignUpDto.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{},"classes/updateInfoDto.html":{},"classes/updateUserDto.html":{}}}],["sponsors",{"_index":1108,"title":{},"body":{"index.html":{}}}],["src/.../active",{"_index":1150,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth",{"_index":1062,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../auth.decorator.ts",{"_index":1151,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cloudflare_r2.config.ts",{"_index":1152,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../iam.contant.ts",{"_index":1153,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1068,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../roles.decorator.ts",{"_index":1154,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":110,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":113,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":148,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":149,"title":{},"body":{"injectables/AppService.html":{}}}],["src/cloud/cloud.controller.ts",{"_index":459,"title":{},"body":{"controllers/CloudController.html":{},"coverage.html":{}}}],["src/cloud/cloud.controller.ts:23",{"_index":465,"title":{},"body":{"controllers/CloudController.html":{}}}],["src/cloud/cloud.controller.ts:29",{"_index":468,"title":{},"body":{"controllers/CloudController.html":{}}}],["src/cloud/cloud.controller.ts:36",{"_index":472,"title":{},"body":{"controllers/CloudController.html":{}}}],["src/cloud/cloud.module.ts",{"_index":498,"title":{},"body":{"modules/CloudModule.html":{}}}],["src/cloud/cloud.service.ts",{"_index":514,"title":{},"body":{"injectables/CloudService.html":{},"coverage.html":{}}}],["src/cloud/cloud.service.ts:13",{"_index":538,"title":{},"body":{"injectables/CloudService.html":{}}}],["src/cloud/cloud.service.ts:20",{"_index":518,"title":{},"body":{"injectables/CloudService.html":{}}}],["src/cloud/cloud.service.ts:28",{"_index":520,"title":{},"body":{"injectables/CloudService.html":{}}}],["src/cloud/cloud.service.ts:32",{"_index":522,"title":{},"body":{"injectables/CloudService.html":{}}}],["src/cloud/cloud.service.ts:41",{"_index":524,"title":{},"body":{"injectables/CloudService.html":{}}}],["src/cloud/config/cloudflare_r2.config.ts",{"_index":1018,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/iam/authentication/authentication.module.ts",{"_index":282,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["src/iam/authentication/controllers/authentication.controller.ts",{"_index":153,"title":{},"body":{"controllers/AuthenticationController.html":{},"coverage.html":{}}}],["src/iam/authentication/controllers/authentication.controller.ts:33",{"_index":180,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/iam/authentication/controllers/authentication.controller.ts:39",{"_index":173,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/iam/authentication/controllers/authentication.controller.ts:45",{"_index":176,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/iam/authentication/controllers/authentication.controller.ts:51",{"_index":169,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/iam/authentication/controllers/authentication.controller.ts:58",{"_index":165,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/iam/authentication/controllers/session",{"_index":705,"title":{},"body":{"controllers/SessionAuthenticationController.html":{},"coverage.html":{}}}],["src/iam/authentication/decorators/active",{"_index":1020,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/iam/authentication/decorators/auth/auth.decorator.ts",{"_index":1022,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/iam/authentication/dto/refresh",{"_index":639,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/iam/authentication/dto/sign",{"_index":765,"title":{},"body":{"classes/SignInDto.html":{},"classes/SignInWithTokenDto.html":{},"classes/SignUpDto.html":{},"coverage.html":{}}}],["src/iam/authentication/enums/auth",{"_index":1064,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/iam/authentication/guards/access",{"_index":6,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/iam/authentication/guards/authentication/authentication.guard.ts",{"_index":241,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/iam/authentication/guards/authentication/authentication.guard.ts:23",{"_index":248,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/iam/authentication/guards/authentication/authentication.guard.ts:8",{"_index":247,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/iam/authentication/guards/session/session.guard.ts",{"_index":735,"title":{},"body":{"guards/SessionGuard.html":{},"coverage.html":{}}}],["src/iam/authentication/guards/session/session.guard.ts:6",{"_index":736,"title":{},"body":{"guards/SessionGuard.html":{}}}],["src/iam/authentication/interfaces/active",{"_index":99,"title":{},"body":{"interfaces/ActiveUserData.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/iam/authentication/services/authentication.service.ts",{"_index":345,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{}}}],["src/iam/authentication/services/authentication.service.ts:116",{"_index":358,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/iam/authentication/services/authentication.service.ts:146",{"_index":360,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/iam/authentication/services/authentication.service.ts:180",{"_index":366,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/iam/authentication/services/authentication.service.ts:27",{"_index":354,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/iam/authentication/services/authentication.service.ts:38",{"_index":361,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/iam/authentication/services/authentication.service.ts:69",{"_index":362,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/iam/authentication/services/authentication.service.ts:94",{"_index":369,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/iam/authentication/services/session",{"_index":722,"title":{},"body":{"injectables/SessionAuthenticationService.html":{},"coverage.html":{}}}],["src/iam/authentication/services/tfa",{"_index":783,"title":{},"body":{"injectables/TfaAuthenticationService.html":{},"coverage.html":{}}}],["src/iam/authentication/strategies/access",{"_index":61,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"coverage.html":{}}}],["src/iam/authentication/strategies/refresh",{"_index":675,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["src/iam/authentication/utils/refresh",{"_index":643,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"coverage.html":{}}}],["src/iam/authentication/utils/user",{"_index":825,"title":{},"body":{"classes/UserSerializer.html":{},"coverage.html":{}}}],["src/iam/authorization/authorization.module.ts",{"_index":440,"title":{},"body":{"modules/AuthorizationModule.html":{}}}],["src/iam/authorization/decorators/roles/roles.decorator.ts",{"_index":1025,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/iam/authorization/guards/roles/roles.guard.ts",{"_index":693,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/iam/authorization/guards/roles/roles.guard.ts:10",{"_index":694,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/iam/authorization/guards/roles/roles.guard.ts:12",{"_index":695,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/iam/config/jwt.config/jwt.config",{"_index":81,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["src/iam/constants/iam.contant.ts",{"_index":1026,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/iam/hashing/bcrypt/bcrypt.service.ts",{"_index":443,"title":{},"body":{"injectables/BcryptService.html":{},"coverage.html":{}}}],["src/iam/hashing/bcrypt/bcrypt.service.ts:11",{"_index":449,"title":{},"body":{"injectables/BcryptService.html":{}}}],["src/iam/hashing/bcrypt/bcrypt.service.ts:7",{"_index":452,"title":{},"body":{"injectables/BcryptService.html":{}}}],["src/iam/hashing/hashing.service.ts",{"_index":600,"title":{},"body":{"injectables/HashingService.html":{},"coverage.html":{}}}],["src/iam/hashing/hashing.service.ts:5",{"_index":603,"title":{},"body":{"injectables/HashingService.html":{}}}],["src/iam/hashing/hashing.service.ts:6",{"_index":602,"title":{},"body":{"injectables/HashingService.html":{}}}],["src/iam/iam.module.ts",{"_index":606,"title":{},"body":{"modules/IamModule.html":{}}}],["src/main.ts",{"_index":1027,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/users/dto/create",{"_index":552,"title":{},"body":{"classes/CreateInfoDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":1029,"title":{},"body":{"coverage.html":{},"classes/updateInfoDto.html":{},"classes/updateUserDto.html":{}}}],["src/users/entity/info.entity.ts",{"_index":610,"title":{},"body":{"classes/InfoEntity.html":{},"coverage.html":{}}}],["src/users/entity/info.entity.ts:16",{"_index":629,"title":{},"body":{"classes/InfoEntity.html":{}}}],["src/users/entity/info.entity.ts:20",{"_index":615,"title":{},"body":{"classes/InfoEntity.html":{}}}],["src/users/entity/info.entity.ts:24",{"_index":616,"title":{},"body":{"classes/InfoEntity.html":{}}}],["src/users/entity/info.entity.ts:28",{"_index":623,"title":{},"body":{"classes/InfoEntity.html":{}}}],["src/users/entity/info.entity.ts:32",{"_index":622,"title":{},"body":{"classes/InfoEntity.html":{}}}],["src/users/entity/info.entity.ts:36",{"_index":627,"title":{},"body":{"classes/InfoEntity.html":{}}}],["src/users/entity/info.entity.ts:41",{"_index":618,"title":{},"body":{"classes/InfoEntity.html":{}}}],["src/users/entity/info.entity.ts:46",{"_index":625,"title":{},"body":{"classes/InfoEntity.html":{}}}],["src/users/entity/info.entity.ts:49",{"_index":621,"title":{},"body":{"classes/InfoEntity.html":{}}}],["src/users/entity/info.entity.ts:52",{"_index":628,"title":{},"body":{"classes/InfoEntity.html":{}}}],["src/users/entity/position.entity.ts",{"_index":632,"title":{},"body":{"classes/PositionEntity.html":{},"coverage.html":{}}}],["src/users/entity/position.entity.ts:4",{"_index":635,"title":{},"body":{"classes/PositionEntity.html":{}}}],["src/users/entity/position.entity.ts:5",{"_index":636,"title":{},"body":{"classes/PositionEntity.html":{}}}],["src/users/entity/position.entity.ts:6",{"_index":634,"title":{},"body":{"classes/PositionEntity.html":{}}}],["src/users/entity/position.entity.ts:7",{"_index":637,"title":{},"body":{"classes/PositionEntity.html":{}}}],["src/users/entity/position.entity.ts:8",{"_index":638,"title":{},"body":{"classes/PositionEntity.html":{}}}],["src/users/entity/role.entity",{"_index":696,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/users/entity/role.entity.ts",{"_index":685,"title":{},"body":{"classes/RoleEntity.html":{},"coverage.html":{}}}],["src/users/entity/role.entity.ts:10",{"_index":690,"title":{},"body":{"classes/RoleEntity.html":{}}}],["src/users/entity/role.entity.ts:4",{"_index":689,"title":{},"body":{"classes/RoleEntity.html":{}}}],["src/users/entity/role.entity.ts:9",{"_index":691,"title":{},"body":{"classes/RoleEntity.html":{}}}],["src/users/entity/setting.entity.ts",{"_index":739,"title":{},"body":{"classes/SettingEntity.html":{},"coverage.html":{}}}],["src/users/entity/setting.entity.ts:12",{"_index":756,"title":{},"body":{"classes/SettingEntity.html":{}}}],["src/users/entity/setting.entity.ts:16",{"_index":753,"title":{},"body":{"classes/SettingEntity.html":{}}}],["src/users/entity/setting.entity.ts:20",{"_index":747,"title":{},"body":{"classes/SettingEntity.html":{}}}],["src/users/entity/setting.entity.ts:24",{"_index":750,"title":{},"body":{"classes/SettingEntity.html":{}}}],["src/users/entity/setting.entity.ts:26",{"_index":744,"title":{},"body":{"classes/SettingEntity.html":{}}}],["src/users/entity/setting.entity.ts:27",{"_index":757,"title":{},"body":{"classes/SettingEntity.html":{}}}],["src/users/entity/setting.entity.ts:8",{"_index":759,"title":{},"body":{"classes/SettingEntity.html":{}}}],["src/users/entity/user.entity",{"_index":377,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/UserSerializer.html":{}}}],["src/users/entity/user.entity.ts",{"_index":806,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["src/users/entity/user.entity.ts:11",{"_index":812,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/entity/user.entity.ts:14",{"_index":815,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/entity/user.entity.ts:17",{"_index":814,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/entity/user.entity.ts:24",{"_index":820,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/entity/user.entity.ts:27",{"_index":816,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/entity/user.entity.ts:31",{"_index":811,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/entity/user.entity.ts:34",{"_index":808,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/entity/user.entity.ts:37",{"_index":821,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/entity/user.entity.ts:8",{"_index":813,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/users.controller.ts",{"_index":854,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:109",{"_index":900,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:121",{"_index":887,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:127",{"_index":903,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:31",{"_index":868,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:38",{"_index":871,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:43",{"_index":875,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:57",{"_index":881,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:62",{"_index":879,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:71",{"_index":884,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:80",{"_index":892,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:97",{"_index":896,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":960,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":962,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:10",{"_index":965,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:109",{"_index":983,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:130",{"_index":977,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:136",{"_index":986,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:16",{"_index":967,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:22",{"_index":968,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:43",{"_index":971,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:49",{"_index":973,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:68",{"_index":975,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:75",{"_index":979,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:88",{"_index":981,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":1091,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1094,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1095,"title":{},"body":{"index.html":{}}}],["started",{"_index":1071,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1083,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1007,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":243,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["status",{"_index":556,"title":{},"body":{"classes/CreateInfoDto.html":{},"classes/InfoEntity.html":{}}}],["stay",{"_index":1118,"title":{},"body":{"index.html":{}}}],["storage",{"_index":430,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["store",{"_index":333,"title":{},"body":{"modules/AuthenticationModule.html":{},"classes/UserSerializer.html":{}}}],["storedtokenid",{"_index":668,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["strategies/access",{"_index":292,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["strategy",{"_index":77,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["string",{"_index":105,"title":{},"body":{"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"controllers/CloudController.html":{},"injectables/CloudService.html":{},"classes/CreateInfoDto.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"classes/InfoEntity.html":{},"classes/PositionEntity.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"classes/RoleEntity.html":{},"injectables/SessionAuthenticationService.html":{},"classes/SignInDto.html":{},"classes/SignInWithTokenDto.html":{},"classes/SignUpDto.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":104,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/AuthenticationService.html":{},"classes/UserSerializer.html":{}}}],["super",{"_index":45,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["super(message",{"_index":663,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["super.canactivate(context",{"_index":47,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["support",{"_index":1109,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1129,"title":{},"body":{"modules.html":{}}}],["t",{"_index":365,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["table",{"_index":1034,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1033,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":923,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["task",{"_index":1143,"title":{},"body":{"properties.html":{}}}],["test",{"_index":1098,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1101,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1100,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1097,"title":{},"body":{"index.html":{}}}],["tfa",{"_index":378,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["tfaauthenticationservice",{"_index":206,"title":{"injectables/TfaAuthenticationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/TfaAuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["tfacode",{"_index":767,"title":{},"body":{"classes/SignInDto.html":{}}}],["tfasecret",{"_index":581,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{}}}],["tfaserivce",{"_index":217,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["tfaservice",{"_index":353,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["thanks",{"_index":1107,"title":{},"body":{"index.html":{}}}],["theme",{"_index":743,"title":{},"body":{"classes/SettingEntity.html":{}}}],["then((result",{"_index":1002,"title":{},"body":{"injectables/UsersService.html":{}}}],["then((user",{"_index":935,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.accesstokenguard",{"_index":255,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.appservice.gethello",{"_index":117,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.refreshtokens(refreshtokendto",{"_index":228,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authservice.signin(signindto",{"_index":223,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authservice.signinwithtoken(signinwithtoken",{"_index":225,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authservice.signup(signupdto",{"_index":221,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authtypeguardmap[type",{"_index":262,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.checkemptydata(data",{"_index":997,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.checkexist(signindto.email",{"_index":731,"title":{},"body":{"injectables/SessionAuthenticationService.html":{}}}],["this.cloudflare_r2configservice.access_key_id",{"_index":535,"title":{},"body":{"injectables/CloudService.html":{}}}],["this.cloudflare_r2configservice.bucket_name",{"_index":548,"title":{},"body":{"injectables/CloudService.html":{}}}],["this.cloudflare_r2configservice.secret_access_key",{"_index":537,"title":{},"body":{"injectables/CloudService.html":{}}}],["this.cloudservice.listallbuckets",{"_index":484,"title":{},"body":{"controllers/CloudController.html":{}}}],["this.cloudservice.listallobjects",{"_index":487,"title":{},"body":{"controllers/CloudController.html":{}}}],["this.cloudservice.listallobjects(prefix",{"_index":490,"title":{},"body":{"controllers/CloudController.html":{}}}],["this.cloudservice.upload(file.originalname",{"_index":493,"title":{},"body":{"controllers/CloudController.html":{}}}],["this.cloudservice.upload(filename",{"_index":1000,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.configservice.getorthrow('tfa_app_name",{"_index":799,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["this.deserializeuser(payload",{"_index":846,"title":{},"body":{"classes/UserSerializer.html":{}}}],["this.generatetoken(user",{"_index":398,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.getpassportinstance",{"_index":842,"title":{},"body":{"classes/UserSerializer.html":{}}}],["this.hashservice.compare",{"_index":732,"title":{},"body":{"injectables/SessionAuthenticationService.html":{}}}],["this.hashservice.compare(password",{"_index":386,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.hashservice.hash(password",{"_index":412,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.jwtconfiguration.accesstokenttl",{"_index":426,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.jwtconfiguration.audience",{"_index":402,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.jwtconfiguration.issuer",{"_index":404,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.jwtconfiguration.refreshtokenttl",{"_index":428,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.jwtconfiguration.secret",{"_index":400,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.jwtservice.signasync",{"_index":438,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.jwtservice.verifyasync",{"_index":399,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.name",{"_index":692,"title":{},"body":{"classes/RoleEntity.html":{}}}],["this.prismaserive.user.findunique",{"_index":730,"title":{},"body":{"injectables/SessionAuthenticationService.html":{}}}],["this.prismaservice.info.create",{"_index":992,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.setting.create",{"_index":993,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.user.create",{"_index":991,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.user.delete",{"_index":998,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.user.findmany",{"_index":994,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.user.findunique",{"_index":995,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.user.finduniqueorthrow",{"_index":802,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["this.prismaservice.user.update",{"_index":804,"title":{},"body":{"injectables/TfaAuthenticationService.html":{},"injectables/UsersService.html":{}}}],["this.redisclient",{"_index":664,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["this.redisclient.del(this.getkey(userid",{"_index":671,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["this.redisclient.get(this.getkey(userid",{"_index":669,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["this.redisclient.quit",{"_index":666,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["this.redisclient.set(this.getkey(userid",{"_index":667,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["this.reflector.getallandoverride",{"_index":257,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["this.refreshtokenidsstorage.insert(user.id",{"_index":431,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.refreshtokenidsstorage.invalidate(user.id",{"_index":434,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.refreshtokenidsstorage.validate",{"_index":433,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.s3.send",{"_index":546,"title":{},"body":{"injectables/CloudService.html":{}}}],["this.s3.send(new",{"_index":545,"title":{},"body":{"injectables/CloudService.html":{}}}],["this.serializeuser(user",{"_index":844,"title":{},"body":{"classes/UserSerializer.html":{}}}],["this.sessionauthservice.signin(signindto",{"_index":719,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["this.signtoken",{"_index":424,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.signtoken(user.id",{"_index":427,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.tfaserivce.enabletfasecret(activeuser.email",{"_index":237,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.tfaserivce.generatesecret",{"_index":235,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.tfaservice.verifycode",{"_index":392,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.userservice.create(user",{"_index":415,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.userservice.findone",{"_index":380,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.usersservice",{"_index":934,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create(createuserdto",{"_index":918,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":921,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findfilter(params",{"_index":929,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone",{"_index":931,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove",{"_index":947,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update",{"_index":939,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updateinfo",{"_index":940,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updatesetting",{"_index":943,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.uploadavatar",{"_index":956,"title":{},"body":{"controllers/UsersController.html":{}}}],["throttlerguard",{"_index":502,"title":{},"body":{"modules/CloudModule.html":{}}}],["throttlermodule",{"_index":503,"title":{},"body":{"modules/CloudModule.html":{}}}],["throttlermodule.forrootasync",{"_index":505,"title":{},"body":{"modules/CloudModule.html":{}}}],["throw",{"_index":48,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/SessionAuthenticationService.html":{},"injectables/UsersService.html":{}}}],["todo",{"_index":90,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["tofilestream",{"_index":211,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["tofilestream(response",{"_index":239,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["token",{"_index":55,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/TfaAuthenticationService.html":{},"coverage.html":{}}}],["token.dto",{"_index":200,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["token.dto.ts",{"_index":640,"title":{},"body":{"classes/RefreshTokenDto.html":{},"classes/SignInWithTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:5",{"_index":642,"title":{},"body":{"classes/RefreshTokenDto.html":{},"classes/SignInWithTokenDto.html":{}}}],["token.dto/refresh",{"_index":199,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.dto/sign",{"_index":213,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/SignInWithTokenDto.html":{},"coverage.html":{}}}],["token.guard",{"_index":249,"title":{},"body":{"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{}}}],["token.guard.ts",{"_index":8,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:11",{"_index":15,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:15",{"_index":18,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:21",{"_index":31,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.strategy",{"_index":293,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["token.strategy.ts",{"_index":62,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["token.strategy.ts:10",{"_index":677,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["token.strategy.ts:19",{"_index":680,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["token.strategy.ts:20",{"_index":70,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["token.strategy.ts:8",{"_index":67,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["token/access",{"_index":7,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{}}}],["token/refresh",{"_index":676,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["tokenid",{"_index":653,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["touch",{"_index":1119,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":1045,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":92,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"guards/AuthenticationGuard.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/RefreshTokenStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["true})@isoptional",{"_index":819,"title":{},"body":{"classes/UserEntity.html":{}}}],["try",{"_index":414,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["ttl",{"_index":507,"title":{},"body":{"modules/CloudModule.html":{}}}],["twitter",{"_index":1125,"title":{},"body":{"index.html":{}}}],["type",{"_index":22,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/ActiveUserData.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/BcryptService.html":{},"controllers/CloudController.html":{},"injectables/CloudService.html":{},"classes/CreateInfoDto.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"classes/InfoEntity.html":{},"classes/PositionEntity.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/RoleEntity.html":{},"guards/RolesGuard.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"guards/SessionGuard.html":{},"classes/SettingEntity.html":{},"classes/SignInDto.html":{},"classes/SignInWithTokenDto.html":{},"classes/SignUpDto.html":{},"injectables/TfaAuthenticationService.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type.enum",{"_index":197,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"controllers/SessionAuthenticationController.html":{}}}],["type.enum.ts",{"_index":1063,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typescript",{"_index":1082,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":35,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{},"injectables/UsersService.html":{}}}],["unauthorizedexception('data",{"_index":989,"title":{},"body":{"injectables/UsersService.html":{}}}],["unauthorizedexception('invalid",{"_index":395,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["unauthorizedexception('no",{"_index":53,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["unauthorizedexception('user",{"_index":388,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{}}}],["unauthorizedexception(error.message",{"_index":437,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["undefined",{"_index":408,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["unit",{"_index":1096,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":72,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CloudController.html":{},"injectables/CloudService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"injectables/TfaAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["up",{"_index":179,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["up.dto",{"_index":190,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["up.dto.ts",{"_index":774,"title":{},"body":{"classes/SignUpDto.html":{},"coverage.html":{}}}],["up.dto.ts:15",{"_index":779,"title":{},"body":{"classes/SignUpDto.html":{}}}],["up.dto.ts:9",{"_index":777,"title":{},"body":{"classes/SignUpDto.html":{}}}],["up.dto/sign",{"_index":189,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/SignUpDto.html":{},"coverage.html":{}}}],["update",{"_index":863,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(params",{"_index":978,"title":{},"body":{"injectables/UsersService.html":{}}}],["update(user",{"_index":888,"title":{},"body":{"controllers/UsersController.html":{}}}],["updatedat",{"_index":613,"title":{},"body":{"classes/InfoEntity.html":{},"classes/PositionEntity.html":{},"classes/SettingEntity.html":{},"classes/UserEntity.html":{}}}],["updateinfo",{"_index":864,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateinfo(params",{"_index":980,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateinfo(updateinfo",{"_index":893,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateinfodto",{"_index":894,"title":{"classes/updateInfoDto.html":{}},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/updateInfoDto.html":{}}}],["updatesetting",{"_index":865,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatesetting(params",{"_index":982,"title":{},"body":{"injectables/UsersService.html":{}}}],["updatesetting(user",{"_index":897,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuser",{"_index":889,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserdto",{"_index":890,"title":{"classes/updateUserDto.html":{}},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/updateUserDto.html":{}}}],["upload",{"_index":516,"title":{},"body":{"injectables/CloudService.html":{},"injectables/UsersService.html":{}}}],["upload(filename",{"_index":523,"title":{},"body":{"injectables/CloudService.html":{}}}],["uploadavatar",{"_index":866,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["uploadavatar(user",{"_index":901,"title":{},"body":{"controllers/UsersController.html":{}}}],["uploadavatar(where",{"_index":984,"title":{},"body":{"injectables/UsersService.html":{}}}],["uploadedfile",{"_index":475,"title":{},"body":{"controllers/CloudController.html":{},"controllers/UsersController.html":{}}}],["uploadfile",{"_index":463,"title":{},"body":{"controllers/CloudController.html":{}}}],["uploadfile(file",{"_index":469,"title":{},"body":{"controllers/CloudController.html":{}}}],["uri",{"_index":232,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/TfaAuthenticationService.html":{}}}],["useclass",{"_index":322,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/AuthorizationModule.html":{}}}],["usefactory",{"_index":506,"title":{},"body":{"modules/CloudModule.html":{}}}],["useinterceptors",{"_index":476,"title":{},"body":{"controllers/CloudController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":492,"title":{},"body":{"controllers/CloudController.html":{},"controllers/UsersController.html":{}}}],["user",{"_index":30,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/CreateInfoDto.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"guards/RolesGuard.html":{},"controllers/SessionAuthenticationController.html":{},"injectables/SessionAuthenticationService.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.decorator",{"_index":203,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["user.decorator.ts",{"_index":1021,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":376,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/updateUserDto.html":{}}}],["user.dto.ts",{"_index":579,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{},"classes/updateUserDto.html":{}}}],["user.dto.ts:15",{"_index":587,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:19",{"_index":583,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:23",{"_index":589,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:28",{"_index":585,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:33",{"_index":591,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":413,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/SessionAuthenticationController.html":{},"classes/UserSerializer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.id",{"_index":425,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/UserSerializer.html":{},"injectables/UsersService.html":{}}}],["user.info",{"_index":406,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/UsersController.html":{}}}],["user.istfaenabled",{"_index":390,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user.password",{"_index":387,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/SessionAuthenticationService.html":{}}}],["user.permissions",{"_index":851,"title":{},"body":{"classes/UserSerializer.html":{}}}],["user.roles",{"_index":849,"title":{},"body":{"classes/UserSerializer.html":{}}}],["user.roles.map((role",{"_index":421,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user.roles?.includes(role.name",{"_index":704,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.setting",{"_index":937,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.tfasecret",{"_index":394,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user/active",{"_index":202,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/SessionAuthenticationController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user?.[field",{"_index":1161,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userentity",{"_index":357,"title":{"classes/UserEntity.html":{}},"body":{"injectables/AuthenticationService.html":{},"classes/UserEntity.html":{},"classes/UserSerializer.html":{},"coverage.html":{}}}],["userid",{"_index":367,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/InfoEntity.html":{},"classes/PositionEntity.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{},"classes/SettingEntity.html":{},"injectables/UsersService.html":{}}}],["users",{"_index":855,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":961,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":908,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/dto/create",{"_index":375,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["users/users.module",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.service",{"_index":316,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{}}}],["userscontroller",{"_index":853,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userserializer",{"_index":312,"title":{"classes/UserSerializer.html":{}},"body":{"modules/AuthenticationModule.html":{},"classes/UserSerializer.html":{},"coverage.html":{}}}],["userservice",{"_index":350,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["usersmodule",{"_index":132,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":281,"title":{"injectables/UsersService.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usevalue",{"_index":513,"title":{},"body":{"modules/CloudModule.html":{}}}],["util",{"_index":715,"title":{},"body":{"controllers/SessionAuthenticationController.html":{}}}],["utils/refresh",{"_index":297,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{}}}],["utils/user",{"_index":313,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["validate",{"_index":64,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenIdsStorage.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["validate(payload",{"_index":69,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["validate(request",{"_index":678,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["validate(userid",{"_index":659,"title":{},"body":{"injectables/RefreshTokenIdsStorage.html":{},"classes/RefreshTokenIdsStorageError.html":{}}}],["validator",{"_index":575,"title":{},"body":{"classes/CreateInfoDto.html":{},"classes/CreateUserDto.html":{},"classes/InfoEntity.html":{},"classes/RefreshTokenDto.html":{},"classes/SettingEntity.html":{},"classes/SignInDto.html":{},"classes/SignInWithTokenDto.html":{},"classes/SignUpDto.html":{},"classes/UserEntity.html":{},"dependencies.html":{}}}],["validators",{"_index":950,"title":{},"body":{"controllers/UsersController.html":{}}}],["value",{"_index":527,"title":{},"body":{"injectables/CloudService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1013,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1149,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifycode",{"_index":786,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["verifycode(code",{"_index":793,"title":{},"body":{"injectables/TfaAuthenticationService.html":{}}}],["version",{"_index":1139,"title":{},"body":{"properties.html":{}}}],["void",{"_index":473,"title":{},"body":{"controllers/CloudController.html":{},"injectables/RefreshTokenIdsStorage.html":{},"classes/UserSerializer.html":{},"injectables/UsersService.html":{}}}],["watch",{"_index":1092,"title":{},"body":{"index.html":{}}}],["website",{"_index":1123,"title":{},"body":{"index.html":{}}}],["world",{"_index":151,"title":{},"body":{"injectables/AppService.html":{}}}],["yes",{"_index":368,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/CloudService.html":{},"injectables/UsersService.html":{}}}],["you'd",{"_index":1112,"title":{},"body":{"index.html":{}}}],["zenfection",{"_index":1145,"title":{},"body":{"properties.html":{}}}],["zoom",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CloudModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AccessTokenGuard.html":{"url":"guards/AccessTokenGuard.html","title":"guard - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/iam/authentication/guards/access-token/access-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/iam/authentication/guards/access-token/access-token.guard.ts:11\n                            \n                        \n\n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/guards/access-token/access-token.guard.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: any, user: any, info: any)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/guards/access-token/access-token.guard.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AccessTokenGuard extends AuthGuard('jwt') implements CanActivate {\n  constructor() {\n    super();\n  }\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    return super.canActivate(context);\n  }\n\n  handleRequest(err: any, user: any, info: any) {\n    // You can throw an exception based on either \"info\" or \"err\" arguments\n    if (err || !user || info) {\n      throw err || new UnauthorizedException('No access token found');\n    }\n    return user;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccessTokenStrategy.html":{"url":"injectables/AccessTokenStrategy.html","title":"injectable - AccessTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/strategies/access-token/access-token.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtConfigService: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/iam/authentication/strategies/access-token/access-token.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtConfigService\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/strategies/access-token/access-token.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport jwtConfig from '../../../../../src/iam/config/jwt.config/jwt.config';\n\n@Injectable()\nexport class AccessTokenStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor(\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfigService: ConfigType,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      //   ignoreExpiration: false, // TODO: set to true in production\n      secretOrKey: jwtConfigService.secret,\n    });\n  }\n\n  async validate(payload: any) {\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ActiveUserData.html":{"url":"interfaces/ActiveUserData.html","title":"interface - ActiveUserData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ActiveUserData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/interfaces/active-user-data.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            roles\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ActiveUserData {\n  sub: number;\n  email: string;\n  roles?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nCloudModule\n\nCloudModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCloudModule->AppModule\n\n\n\n\n\nIamModule\n\nIamModule\n\nAppModule -->\n\nIamModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CloudModule\n                        \n                        \n                            IamModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { PrismaModule } from 'nestjs-prisma';\nimport { IamModule } from './iam/iam.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { UsersModule } from './users/users.module';\nimport { CloudModule } from './cloud/cloud.module';\n\n@Module({\n  imports: [\n    PrismaModule.forRoot(),\n    ConfigModule.forRoot(),\n    IamModule,\n    CloudModule,\n    UsersModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthenticationController.html":{"url":"controllers/AuthenticationController.html","title":"controller - AuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/controllers/authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                generateQrCode\n                            \n                            \n                                    \n                                    \n                                refreshToken\n                            \n                            \n                                    \n                                    \n                                signIn\n                            \n                            \n                                    \n                                    \n                                signInWithToken\n                            \n                            \n                                    \n                                    \n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        generateQrCode\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateQrCode(response: Response, activeUser: ActiveUserData)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Auth(AuthType.Bearer)@Post('tfa/generate')\n                \n            \n\n            \n                \n                    Defined in src/iam/authentication/controllers/authentication.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    activeUser\n                                    \n                                                ActiveUserData\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('refresh-token')\n                \n            \n\n            \n                \n                    Defined in src/iam/authentication/controllers/authentication.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshTokenDto\n                                    \n                                                RefreshTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(signInDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('sign-in')\n                \n            \n\n            \n                \n                    Defined in src/iam/authentication/controllers/authentication.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInDto\n                                    \n                                                SignInDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        signInWithToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    signInWithToken(signInWithToken: SignInWithTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('sign-in-with-token')\n                \n            \n\n            \n                \n                    Defined in src/iam/authentication/controllers/authentication.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInWithToken\n                                    \n                                                SignInWithTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(signUpDto: SignUpDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('sign-up')\n                \n            \n\n            \n                \n                    Defined in src/iam/authentication/controllers/authentication.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signUpDto\n                                    \n                                                SignUpDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  HttpCode,\n  HttpStatus,\n  Post,\n  Res,\n} from '@nestjs/common';\nimport { AuthenticationService } from '../services/authentication.service';\nimport { SignUpDto } from '../dto/sign-up.dto/sign-up.dto';\nimport { SignInDto } from '../dto/sign-in.dto/sign-in.dto';\nimport { Auth } from '../decorators/auth/auth.decorator';\nimport { AuthType } from '../enums/auth-type.enum';\nimport { RefreshTokenDto } from '../dto/refresh-token.dto/refresh-token.dto';\nimport { ActiveUser } from '../decorators/active-user/active-user.decorator';\nimport { ActiveUserData } from '../interfaces/active-user-data.interface';\nimport { TfaAuthenticationService } from '../services/tfa-authentication/tfa-authentication.service';\n\nimport { Response } from 'express';\nimport { toFileStream } from 'qrcode';\nimport { SignInWithTokenDto } from '../dto/sign-in-with-token.dto/sign-in-with-token.dto';\n\n@Auth(AuthType.None)\n@Controller('authentication')\nexport class AuthenticationController {\n  constructor(\n    private readonly authService: AuthenticationService,\n    private readonly tfaSerivce: TfaAuthenticationService,\n  ) {}\n\n  @HttpCode(HttpStatus.OK)\n  @Post('sign-up')\n  signUp(@Body() signUpDto: SignUpDto) {\n    return this.authService.signUp(signUpDto);\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @Post('sign-in')\n  signIn(@Body() signInDto: SignInDto) {\n    return this.authService.signIn(signInDto);\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @Post('sign-in-with-token')\n  signInWithToken(@Body() signInWithToken: SignInWithTokenDto) {\n    return this.authService.signInWithToken(signInWithToken);\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @Post('refresh-token')\n  refreshToken(@Body() refreshTokenDto: RefreshTokenDto) {\n    return this.authService.refreshTokens(refreshTokenDto);\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @Auth(AuthType.Bearer)\n  @Post('tfa/generate')\n  async generateQrCode(\n    @Res() response: Response,\n    @ActiveUser() activeUser: ActiveUserData,\n  ) {\n    const { uri, secret } = await this.tfaSerivce.generateSecret(\n      activeUser.email,\n    );\n\n    await this.tfaSerivce.enableTfaSecret(activeUser.email, secret);\n\n    response.type('png');\n    return toFileStream(response, uri);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/iam/authentication/guards/authentication/authentication.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authTypeGuardMap\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                defaultAuthType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessTokenGuard: AccessTokenGuard)\n                    \n                \n                        \n                            \n                                Defined in src/iam/authentication/guards/authentication/authentication.guard.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenGuard\n                                                  \n                                                        \n                                                                        AccessTokenGuard\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/guards/authentication/authentication.guard.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { AccessTokenGuard } from './../access-token/access-token.guard';\nimport { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { AuthType } from '../../enums/auth-type.enum';\nimport { Reflector } from '@nestjs/core';\nimport { AUTH_TYPE_KEY } from '../../decorators/auth/auth.decorator';\n\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n  constructor(\n    private readonly reflector: Reflector,\n    private readonly accessTokenGuard: AccessTokenGuard,\n  ) {}\n  private static readonly defaultAuthType = AuthType.Bearer;\n\n  private readonly authTypeGuardMap: Record = {\n    [AuthType.None]: { canActivate: () => true },\n    [AuthType.Bearer]: this.accessTokenGuard,\n  };\n\n  async canActivate(context: ExecutionContext): Promise {\n    const authTypes = this.reflector.getAllAndOverride(\n      AUTH_TYPE_KEY,\n      [context.getHandler(), context.getClass()],\n    ) ?? [AuthenticationGuard.defaultAuthType];\n\n    const guards = authTypes\n      .map((type: any) => this.authTypeGuardMap[type])\n      .flat();\n\n    const guardPromises = guards.map((guard: any) =>\n      guard.canActivate(context),\n    );\n\n    const results = await Promise.allSettled(guardPromises); //? return 'rejected' or 'fulfilled'\n\n    const rejected = results.find((result: any) => {\n      return result.status === 'rejected';\n    });\n\n    if (rejected) {\n      throw rejected['reason'];\n    }\n\n    return results.some(\n      (result: any) => result.status === 'fulfilled' && result.value,\n    );\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthenticationModule.html":{"url":"modules/AuthenticationModule.html","title":"module - AuthenticationModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthenticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\n\nAccessTokenStrategy\n\nAccessTokenStrategy\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\nAuthenticationModule -->\n\nAccessTokenStrategy->AuthenticationModule\n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nCloudService\n\nCloudService\n\nAuthenticationModule -->\n\nCloudService->AuthenticationModule\n\n\n\n\n\nRefreshTokenIdsStorage\n\nRefreshTokenIdsStorage\n\nAuthenticationModule -->\n\nRefreshTokenIdsStorage->AuthenticationModule\n\n\n\n\n\nTfaAuthenticationService\n\nTfaAuthenticationService\n\nAuthenticationModule -->\n\nTfaAuthenticationService->AuthenticationModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthenticationModule -->\n\nUsersService->AuthenticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/iam/authentication/authentication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccessTokenStrategy\n                        \n                        \n                            AuthenticationService\n                        \n                        \n                            CloudService\n                        \n                        \n                            RefreshTokenIdsStorage\n                        \n                        \n                            TfaAuthenticationService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthenticationController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HashingService } from '../hashing/hashing.service';\nimport { BcryptService } from '../hashing/bcrypt/bcrypt.service';\nimport { PassportModule } from '@nestjs/passport';\nimport { ConfigModule } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AuthenticationService } from './services/authentication.service';\nimport { AuthenticationController } from './controllers/authentication.controller';\nimport jwtConfig from '../config/jwt.config/jwt.config';\nimport { AccessTokenStrategy } from './strategies/access-token/access-token.strategy';\nimport { AccessTokenGuard } from './guards/access-token/access-token.guard';\nimport { AuthenticationGuard } from './guards/authentication/authentication.guard';\nimport { APP_GUARD } from '@nestjs/core';\nimport { RefreshTokenIdsStorage } from './utils/refresh-token-ids.storage/refresh-token-ids.storage';\n\n//! DEPRECATED\n// import { SessionAuthenticationService } from './services/session-authentication/session-authentication.service';\n// import { SessionAuthenticationController } from './controllers/session-authentication/session-authentication.controller';\n// import passport from 'passport';\n// import session from 'express-session';\n// import Redis from 'ioredis';\n// import createRedisStore from 'connect-redis';\n// import { UserSerializer } from './utils/user-serializer/user-serializer';\n\nimport { UsersService } from '../../users/users.service';\nimport { PrismaService } from 'nestjs-prisma';\nimport { TfaAuthenticationService } from './services/tfa-authentication/tfa-authentication.service';\nimport { CloudService } from '../../cloud/cloud.service';\nimport cloudflare_r2Config from '../../cloud/config/cloudflare_r2.config';\n\n@Module({\n  providers: [\n    {\n      provide: HashingService,\n      useClass: BcryptService,\n    },\n    {\n      provide: APP_GUARD,\n      useClass: AuthenticationGuard,\n    },\n    PrismaService,\n    UsersService,\n    RefreshTokenIdsStorage,\n    AuthenticationService,\n    AccessTokenStrategy,\n    AccessTokenGuard,\n    TfaAuthenticationService,\n    CloudService,\n    // UserSerializer,\n    // SessionAuthenticationService,\n  ],\n  imports: [\n    PassportModule,\n    ConfigModule.forFeature(jwtConfig),\n    ConfigModule.forFeature(cloudflare_r2Config),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n  ],\n  controllers: [\n    AuthenticationController,\n    // SessionAuthenticationController\n  ],\n})\nexport class AuthenticationModule {}\n\n// ! SESSION DEPRECATED\n// export class AuthenticationModule implements NestModule {\n//   configure(consumer: MiddlewareConsumer) {\n//     const RedisStore = createRedisStore(session);\n//     consumer\n//       .apply(\n//         session({\n//           store: new RedisStore({\n//             client: new Redis(process.env.REDIS_URL),\n//           }),\n//           secret: process.env.SESSION_SECRET,\n//           resave: false,\n//           saveUninitialized: false,\n//           cookie: { sameSite: true, httpOnly: true },\n//         }),\n//         passport.initialize(),\n//         passport.session(),\n//       )\n//       .forRoutes('*');\n//   }\n// }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationService.html":{"url":"injectables/AuthenticationService.html","title":"injectable - AuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/services/authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateToken\n                            \n                            \n                                    Async\n                                refreshTokens\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signInWithToken\n                            \n                            \n                                    Private\n                                    Async\n                                signToken\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hashService: HashingService, userService: UsersService, jwtConfiguration: ConfigType<>, jwtService: JwtService, refreshTokenIdsStorage: RefreshTokenIdsStorage, tfaService: TfaAuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/iam/authentication/services/authentication.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        hashService\n                                                  \n                                                        \n                                                                        HashingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokenIdsStorage\n                                                  \n                                                        \n                                                                        RefreshTokenIdsStorage\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tfaService\n                                                  \n                                                        \n                                                                        TfaAuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateToken(user: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/services/authentication.service.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshTokens(refreshToken: RefreshTokenDto)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/services/authentication.service.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                RefreshTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/services/authentication.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInDto\n                                    \n                                                SignInDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signInWithToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    signInWithToken(signInWithToken: SignInWithTokenDto)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/services/authentication.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInWithToken\n                                    \n                                                SignInWithTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        signToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    signToken(userID: number, expiresIn: number, payload?: T)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/services/authentication.service.ts:180\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userID\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    expiresIn\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(signUpDto: SignUpDto)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/services/authentication.service.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signUpDto\n                                    \n                                                SignUpDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { HashingService } from '../../hashing/hashing.service';\nimport { SignInDto } from '../dto/sign-in.dto/sign-in.dto';\nimport { SignUpDto } from '../dto/sign-up.dto/sign-up.dto';\nimport { randomUUID } from 'crypto';\nimport jwtConfig from '../../config/jwt.config/jwt.config';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { ActiveUserData } from '../interfaces/active-user-data.interface';\nimport {\n  RefreshTokenIdsStorage,\n  RefreshTokenIdsStorageError,\n} from '../utils/refresh-token-ids.storage/refresh-token-ids.storage';\nimport { RefreshTokenDto } from '../dto/refresh-token.dto/refresh-token.dto';\nimport { UsersService } from '../../../users/users.service';\nimport { CreateUserDto } from '../../../users/dto/create-user.dto';\nimport { UserEntity } from 'src/users/entity/user.entity';\nimport { TfaAuthenticationService } from './tfa-authentication/tfa-authentication.service';\nimport { SignInWithTokenDto } from '../dto/sign-in-with-token.dto/sign-in-with-token.dto';\n\n@Injectable()\nexport class AuthenticationService {\n  constructor(\n    private readonly hashService: HashingService,\n    private readonly userService: UsersService,\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n    private readonly jwtService: JwtService,\n    private readonly refreshTokenIdsStorage: RefreshTokenIdsStorage,\n    private readonly tfaService: TfaAuthenticationService,\n  ) {}\n\n  async signIn(signInDto: SignInDto) {\n    const { email, password } = signInDto;\n\n    const user = await this.userService.findOne(\n      { email },\n      { roles: true, info: true, setting: true, positions: true },\n    );\n\n    if (!user) throw new ConflictException('Email not exists');\n\n    const isMatch = await this.hashService.compare(password, user.password);\n\n    if (!isMatch) throw new UnauthorizedException('User or password not match');\n\n    if (user.isTfaEnabled) {\n      const isValid = this.tfaService.verifyCode(\n        signInDto.tfaCode,\n        user.tfaSecret,\n      );\n      if (!isValid) throw new UnauthorizedException('Invalid TFA code');\n    }\n\n    const { accessToken, refreshToken } = await this.generateToken(user);\n\n    return {\n      ...user,\n      accessToken,\n      refreshToken,\n    };\n  }\n\n  async signInWithToken(signInWithToken: SignInWithTokenDto) {\n    const { accessToken } = signInWithToken;\n    const { sub } = await this.jwtService.verifyAsync(\n      accessToken,\n      {\n        secret: this.jwtConfiguration.secret,\n        audience: this.jwtConfiguration.audience,\n        issuer: this.jwtConfiguration.issuer,\n      },\n    );\n\n    const user = await this.userService.findOne(\n      { id: sub },\n      { info: true, setting: true, positions: true },\n    );\n\n    if (!user) throw new UnauthorizedException('User not found');\n\n    // return ...user.info but map userID to id\n    return {\n      ...user,\n      password: undefined,\n    };\n  }\n\n  async signUp(signUpDto: SignUpDto) {\n    const { email, password } = signUpDto;\n\n    if ((await this.userService.findOne({ email })) !== null)\n      throw new ConflictException('Email already exists');\n\n    const hashedPassword = await this.hashService.hash(password);\n    const user = new CreateUserDto();\n\n    user.email = email;\n    user.password = hashedPassword;\n\n    try {\n      await this.userService.create(user);\n    } catch (error) {\n      if (error.code === 'P2002') {\n        throw new ConflictException('Email already exists');\n      }\n      throw error;\n    }\n  }\n\n  async generateToken(user: UserEntity) {\n    const refreshTokenId = randomUUID();\n\n    const payload = {\n      email: user.email,\n      roles: user.roles.map((role) => role.name),\n    };\n\n    const [accessToken, refreshToken] = await Promise.all([\n      //* accessToken\n      this.signToken>(\n        user.id,\n        this.jwtConfiguration.accessTokenTtl,\n        payload,\n      ),\n      //* refreshToken\n      this.signToken(user.id, this.jwtConfiguration.refreshTokenTtl, {\n        refreshTokenId,\n      }),\n\n      //* Insert refreshTokenId into storage\n      await this.refreshTokenIdsStorage.insert(user.id, refreshTokenId),\n    ]);\n\n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n\n  async refreshTokens(refreshToken: RefreshTokenDto) {\n    try {\n      const { sub, refreshTokenId } = await this.jwtService.verifyAsync & { refreshTokenId: string }\n      >(refreshToken.refreshToken, {\n        secret: this.jwtConfiguration.secret,\n        audience: this.jwtConfiguration.audience,\n        issuer: this.jwtConfiguration.issuer,\n      });\n\n      const user = await this.userService.findOne({ id: sub }, { roles: true });\n\n      if (!user) throw new UnauthorizedException('User not found');\n\n      const isValid = await this.refreshTokenIdsStorage.validate(\n        sub,\n        refreshTokenId,\n      );\n\n      if (isValid) {\n        await this.refreshTokenIdsStorage.invalidate(user.id);\n      } else {\n        throw new UnauthorizedException('Invalid refresh token');\n      }\n\n      return await this.generateToken(user as UserEntity);\n    } catch (error) {\n      if (error instanceof RefreshTokenIdsStorageError) {\n        throw new UnauthorizedException('Invalid refresh token');\n      }\n      throw new UnauthorizedException(error.message);\n    }\n  }\n\n  private async signToken(userID: number, expiresIn: number, payload?: T) {\n    return await this.jwtService.signAsync(\n      {\n        sub: userID,\n        ...payload,\n      },\n      {\n        audience: this.jwtConfiguration.audience,\n        issuer: this.jwtConfiguration.issuer,\n        secret: this.jwtConfiguration.secret,\n        expiresIn,\n      },\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthorizationModule.html":{"url":"modules/AuthorizationModule.html","title":"module - AuthorizationModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthorizationModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/iam/authorization/authorization.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { RolesGuard } from './guards/roles/roles.guard';\n\n@Module({\n  providers: [\n    {\n      provide: APP_GUARD,\n      useClass: RolesGuard,\n    },\n  ],\n})\nexport class AuthorizationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptService.html":{"url":"injectables/BcryptService.html","title":"injectable - BcryptService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/hashing/bcrypt/bcrypt.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                compare\n                            \n                            \n                                    Async\n                                hash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        compare\n                        \n                    \n                \n            \n            \n                \n                    \n                    compare(data: string | Buffer, encrypt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/hashing/bcrypt/bcrypt.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            string | Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    encrypt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        hash\n                        \n                    \n                \n            \n            \n                \n                    \n                    hash(data: string | Buffer)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/hashing/bcrypt/bcrypt.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            string | Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { hash, genSalt, compare } from 'bcrypt';\nimport { HashingService } from '../hashing.service';\n\n@Injectable()\nexport class BcryptService implements HashingService {\n  async hash(data: string | Buffer): Promise {\n    const salt = await genSalt(10);\n    return hash(data, salt);\n  }\n  async compare(data: string | Buffer, encrypt: string): Promise {\n    return compare(data, encrypt);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CloudController.html":{"url":"controllers/CloudController.html","title":"controller - CloudController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CloudController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cloud/cloud.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                cloud\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                listAllObjects\n                            \n                            \n                                    \n                                    Async\n                                listAllObjectsWithPrefix\n                            \n                            \n                                    \n                                    \n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        listAllObjects\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAllObjects()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('objects')\n                \n            \n\n            \n                \n                    Defined in src/cloud/cloud.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        listAllObjectsWithPrefix\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAllObjectsWithPrefix(prefix: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('objects/:prefix')\n                \n            \n\n            \n                \n                    Defined in src/cloud/cloud.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadFile(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('upload')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/cloud/cloud.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Param,\n  Post,\n  UploadedFile,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { CloudService } from './cloud.service';\nimport { FileInterceptor } from '@nestjs/platform-express';\n\n@Controller('cloud')\nexport class CloudController {\n  constructor(private readonly cloudService: CloudService) {}\n\n  //   @Get('buckets')\n  //   async listAllBuckets() {\n  //     const buckets = await this.cloudService.listAllBuckets();\n  //     return buckets.Buckets;\n  //   }\n\n  @Get('objects')\n  async listAllObjects() {\n    const objects = await this.cloudService.listAllObjects();\n    return objects.Contents;\n  }\n\n  @Get('objects/:prefix')\n  async listAllObjectsWithPrefix(@Param('prefix') prefix: string) {\n    const objects = await this.cloudService.listAllObjects(prefix);\n    return objects.Contents;\n  }\n\n  @Post('upload')\n  @UseInterceptors(FileInterceptor('file'))\n  uploadFile(\n    @UploadedFile()\n    file: Express.Multer.File,\n  ) {\n    this.cloudService.upload(file.originalname, file.buffer);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CloudModule.html":{"url":"modules/CloudModule.html","title":"module - CloudModule","body":"\n                   \n\n\n\n\n    Modules\n    CloudModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CloudModule\n\n\n\ncluster_CloudModule_exports\n\n\n\ncluster_CloudModule_providers\n\n\n\n\nCloudService \n\nCloudService \n\n\n\nCloudModule\n\nCloudModule\n\nCloudService  -->\n\nCloudModule->CloudService \n\n\n\n\n\nCloudService\n\nCloudService\n\nCloudModule -->\n\nCloudService->CloudModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/cloud/cloud.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CloudService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CloudController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CloudService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CloudService } from './cloud.service';\nimport { CloudController } from './cloud.controller';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport cloudflare_r2Config from './config/cloudflare_r2.config';\nimport { ThrottlerGuard, ThrottlerModule } from '@nestjs/throttler';\nimport { APP_GUARD } from '@nestjs/core';\n\n@Module({\n  imports: [\n    ConfigModule.forFeature(cloudflare_r2Config),\n    ThrottlerModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => [\n        {\n          ttl: configService.get('UPLOAD_RATE_TTL') || 60,\n          limit: configService.get('UPLOAD_RATE_LIMIT') || 10,\n        },\n      ],\n    }),\n  ],\n  controllers: [CloudController],\n  providers: [\n    CloudService,\n    {\n      provide: APP_GUARD,\n      useValue: ThrottlerGuard,\n    },\n  ],\n  exports: [CloudService],\n})\nexport class CloudModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CloudService.html":{"url":"injectables/CloudService.html","title":"injectable - CloudService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CloudService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cloud/cloud.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                S3\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                listAllBuckets\n                            \n                            \n                                    Async\n                                listAllObjects\n                            \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cloudflare_r2ConfigService: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/cloud/cloud.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cloudflare_r2ConfigService\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAllBuckets\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAllBuckets()\n                \n            \n\n\n            \n                \n                    Defined in src/cloud/cloud.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAllObjects\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAllObjects(prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/cloud/cloud.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        upload\n                        \n                    \n                \n            \n            \n                \n                    \n                    upload(fileName: string, file: Buffer, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/cloud/cloud.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        S3\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new S3Client({\n    region: 'auto',\n    endpoint: `https://${this.cloudflare_r2ConfigService.account_id}.r2.cloudflarestorage.com`,\n    credentials: {\n      accessKeyId: this.cloudflare_r2ConfigService.access_key_id,\n      secretAccessKey: this.cloudflare_r2ConfigService.secret_access_key,\n    },\n  })\n                    \n                \n                    \n                        \n                                Defined in src/cloud/cloud.service.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  ListBucketsCommand,\n  ListObjectsV2Command,\n  PutObjectCommand,\n  S3Client,\n} from '@aws-sdk/client-s3';\nimport { Inject, Injectable } from '@nestjs/common';\nimport cloudflare_r2Config from './config/cloudflare_r2.config';\nimport { ConfigType } from '@nestjs/config';\n\n@Injectable()\nexport class CloudService {\n  private readonly S3 = new S3Client({\n    region: 'auto',\n    endpoint: `https://${this.cloudflare_r2ConfigService.account_id}.r2.cloudflarestorage.com`,\n    credentials: {\n      accessKeyId: this.cloudflare_r2ConfigService.access_key_id,\n      secretAccessKey: this.cloudflare_r2ConfigService.secret_access_key,\n    },\n  });\n  constructor(\n    @Inject(cloudflare_r2Config.KEY)\n    private readonly cloudflare_r2ConfigService: ConfigType,\n  ) {}\n\n  async listAllBuckets() {\n    return await this.S3.send(new ListBucketsCommand(''));\n  }\n\n  async listAllObjects(prefix?: string) {\n    return await this.S3.send(\n      new ListObjectsV2Command({\n        Bucket: this.cloudflare_r2ConfigService.bucket_name,\n        Prefix: prefix ?? '',\n      }),\n    );\n  }\n\n  async upload(fileName: string, file: Buffer, prefix?: string) {\n    await this.S3.send(\n      new PutObjectCommand({\n        Bucket: this.cloudflare_r2ConfigService.bucket_name,\n        Key: `${prefix ? `${prefix}/` : ''}${fileName}`,\n        Body: file,\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateInfoDto.html":{"url":"classes/CreateInfoDto.html","title":"class - CreateInfoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateInfoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-info.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                avatar\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-info.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-info.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-info.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPhoneNumber('VN')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-info.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :     $Enums.UserStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum($Enums.UserStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-info.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Prisma.UserCreateNestedOneWithoutInfoInput\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-info.dto.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { $Enums, Prisma } from '@prisma/client';\nimport {\n  IsEmail,\n  IsEnum,\n  IsOptional,\n  IsPhoneNumber,\n  IsString,\n} from 'class-validator';\n\nexport class CreateInfoDto implements Prisma.InfoCreateInput {\n  @IsString()\n  name?: string;\n\n  @IsEmail()\n  email: string;\n\n  @IsOptional()\n  @IsEnum($Enums.UserStatus)\n  status?: $Enums.UserStatus;\n\n  @IsOptional()\n  @IsString()\n  avatar?: string;\n\n  @IsOptional()\n  @IsPhoneNumber('VN')\n  phone?: string;\n\n  @IsOptional()\n  user: Prisma.UserCreateNestedOneWithoutInfoInput;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        \n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isTfaEnabled\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                tfaSecret\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isTfaEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsHash('sha512')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        tfaSecret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsEmail,\n  IsHash,\n  IsOptional,\n  IsString,\n  MinLength,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Prisma } from '@prisma/client';\n\nexport class CreateUserDto implements Prisma.UserCreateInput {\n  @ApiProperty()\n  @MinLength(8)\n  name: string;\n\n  @ApiProperty()\n  @IsEmail()\n  email: string;\n\n  @ApiProperty()\n  @IsHash('sha512')\n  password: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsBoolean()\n  isTfaEnabled?: boolean;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsString()\n  tfaSecret?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingService.html":{"url":"injectables/HashingService.html","title":"injectable - HashingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/hashing/hashing.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                compare\n                            \n                            \n                                    Abstract\n                                hash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        compare\n                        \n                    \n                \n            \n            \n                \n                    \n                    compare(data: string | Buffer, encrypt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/hashing/hashing.service.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            string | Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    encrypt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        hash\n                        \n                    \n                \n            \n            \n                \n                    \n                    hash(data: string | Buffer)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/hashing/hashing.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            string | Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport abstract class HashingService {\n  abstract hash(data: string | Buffer): Promise;\n  abstract compare(data: string | Buffer, encrypt: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/IamModule.html":{"url":"modules/IamModule.html","title":"module - IamModule","body":"\n                   \n\n\n\n\n    Modules\n    IamModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_IamModule\n\n\n\ncluster_IamModule_imports\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nIamModule\n\nIamModule\n\nIamModule -->\n\nAuthenticationModule->IamModule\n\n\n\n\n\nAuthorizationModule\n\nAuthorizationModule\n\nIamModule -->\n\nAuthorizationModule->IamModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/iam/iam.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                        \n                            AuthorizationModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthenticationModule } from './authentication/authentication.module';\nimport { AuthorizationModule } from './authorization/authorization.module';\n\n@Module({\n  providers: [],\n  controllers: [],\n  imports: [AuthenticationModule, AuthorizationModule],\n})\nexport class IamModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InfoEntity.html":{"url":"classes/InfoEntity.html","title":"class - InfoEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InfoEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entity/info.entity.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Info\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                about\n                            \n                            \n                                    \n                                    \n                                address\n                            \n                            \n                                    \n                                    \n                                    \n                                avatar\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                phone\n                            \n                            \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        about\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/info.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/info.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/info.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/info.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/info.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/info.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsPhoneNumber('VN')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/info.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :     $Enums.UserStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEnum($Enums.UserStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/info.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/info.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/info.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { $Enums, Info } from '@prisma/client';\nimport {\n  IsDate,\n  IsEmail,\n  IsEnum,\n  IsOptional,\n  IsPhoneNumber,\n  IsString,\n  IsUrl,\n  MinLength,\n} from 'class-validator';\n\nexport class InfoEntity implements Info {\n  @ApiProperty()\n  userId: number;\n\n  @ApiProperty()\n  @IsString()\n  about: string;\n\n  @ApiProperty()\n  @IsString()\n  address: string;\n\n  @ApiProperty()\n  @MinLength(8)\n  name: string;\n\n  @ApiProperty()\n  @IsEmail()\n  email: string;\n\n  @ApiProperty()\n  @IsEnum($Enums.UserStatus)\n  status: $Enums.UserStatus;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsUrl()\n  avatar: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsPhoneNumber('VN')\n  phone: string;\n\n  @IsDate()\n  createdAt: Date;\n\n  @IsDate()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PositionEntity.html":{"url":"classes/PositionEntity.html","title":"class - PositionEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PositionEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entity/position.entity.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Position\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                updatedAt\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/users/entity/position.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/users/entity/position.entity.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/entity/position.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/users/entity/position.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/users/entity/position.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Position } from '@prisma/client';\n\nexport class PositionEntity implements Position {\n  id: number;\n  name: string;\n  createdAt: Date;\n  updatedAt: Date;\n  userId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/dto/refresh-token.dto/refresh-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/iam/authentication/dto/refresh-token.dto/refresh-token.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\n\nexport class RefreshTokenDto {\n  @IsNotEmpty()\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenIdsStorage.html":{"url":"injectables/RefreshTokenIdsStorage.html","title":"injectable - RefreshTokenIdsStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenIdsStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/utils/refresh-token-ids.storage/refresh-token-ids.storage.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                redisClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getKey\n                            \n                            \n                                    Async\n                                insert\n                            \n                            \n                                    Async\n                                invalidate\n                            \n                            \n                                onApplicationBootstrap\n                            \n                            \n                                onApplicationShutdown\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getKey\n                        \n                    \n                \n            \n            \n                \n                    \n                    getKey(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/utils/refresh-token-ids.storage/refresh-token-ids.storage.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        insert\n                        \n                    \n                \n            \n            \n                \n                    \n                    insert(userId: number, tokenID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/utils/refresh-token-ids.storage/refresh-token-ids.storage.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        invalidate\n                        \n                    \n                \n            \n            \n                \n                    \n                    invalidate(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/utils/refresh-token-ids.storage/refresh-token-ids.storage.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \nonApplicationBootstrap()\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/utils/refresh-token-ids.storage/refresh-token-ids.storage.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onApplicationShutdown\n                        \n                    \n                \n            \n            \n                \nonApplicationShutdown()\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/utils/refresh-token-ids.storage/refresh-token-ids.storage.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(userId: number, tokenID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/utils/refresh-token-ids.storage/refresh-token-ids.storage.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        redisClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     redisClient\n\n                    \n                \n                    \n                        \n                                Defined in src/iam/authentication/utils/refresh-token-ids.storage/refresh-token-ids.storage.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  OnApplicationBootstrap,\n  OnApplicationShutdown,\n} from '@nestjs/common';\n\nimport redisClient from 'ioredis';\n\nexport class RefreshTokenIdsStorageError extends Error {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n@Injectable()\nexport class RefreshTokenIdsStorage\n  implements OnApplicationBootstrap, OnApplicationShutdown\n{\n  private redisClient: redisClient;\n\n  onApplicationBootstrap() {\n    this.redisClient = new redisClient(process.env.REDIS_URL);\n  }\n  onApplicationShutdown() {\n    this.redisClient.quit();\n  }\n\n  async insert(userId: number, tokenID: string): Promise {\n    await this.redisClient.set(this.getKey(userId), tokenID);\n  }\n\n  async validate(userId: number, tokenID: string): Promise {\n    const storedTokenID = await this.redisClient.get(this.getKey(userId));\n    if (!storedTokenID)\n      throw new RefreshTokenIdsStorageError('Token ID not found');\n    return storedTokenID === tokenID;\n  }\n\n  async invalidate(userId: number): Promise {\n    await this.redisClient.del(this.getKey(userId));\n  }\n\n  private getKey(userId: number): string {\n    return `user-${userId}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenIdsStorageError.html":{"url":"classes/RefreshTokenIdsStorageError.html","title":"class - RefreshTokenIdsStorageError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenIdsStorageError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/utils/refresh-token-ids.storage/refresh-token-ids.storage.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/iam/authentication/utils/refresh-token-ids.storage/refresh-token-ids.storage.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Injectable,\n  OnApplicationBootstrap,\n  OnApplicationShutdown,\n} from '@nestjs/common';\n\nimport redisClient from 'ioredis';\n\nexport class RefreshTokenIdsStorageError extends Error {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n@Injectable()\nexport class RefreshTokenIdsStorage\n  implements OnApplicationBootstrap, OnApplicationShutdown\n{\n  private redisClient: redisClient;\n\n  onApplicationBootstrap() {\n    this.redisClient = new redisClient(process.env.REDIS_URL);\n  }\n  onApplicationShutdown() {\n    this.redisClient.quit();\n  }\n\n  async insert(userId: number, tokenID: string): Promise {\n    await this.redisClient.set(this.getKey(userId), tokenID);\n  }\n\n  async validate(userId: number, tokenID: string): Promise {\n    const storedTokenID = await this.redisClient.get(this.getKey(userId));\n    if (!storedTokenID)\n      throw new RefreshTokenIdsStorageError('Token ID not found');\n    return storedTokenID === tokenID;\n  }\n\n  async invalidate(userId: number): Promise {\n    await this.redisClient.del(this.getKey(userId));\n  }\n\n  private getKey(userId: number): string {\n    return `user-${userId}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenStrategy.html":{"url":"injectables/RefreshTokenStrategy.html","title":"injectable - RefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/strategies/refresh-token/refresh-token.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/iam/authentication/strategies/refresh-token/refresh-token.strategy.ts:10\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(request: Request, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/strategies/refresh-token/refresh-token.strategy.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { Request } from 'express';\n\n@Injectable()\nexport class RefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh',\n) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: 'refresh-token',\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(request: Request, payload: any) {\n    const refreshToken = request.headers?.authorization.split(' ')[1];\n    return { refreshToken, ...payload };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RoleEntity.html":{"url":"classes/RoleEntity.html","title":"class - RoleEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RoleEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entity/role.entity.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Role\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string)\n                    \n                \n                        \n                            \n                                Defined in src/users/entity/role.entity.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/entity/role.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/users/entity/role.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/entity/role.entity.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Role } from '@prisma/client';\n\nexport class RoleEntity implements Role {\n  name: string;\n\n  constructor(name: string) {\n    this.name = name;\n  }\n  id: number;\n  description: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/iam/authorization/guards/roles/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/iam/authorization/guards/roles/roles.guard.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authorization/guards/roles/roles.guard.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { RoleEntity } from 'src/users/entity/role.entity';\nimport { ActiveUserData } from 'src/iam/authentication/interfaces/active-user-data.interface';\nimport { REQUEST_USER_KEY } from '../../../constants/iam.contant';\nimport { ROLES_KEY } from '../../decorators/roles/roles.decorator';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private readonly reflector: Reflector) {}\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const contextRole = this.reflector.getAllAndOverride(\n      ROLES_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n\n    if (contextRole) {\n      const user: ActiveUserData = context.switchToHttp().getRequest()[\n        REQUEST_USER_KEY\n      ];\n\n      return contextRole.some((role) => user.roles?.includes(role.name));\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SessionAuthenticationController.html":{"url":"controllers/SessionAuthenticationController.html","title":"controller - SessionAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SessionAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/controllers/session-authentication/session-authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                session-authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                sayHello\n                            \n                            \n                                    \n                                    \n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        sayHello\n                        \n                    \n                \n            \n            \n                \n                    \n                    sayHello(user: ActiveUserData)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('test')\n                \n            \n\n            \n                \n                    Defined in src/iam/authentication/controllers/session-authentication/session-authentication.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ActiveUserData\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(request: Request, signInDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('sign-in')\n                \n            \n\n            \n                \n                    Defined in src/iam/authentication/controllers/session-authentication/session-authentication.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    signInDto\n                                    \n                                                SignInDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Post,\n  Req,\n} from '@nestjs/common';\nimport { Request } from 'express';\nimport { promisify } from 'util';\nimport { AuthType } from '../../enums/auth-type.enum';\nimport { Auth } from '../../decorators/auth/auth.decorator';\nimport { SessionAuthenticationService } from '../../services/session-authentication/session-authentication.service';\nimport { SignInDto } from '../../dto/sign-in.dto/sign-in.dto';\nimport { ActiveUser } from '../../decorators/active-user/active-user.decorator';\nimport { ActiveUserData } from '../../interfaces/active-user-data.interface';\n\n@Auth(AuthType.None)\n@Controller('session-authentication')\nexport class SessionAuthenticationController {\n  constructor(\n    private readonly sessionAuthService: SessionAuthenticationService,\n  ) {}\n\n  @HttpCode(HttpStatus.OK)\n  @Post('sign-in')\n  async signIn(@Req() request: Request, @Body() signInDto: SignInDto) {\n    const user = await this.sessionAuthService.signIn(signInDto);\n    await promisify(request.logIn.bind(request))(user);\n  }\n\n  @Get('test')\n  async sayHello(@ActiveUser() user: ActiveUserData) {\n    return `Hello ${user.email}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionAuthenticationService.html":{"url":"injectables/SessionAuthenticationService.html","title":"injectable - SessionAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/services/session-authentication/session-authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                checkExist\n                            \n                            \n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hashService: HashingService, prismaSerive: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/iam/authentication/services/session-authentication/session-authentication.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        hashService\n                                                  \n                                                        \n                                                                        HashingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaSerive\n                                                  \n                                                        \n                                                                    PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        checkExist\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkExist(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/services/session-authentication/session-authentication.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/services/session-authentication/session-authentication.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInDto\n                                    \n                                                SignInDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { User } from '@prisma/client';\nimport { PrismaService } from 'nestjs-prisma';\nimport { SignInDto } from '../../dto/sign-in.dto/sign-in.dto';\nimport { HashingService } from '../../../hashing/hashing.service';\n\n@Injectable()\nexport class SessionAuthenticationService {\n  constructor(\n    private readonly hashService: HashingService,\n    private prismaSerive: PrismaService,\n  ) {}\n\n  private async checkExist(email: string): Promise {\n    return await this.prismaSerive.user.findUnique({\n      where: {\n        email,\n      },\n    });\n  }\n\n  async signIn(signInDto: SignInDto) {\n    const user = await this.checkExist(signInDto.email);\n    if (!user) throw new ConflictException('Email not exists');\n\n    const isMatch = await this.hashService.compare(\n      signInDto.password,\n      user.password,\n    );\n\n    if (!isMatch) throw new UnauthorizedException('User or password not match');\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/SessionGuard.html":{"url":"guards/SessionGuard.html","title":"guard - SessionGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    SessionGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/iam/authentication/guards/session/session.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/guards/session/session.guard.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class SessionGuard implements CanActivate {\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const request = context.switchToHttp().getRequest();\n    return request.isAuthenticated();\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SettingEntity.html":{"url":"classes/SettingEntity.html","title":"class - SettingEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SettingEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entity/setting.entity.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Setting\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                language\n                            \n                            \n                                    \n                                    \n                                layout\n                            \n                            \n                                    \n                                    \n                                scheme\n                            \n                            \n                                    \n                                    \n                                theme\n                            \n                            \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/users/entity/setting.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :     $Enums.LanguageSetting\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEnum($Enums.LanguageSetting)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/setting.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        layout\n                        \n                    \n                \n            \n                \n                    \n                        Type :     $Enums.LayoutSetting\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEnum($Enums.LayoutSetting)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/setting.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        scheme\n                        \n                    \n                \n            \n                \n                    \n                        Type :     $Enums.SchemeSetting\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEnum($Enums.SchemeSetting)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/setting.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        theme\n                        \n                    \n                \n            \n                \n                    \n                        Type :     $Enums.ThemeSetting\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEnum($Enums.ThemeSetting)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/setting.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/users/entity/setting.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/setting.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { $Enums, Setting } from '@prisma/client';\nimport { IsEnum, IsInt } from 'class-validator';\n\nexport class SettingEntity implements Setting {\n  @ApiProperty()\n  @IsInt()\n  userId: number;\n\n  @ApiProperty()\n  @IsEnum($Enums.ThemeSetting)\n  theme: $Enums.ThemeSetting;\n\n  @ApiProperty()\n  @IsEnum($Enums.SchemeSetting)\n  scheme: $Enums.SchemeSetting;\n\n  @ApiProperty()\n  @IsEnum($Enums.LanguageSetting)\n  language: $Enums.LanguageSetting;\n\n  @ApiProperty()\n  @IsEnum($Enums.LayoutSetting)\n  layout: $Enums.LayoutSetting;\n\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/dto/sign-in.dto/sign-in.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                tfaCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/iam/authentication/dto/sign-in.dto/sign-in.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/iam/authentication/dto/sign-in.dto/sign-in.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        tfaCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@Length(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/iam/authentication/dto/sign-in.dto/sign-in.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsOptional, Length, MinLength } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nexport class SignInDto {\n  @ApiProperty()\n  @IsEmail()\n  email: string;\n\n  @ApiProperty()\n  @MinLength(8)\n  password: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @Length(6)\n  tfaCode?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInWithTokenDto.html":{"url":"classes/SignInWithTokenDto.html","title":"class - SignInWithTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInWithTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/dto/sign-in-with-token.dto/sign-in-with-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                accessToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/iam/authentication/dto/sign-in-with-token.dto/sign-in-with-token.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\n\nexport class SignInWithTokenDto {\n  @IsNotEmpty()\n  accessToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignUpDto.html":{"url":"classes/SignUpDto.html","title":"class - SignUpDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignUpDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/dto/sign-up.dto/sign-up.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'abc@gmail.com'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/iam/authentication/dto/sign-up.dto/sign-up.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '12345678'})@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/iam/authentication/dto/sign-up.dto/sign-up.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, MinLength } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class SignUpDto {\n  @ApiProperty({\n    example: 'abc@gmail.com',\n  })\n  @IsEmail()\n  email: string;\n\n  @ApiProperty({\n    example: '12345678',\n  })\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TfaAuthenticationService.html":{"url":"injectables/TfaAuthenticationService.html","title":"injectable - TfaAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TfaAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/services/tfa-authentication/tfa-authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableTfaSecret\n                            \n                            \n                                    Async\n                                generateSecret\n                            \n                            \n                                verifyCode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/iam/authentication/services/tfa-authentication/tfa-authentication.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                    PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableTfaSecret\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableTfaSecret(email: string, secret: string)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/services/tfa-authentication/tfa-authentication.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    secret\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateSecret\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateSecret(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/services/tfa-authentication/tfa-authentication.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifyCode\n                        \n                    \n                \n            \n            \n                \nverifyCode(code: string, secret: string)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/services/tfa-authentication/tfa-authentication.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    secret\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PrismaService } from 'nestjs-prisma';\nimport { authenticator } from 'otplib';\n\n@Injectable()\nexport class TfaAuthenticationService {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly prismaService: PrismaService,\n  ) {}\n\n  async generateSecret(email: string) {\n    const secret = authenticator.generateSecret();\n    const appName = this.configService.getOrThrow('TFA_APP_NAME');\n    const uri = authenticator.keyuri(email, appName, secret);\n\n    return {\n      secret,\n      uri,\n    };\n  }\n\n  verifyCode(code: string, secret: string) {\n    return authenticator.verify({ token: code, secret });\n  }\n\n  async enableTfaSecret(email: string, secret: string) {\n    const id = await this.prismaService.user.findUniqueOrThrow({\n      where: {\n        email,\n      },\n      select: {\n        id: true,\n      },\n    });\n\n    await this.prismaService.user.update({\n      where: {\n        id: id.id,\n      },\n      data: {\n        isTfaEnabled: true,\n        tfaSecret: secret,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entity/user.entity.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        User\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                department\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isTfaEnabled\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                roles\n                            \n                            \n                                    \n                                    \n                                tfaSecret\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        department\n                        \n                    \n                \n            \n                \n                    \n                        Type :     $Enums.Deparment\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEnum($Enums.Deparment)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isTfaEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RoleEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tfaSecret\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, nullable: true})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { $Enums, User } from '@prisma/client';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { IsDate, IsEnum, IsOptional } from 'class-validator';\nimport { RoleEntity } from './role.entity';\n\nexport class UserEntity implements User {\n  @ApiProperty()\n  id: number;\n\n  @ApiProperty()\n  email: string;\n\n  @ApiProperty()\n  password: string;\n\n  @ApiProperty()\n  isTfaEnabled: boolean;\n\n  @ApiProperty({\n    required: false,\n    nullable: true,\n  })\n  @IsOptional()\n  tfaSecret: string | null;\n\n  @ApiProperty()\n  roles: RoleEntity[];\n\n  @ApiProperty()\n  @IsEnum($Enums.Deparment)\n  department: $Enums.Deparment;\n\n  @IsDate()\n  createdAt: Date;\n\n  @IsDate()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserSerializer.html":{"url":"classes/UserSerializer.html","title":"class - UserSerializer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserSerializer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/utils/user-serializer/user-serializer.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        PassportSerializer\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deserializeUser\n                            \n                            \n                                getPassportInstance\n                            \n                            \n                                serializeUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/iam/authentication/utils/user-serializer/user-serializer.ts:6\n                            \n                        \n\n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deserializeUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deserializeUser(payload: ActiveUserData, done: (err: Error,payload: ActiveUserData) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/utils/user-serializer/user-serializer.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                ActiveUserData\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPassportInstance\n                        \n                    \n                \n            \n            \n                \ngetPassportInstance()\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/utils/user-serializer/user-serializer.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serializeUser\n                        \n                    \n                \n            \n            \n                \nserializeUser(user: UserEntity, done: (err: Error,user: ActiveUserData) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/iam/authentication/utils/user-serializer/user-serializer.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PassportSerializer } from '@nestjs/passport';\nimport { UserEntity } from 'src/users/entity/user.entity';\nimport passport from 'passport';\nimport { ActiveUserData } from '../../interfaces/active-user-data.interface';\n\nexport class UserSerializer implements PassportSerializer {\n  constructor() {\n    const passportInstance = this.getPassportInstance();\n    passportInstance.serializeUser((user, done) =>\n      this.serializeUser(user as UserEntity, done),\n    );\n    passportInstance.deserializeUser((payload, done) =>\n      this.deserializeUser(payload as ActiveUserData, done),\n    );\n  }\n\n  getPassportInstance() {\n    return passport;\n  }\n\n  serializeUser(\n    user: UserEntity,\n    done: (err: Error, user: ActiveUserData) => void,\n  ) {\n    // store user info authenticated in session\n    done(null, {\n      sub: user.id,\n      email: user.email,\n      // roles: user.roles as RoleEntity[],\n      //   permissions: user.permissions as any,\n    });\n  }\n\n  async deserializeUser(\n    payload: ActiveUserData,\n    done: (err: Error, payload: ActiveUserData) => void,\n  ) {\n    // retrieve user info authenticated from session\n    done(null, payload);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findFilter\n                            \n                            \n                                    \n                                    Async\n                                findInfo\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                findSetting\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    Async\n                                updateInfo\n                            \n                            \n                                    \n                                    Async\n                                updateSetting\n                            \n                            \n                                    \n                                    \n                                    Async\n                                uploadAvatar\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Roles(new RoleEntity())@Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        findFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    findFilter(params: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('filter')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        findInfo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findInfo(user: ActiveUserData)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('info')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ActiveUserData\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(user: ActiveUserData)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ActiveUserData\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        findSetting\n                        \n                    \n                \n            \n            \n                \n                    \n                    findSetting(user: ActiveUserData)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('setting')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ActiveUserData\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(user: ActiveUserData, updateUser: updateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ActiveUserData\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUser\n                                    \n                                                updateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        updateInfo\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInfo(updateInfo: updateInfoDto, user: ActiveUserData)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('info')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateInfo\n                                    \n                                                updateInfoDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                ActiveUserData\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        updateSetting\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateSetting(user: ActiveUserData, updateSetting: Prisma.SettingUpdateInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('setting')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ActiveUserData\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateSetting\n                                    \n                                            Prisma.SettingUpdateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        uploadAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAvatar(user: ActiveUserData, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('avatar')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                ActiveUserData\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseInterceptors,\n  UploadedFile,\n  ParseFilePipe,\n  MaxFileSizeValidator,\n  FileTypeValidator,\n} from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { Prisma, User } from '@prisma/client';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { updateUserDto } from './dto/update-user.dto';\nimport { Roles } from '../iam/authorization/decorators/roles/roles.decorator';\nimport { RoleEntity } from './entity/role.entity';\nimport { updateInfoDto } from './dto/update-info.dto';\nimport { ActiveUser } from '../iam/authentication/decorators/active-user/active-user.decorator';\nimport { ActiveUserData } from '../iam/authentication/interfaces/active-user-data.interface';\nimport { FileInterceptor } from '@nestjs/platform-express';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Post()\n  async create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  @Get()\n  @Roles(new RoleEntity('ADMIN'))\n  @Get()\n  async findAll() {\n    return this.usersService.findAll();\n  }\n\n  @Get('filter')\n  async findFilter(\n    @Body()\n    params: {\n      skip?: number;\n      take?: number;\n      cursor?: Prisma.UserWhereUniqueInput;\n      where?: Prisma.UserWhereInput;\n      orderBy?: Prisma.UserOrderByWithRelationInput;\n    },\n  ) {\n    return this.usersService.findFilter(params);\n  }\n\n  @Get('')\n  findOne(@ActiveUser() user: ActiveUserData) {\n    return this.usersService.findOne({ id: Number(user.sub) });\n  }\n\n  @Get('info')\n  async findInfo(@ActiveUser() user: ActiveUserData) {\n    return this.usersService\n      .findOne({ id: Number(user.sub) }, { info: true })\n      .then((user) => {\n        return user.info;\n      });\n  }\n\n  @Get('setting')\n  async findSetting(@ActiveUser() user: ActiveUserData) {\n    return this.usersService\n      .findOne({ id: Number(user.sub) }, { setting: true })\n      .then((user) => {\n        return user.setting;\n      });\n  }\n\n  @Patch('')\n  async update(\n    @ActiveUser() user: ActiveUserData,\n    @Body() updateUser: updateUserDto,\n  ) {\n    console.log(user);\n    const result = await this.usersService.update({\n      where: { id: Number(user.sub) },\n      data: updateUser,\n    });\n\n    return {\n      ...result,\n      password: undefined,\n    };\n  }\n\n  @Patch('info')\n  async updateInfo(\n    @Body() updateInfo: updateInfoDto,\n    @ActiveUser() user: ActiveUserData,\n  ) {\n    const result = (await this.usersService.updateInfo({\n      where: { id: Number(user.sub) },\n      data: updateInfo,\n    })) as User & { info: Prisma.InfoGetPayload };\n    return result.info;\n  }\n\n  @Patch('setting')\n  async updateSetting(\n    @ActiveUser() user: ActiveUserData,\n    @Body() updateSetting: Prisma.SettingUpdateInput,\n  ) {\n    const result = (await this.usersService.updateSetting({\n      where: { id: Number(user.sub) },\n      data: updateSetting,\n    })) as User & { setting: Prisma.SettingGetPayload };\n    return result.setting;\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.usersService.remove({ id: Number(id) });\n  }\n\n  @Post('avatar')\n  @UseInterceptors(FileInterceptor('file'))\n  async uploadAvatar(\n    @ActiveUser() user: ActiveUserData,\n    @UploadedFile(\n      new ParseFilePipe({\n        validators: [\n          new MaxFileSizeValidator({\n            maxSize: 1000000,\n          }),\n          new FileTypeValidator({\n            fileType: 'image',\n          }),\n        ],\n      }),\n    )\n    file: Express.Multer.File,\n  ) {\n    const fileName = 'avatar.' + file.originalname.split('.').pop();\n    return this.usersService.uploadAvatar(\n      { id: Number(user.sub) },\n      user.email,\n      fileName,\n      file.buffer,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_imports\n\n\n\n\nCloudModule\n\nCloudModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nCloudModule->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CloudModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { PrismaService } from 'nestjs-prisma';\nimport { CloudModule } from '../cloud/cloud.module';\n\n@Module({\n  imports: [CloudModule],\n  controllers: [UsersController],\n  providers: [UsersService, PrismaService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                checkEmptyData\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findFilter\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                            \n                                    Async\n                                updateInfo\n                            \n                            \n                                updateSetting\n                            \n                            \n                                    Async\n                                uploadAvatar\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService, cloudService: CloudService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                    PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cloudService\n                                                  \n                                                        \n                                                                        CloudService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        checkEmptyData\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkEmptyData(data: updateInfoDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                updateInfoDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(include?: Prisma.UserInclude)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    include\n                                    \n                                            Prisma.UserInclude\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findFilter\n                        \n                    \n                \n            \n            \n                \nfindFilter(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(where: Prisma.UserWhereUniqueInput, include?: Prisma.UserInclude)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    where\n                                    \n                                            Prisma.UserWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    include\n                                    \n                                            Prisma.UserInclude\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(where: Prisma.UserWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:130\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    where\n                                    \n                                            Prisma.UserWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInfo\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInfo(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateSetting\n                        \n                    \n                \n            \n            \n                \nupdateSetting(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAvatar(where: Prisma.UserWhereUniqueInput, email: string, fileName: string, fileBuffer: Buffer)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    where\n                                    \n                                            Prisma.UserWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fileName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fileBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PrismaService } from 'nestjs-prisma';\nimport { Prisma, User } from '@prisma/client';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { updateUserDto } from './dto/update-user.dto';\nimport { updateInfoDto } from './dto/update-info.dto';\nimport { CloudService } from '../cloud/cloud.service';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    private readonly prismaService: PrismaService,\n    private readonly cloudService: CloudService,\n  ) {}\n\n  private checkEmptyData(data: updateInfoDto) {\n    if (Object.keys(data).length === 0) {\n      throw new UnauthorizedException('Data is empty');\n    }\n  }\n\n  async create(createUserDto: CreateUserDto): Promise {\n    const user = await this.prismaService.user.create({\n      data: createUserDto,\n    });\n\n    await this.prismaService.info.create({\n      data: {\n        userId: user.id,\n        email: user.email,\n      },\n    });\n\n    await this.prismaService.setting.create({\n      data: {\n        userId: user.id,\n      },\n    });\n\n    return user;\n  }\n\n  findAll(include?: Prisma.UserInclude): Promise {\n    return this.prismaService.user.findMany({\n      include,\n    });\n  }\n\n  findFilter(params: {\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.UserWhereUniqueInput;\n    where?: Prisma.UserWhereInput;\n    orderBy?: Prisma.UserOrderByWithRelationInput;\n    include?: Prisma.UserInclude;\n  }): Promise {\n    const { skip, take, cursor, where, orderBy, include } = params;\n    return this.prismaService.user.findMany({\n      skip,\n      take,\n      cursor,\n      where,\n      orderBy,\n      include,\n    });\n  }\n\n  findOne(where: Prisma.UserWhereUniqueInput, include?: Prisma.UserInclude) {\n    return this.prismaService.user.findUnique({\n      where,\n      include,\n    });\n  }\n\n  update(params: {\n    where: Prisma.UserWhereUniqueInput;\n    data: updateUserDto;\n  }): Promise {\n    const { where, data } = params;\n    console.log(where, data);\n    this.checkEmptyData(data);\n    return this.prismaService.user.update({\n      where,\n      data,\n    });\n  }\n\n  async updateInfo(params: {\n    where: Prisma.UserWhereUniqueInput;\n    data: updateInfoDto;\n  }): Promise {\n    const { where, data } = params;\n\n    this.checkEmptyData(data);\n\n    return await this.prismaService.user.update({\n      where,\n      data: {\n        info: {\n          update: data,\n        },\n      },\n      include: {\n        info: true,\n      },\n    });\n  }\n\n  updateSetting(params: {\n    where: Prisma.UserWhereUniqueInput;\n    data: Prisma.SettingUpdateInput;\n  }): Promise {\n    const { where, data } = params;\n\n    this.checkEmptyData(data);\n\n    return this.prismaService.user.update({\n      where,\n      data: {\n        setting: {\n          update: data,\n        },\n      },\n      include: {\n        setting: true,\n      },\n    });\n  }\n\n  remove(where: Prisma.UserWhereUniqueInput): Promise {\n    return this.prismaService.user.delete({\n      where,\n    });\n  }\n\n  async uploadAvatar(\n    where: Prisma.UserWhereUniqueInput,\n    email: string,\n    fileName: string,\n    fileBuffer: Buffer,\n  ) {\n    const prefix = `data/${email}/avatar`;\n    // promise All upload cloud and prisma update\n    return Promise.all([\n      this.cloudService.upload(fileName, fileBuffer, prefix),\n      this.prismaService.user.update({\n        where,\n        data: {\n          info: {\n            update: {\n              avatar: `${prefix}/${fileName}`,\n            },\n          },\n        },\n        include: {\n          info: true,\n        },\n      }),\n    ]).then((result) => {\n      return result[1].info;\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                prisma/seed.ts\n            \n            function\n            createPosition\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seed.ts\n            \n            function\n            createUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seed.ts\n            \n            function\n            main\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seed.ts\n            \n            variable\n            createRole\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seed.ts\n            \n            variable\n            prisma\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/cloud/cloud.controller.ts\n            \n            controller\n            CloudController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/cloud/cloud.service.ts\n            \n            injectable\n            CloudService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/cloud/config/cloudflare_r2.config.ts\n            \n            variable\n            configService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/iam/authentication/controllers/authentication.controller.ts\n            \n            controller\n            AuthenticationController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/iam/authentication/controllers/session-authentication/session-authentication.controller.ts\n            \n            controller\n            SessionAuthenticationController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/iam/authentication/decorators/active-user/active-user.decorator.ts\n            \n            variable\n            ActiveUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/iam/authentication/decorators/auth/auth.decorator.ts\n            \n            variable\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/iam/authentication/decorators/auth/auth.decorator.ts\n            \n            variable\n            AUTH_TYPE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/iam/authentication/dto/refresh-token.dto/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/iam/authentication/dto/sign-in-with-token.dto/sign-in-with-token.dto.ts\n            \n            class\n            SignInWithTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/iam/authentication/dto/sign-in.dto/sign-in.dto.ts\n            \n            class\n            SignInDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/iam/authentication/dto/sign-up.dto/sign-up.dto.ts\n            \n            class\n            SignUpDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/iam/authentication/guards/access-token/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/iam/authentication/guards/authentication/authentication.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/iam/authentication/guards/session/session.guard.ts\n            \n            guard\n            SessionGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/iam/authentication/interfaces/active-user-data.interface.ts\n            \n            interface\n            ActiveUserData\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/iam/authentication/services/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/iam/authentication/services/session-authentication/session-authentication.service.ts\n            \n            injectable\n            SessionAuthenticationService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/iam/authentication/services/tfa-authentication/tfa-authentication.service.ts\n            \n            injectable\n            TfaAuthenticationService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/iam/authentication/strategies/access-token/access-token.strategy.ts\n            \n            injectable\n            AccessTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/iam/authentication/strategies/refresh-token/refresh-token.strategy.ts\n            \n            injectable\n            RefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/iam/authentication/utils/refresh-token-ids.storage/refresh-token-ids.storage.ts\n            \n            class\n            RefreshTokenIdsStorageError\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/iam/authentication/utils/refresh-token-ids.storage/refresh-token-ids.storage.ts\n            \n            injectable\n            RefreshTokenIdsStorage\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/iam/authentication/utils/user-serializer/user-serializer.ts\n            \n            class\n            UserSerializer\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/iam/authorization/decorators/roles/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/iam/authorization/decorators/roles/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/iam/authorization/guards/roles/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/iam/constants/iam.contant.ts\n            \n            variable\n            REQUEST_USER_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/iam/hashing/bcrypt/bcrypt.service.ts\n            \n            injectable\n            BcryptService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/iam/hashing/hashing.service.ts\n            \n            injectable\n            HashingService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/create-info.dto.ts\n            \n            class\n            CreateInfoDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dto/update-info.dto.ts\n            \n            class\n            updateInfoDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            updateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entity/info.entity.ts\n            \n            class\n            InfoEntity\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/users/entity/position.entity.ts\n            \n            class\n            PositionEntity\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/entity/role.entity.ts\n            \n            class\n            RoleEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/entity/setting.entity.ts\n            \n            class\n            SettingEntity\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/entity/user.entity.ts\n            \n            class\n            UserEntity\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/12)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @aws-sdk/client-s3 : ^3.429.0\n        \n            @nestjs/common : ^10.2.7\n        \n            @nestjs/config : ^3.1.1\n        \n            @nestjs/core : ^10.2.7\n        \n            @nestjs/jwt : ^10.1.1\n        \n            @nestjs/passport : ^10.0.2\n        \n            @nestjs/platform-express : ^10.2.7\n        \n            @nestjs/swagger : ^7.1.13\n        \n            @nestjs/throttler : ^5.0.0\n        \n            @prisma/client : ^5.4.2\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            connect-redis : ^6.1.3\n        \n            express-session : ^1.17.3\n        \n            ioredis : ^5.3.2\n        \n            nestjs-prisma : ^0.22.0\n        \n            otplib : ^12.0.1\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            qrcode : ^1.5.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthType   (src/.../auth-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/iam/authentication/enums/auth-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthType\n                    \n                \n                        \n                            \n                                 Bearer\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            createPosition   (prisma/.../seed.ts)\n                        \n                        \n                            createUser   (prisma/.../seed.ts)\n                        \n                        \n                            main   (prisma/.../seed.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    prisma/seed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createPosition\n                        \n                    \n                \n            \n            \n                \ncreatePosition()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createUser\n                        \n                    \n                \n            \n            \n                \ncreateUser()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        main\n                        \n                    \n                \n            \n            \n                \nmain()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ pnpm installRunning the app\n# development\n$ pnpm run start\n\n# watch mode\n$ pnpm run start:dev\n\n# production mode\n$ pnpm run start:prodTest\n# unit tests\n$ pnpm run test\n\n# e2e tests\n$ pnpm run test:e2e\n\n# test coverage\n$ pnpm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthenticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthorizationModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CloudModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        IamModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_CloudModule\n\n\n\ncluster_CloudModule_exports\n\n\n\ncluster_IamModule\n\n\n\ncluster_IamModule_imports\n\n\n\n\nCloudModule\n\nCloudModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nCloudModule->UsersModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCloudModule->AppModule\n\n\n\n\n\nCloudService \n\nCloudService \n\nCloudService  -->\n\nCloudModule->CloudService \n\n\n\n\n\nIamModule\n\nIamModule\n\nAppModule -->\n\nIamModule->AppModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAccessTokenStrategy\n\nAccessTokenStrategy\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\nAuthenticationModule -->\n\nAccessTokenStrategy->AuthenticationModule\n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nCloudService\n\nCloudService\n\nCloudModule -->\n\nCloudService->CloudModule\n\n\n\nAuthenticationModule -->\n\nCloudService->AuthenticationModule\n\n\n\n\n\nRefreshTokenIdsStorage\n\nRefreshTokenIdsStorage\n\nAuthenticationModule -->\n\nRefreshTokenIdsStorage->AuthenticationModule\n\n\n\n\n\nTfaAuthenticationService\n\nTfaAuthenticationService\n\nAuthenticationModule -->\n\nTfaAuthenticationService->AuthenticationModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\nAuthenticationModule -->\n\nUsersService->AuthenticationModule\n\n\n\nIamModule -->\n\nAuthenticationModule->IamModule\n\n\n\n\n\nAuthorizationModule\n\nAuthorizationModule\n\nIamModule -->\n\nAuthorizationModule->IamModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    11 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    15 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.0\n        \n            Description : Backend for CTU Task Management\n        \n            License : MIT\n        \n            Author : Zenfection\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/updateInfoDto.html":{"url":"classes/updateInfoDto.html","title":"class - updateInfoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  updateInfoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-info.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateInfoDto } from './create-info.dto';\n\nexport class updateInfoDto extends PartialType(CreateInfoDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/updateUserDto.html":{"url":"classes/updateUserDto.html","title":"class - updateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  updateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class updateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActiveUser   (src/.../active-user.decorator.ts)\n                        \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            AUTH_TYPE_KEY   (src/.../auth.decorator.ts)\n                        \n                        \n                            configService   (src/.../cloudflare_r2.config.ts)\n                        \n                        \n                            createRole   (prisma/.../seed.ts)\n                        \n                        \n                            prisma   (prisma/.../seed.ts)\n                        \n                        \n                            REQUEST_USER_KEY   (src/.../iam.contant.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/iam/authentication/decorators/active-user/active-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ActiveUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (field: keyof ActiveUserData | undefined, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    const user: ActiveUserData | undefined = request[REQUEST_USER_KEY];\n    return field ? user && user?.[field] : user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/iam/authentication/decorators/auth/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...authTypes: AuthType[]) =>\n  SetMetadata(AUTH_TYPE_KEY, authTypes)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AUTH_TYPE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'authType'\n                    \n                \n\n\n        \n    \n\n    src/cloud/config/cloudflare_r2.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        configService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ConfigService()\n                    \n                \n\n\n        \n    \n\n    prisma/seed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createRole\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async () => {}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new PrismaClient()\n                    \n                \n\n\n        \n    \n\n    src/iam/constants/iam.contant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        REQUEST_USER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user'\n                    \n                \n\n\n        \n    \n\n    src/iam/authorization/decorators/roles/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: RoleEntity[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
