// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//! ENUMS
// ? enum policy
enum PolicyType {
  ALLOW
  DENY
}

enum Operator {
  EQUALS
  NOT_EQUALS
  GREATER_THAN
  LESS_THAN
  CONTAINS
  NOT_CONTAINS
  STARTS_WITH
  ENDS_WITH
}

enum UserStatus {
  ONLINE
  AWAY
  BUSY
  INVISIBLE
}

//? enum setting user

enum LanguageSetting {
  en
  vi
}

enum ThemeSetting {
  default
  brand
  teal
  rose
  purple
  amber
}

enum SchemeSetting {
  dark
  light
  auto
}

enum LayoutSetting {
  empty
  classic
  classy
  compact
  dense
  futuristic
  thin
  centered
  enterpise
  material
  modern
}

//! MODELS

model Role {
  id          Int          @id @default(autoincrement()) @map("role_id")
  name        String       @unique
  description String?
  permissions Permission[]
  policies    Policy[]
  User        User[]
}

model Permission {
  id          Int     @id @default(autoincrement()) @map("permission_id")
  name        String  @unique
  description String?
  roles       Role[]
}

model Policy {
  id         Int         @id @default(autoincrement()) @map("policy_id")
  name       String      @unique
  effect     PolicyType
  conditions Condition[]
  roles      Role[]
}

model Condition {
  id        Int      @id @default(autoincrement()) @map("condition_id")
  attribute String
  operator  Operator
  value     String
  policyId  Int
  policy    Policy   @relation(fields: [policyId], references: [id], onDelete: Cascade)

  @@index([attribute, operator])
}

model User {
  id           Int        @id @default(autoincrement()) @map("user_id")
  email        String     @unique @db.VarChar(255)
  password     String
  info         Info?
  setting      Setting?
  isTfaEnabled Boolean    @default(false)
  tfaSecret    String?
  roles        Role[]
  tasks        Task[]
  activities   Activity[]
  positions    Position[]
  deparmentId  Int?
  Deparment    Deparment? @relation(fields: [deparmentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email], name: "user_email_idx")
}

model Deparment {
  id    Int    @id @default(autoincrement()) @map("department_id")
  name  String @unique
  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Position {
  id   Int    @id @default(autoincrement()) @map("position_id")
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model Info {
  userId  Int         @unique
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  about   String?
  address String?
  name    String      @default("New User")
  email   String
  status  UserStatus? @default(ONLINE)
  avatar  String?
  phone   String?     @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Setting {
  userId   Int             @unique
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  theme    ThemeSetting    @default(default)
  scheme   SchemeSetting   @default(light)
  language LanguageSetting @default(en)
  layout   LayoutSetting   @default(modern)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

model Task {
  id          Int        @id @default(autoincrement()) @map("task_id")
  title       String
  description String?
  dueDate     DateTime?
  status      TaskStatus @default(OPEN)
  assignees   User?      @relation(fields: [assigneeId], references: [id])
  assigneeId  Int?
  labels      Label[]
  comments    Comment[]
  Activity    Activity[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement()) @map("comment_id")
  content   String
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum LabelType {
  BUG
  FEATURE
  IMPROVEMENT
  QUESTION
}

model Label {
  id    Int       @id @default(autoincrement())
  name  String    @unique
  type  LabelType
  tasks Task[]
}

enum ActivityType {
  COMMENT
  STATUS_CHANGE
  LABEL_CHANGE
  ASSIGNMENT_CHANGE
  CLOSE
}

model Activity {
  id     Int          @id @default(autoincrement()) @map("activity_id")
  type   ActivityType
  data   Json
  taskId Int
  task   Task         @relation(fields: [taskId], references: [id])
  user   User         @relation(fields: [userId], references: [id])
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
